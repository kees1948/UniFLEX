               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     00:30:44  Jan 07, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                     SWTPc      Intelligent I/O Proce     00:30:45  Jan 07, 2024   Page    2Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     00:30:45  Jan 07, 2024   Page    3Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     00:30:45  Jan 07, 2024   Page    4Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     00:30:45  Jan 07, 2024   Page    5Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     00:30:45  Jan 07, 2024   Page    6Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     00:30:46  Jan 07, 2024   Page    7Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     00:30:46  Jan 07, 2024   Page    8Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * should match nwp_codes.h  and MAX_S_NUM                     * wzsockdev.t                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  0004               D_func2   rmb    2         2  0006               D_func3   rmb    2         3  0008               D_func4   rmb    2         4  000A               D_func5   rmb    2         5  000C               D_func6   rmb    2         6  000E               D_func7   rmb    2         7  0010               D_func8   rmb    2         8  0012               D_func9   rmb    2         9  0014               D_funcA   rmb    2         A  0016               D_funcB   rmb    2         B  0018               D_funcC   rmb    2         C  001A               D_funcD   rmb    2         D  001C               D_funcE   rmb    2         E  001E               D_funcF   rmb    2         F                     *  0020               D_func10  rmb    2         10  0022               D_func11  rmb    2         11  0024               D_func12  rmb    2         12  0026               D_func13  rmb    2         13                     *  0028               D_inthan  rmb    2         14 Interrupt poller/handlerSWTPc      Intelligent I/O Proce     00:30:46  Jan 07, 2024   Page    9Device     Table Structure                            002A               D_init    rmb    2         15 Device initialization  002C               D_test    rmb    2         16 Test for device present                     *  002E               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     00:30:46  Jan 07, 2024   Page   10History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     00:30:46  Jan 07, 2024   Page   11IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               4000  ROMLOorg  equ    $4000     $E000      8K of ROM - $E000-$FFFF               6000  DEBUGROM  equ    $6000     IN RAM  $C000      8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 00:30:46  Jan 07, 2024   Page   12IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)               0002  WZSKIO    equ    %00000010 io modeTask       Structure                 00:30:47  Jan 07, 2024   Page   13IOP        Memory Layout                                           0004  WZSKIS    equ    %00000100 sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZSKIP    equ    %01000000 sock interrupt pending               0080  WZBUSY    equ    %10000000 sock is busy                                                               *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSMCRW    equ    $42       sock mac raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commands               0081  WSRRQF    equ    $80+1     read request data in fifo               0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receiveTask       Structure                 00:30:47  Jan 07, 2024   Page   14IOP        Memory Layout                                                                0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001                         rmb    1         [*] (pre= $00)  sock has fifo allocated  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, i.e. bind                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzupkt    rmb    1         UDP packet flag  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         if split xfer, second part                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header  0020               wzurms    rmb    2         socket remained size                     *                     * open parameters                     *  0022               wzfaml    rmb    2         family            for check AF_  0024               wztype    rmb    2         type              for check SOCK_  0026               wzprot    rmb    2         protocol          for check IPPROTO_                                    0028  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP address  0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP addressTask       Structure                 00:30:47  Jan 07, 2024   Page   15IOP        Memory Layout                              000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_RAW    equ    3         raw socket                                          * protocol families               0001  PF_UNIX   equ    AF_UNIX   same as address families               0002  PF_INET   equ    AF_INET                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             00:30:47  Jan 07, 2024   Page   16IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             00:30:48  Jan 07, 2024   Page   17IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             00:30:48  Jan 07, 2024   Page   18Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  0248               wzsk7     rmb    WZSIZE    sock  0270               wzsk6     rmb    WZSIZE    sock  0298               wzsk5     rmb    WZSIZE    sock  02C0               wzsk4     rmb    WZSIZE    sock  02E8               wzsk3     rmb    WZSIZE    sock  0310               wzsk2     rmb    WZSIZE    sock  0338               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0360  WZNETOF   equ    *  0360               wlocip    rmb    WZLCSZ    network device                     ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0030  ROM_VERSION equ  $30       Major/Minor Version of IOP ROM                                          *                     * Error codes                     *               0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)FIO Simulation Structure             00:30:48  Jan 07, 2024   Page   19Dual_Port RAM Structure                                            0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 generic socket error, actual is passed                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               0001  R_OPEN    equ    $01       [S]  Device open successful               0002  R_CLOSE   equ    $02       [S]  Device close successful               0003  R_RQWR    equ    $03       [S]  request for write               0004  R_WRITE   equ    $04       [S]  write data via fifo to net               0005  R_RQRD    equ    $05       [S]  request for read data               0006  R_READ    equ    $06       [S]  read data via fifo from net               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to macFIO Simulation Structure             00:30:49  Jan 07, 2024   Page   20Dual_Port RAM Structure                                            0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *               0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendto               0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *               0015  MAX_S_NUM equ    21        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                                          *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             00:30:49  Jan 07, 2024   Page   21Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               runlst    rmb    2         Pointer to active tasks  0405               slplst    rmb    4         Pointer to waiting tasks  0409               utask     rmb    2         Currently executing task  040B               jobpri    rmb    1         Current job priority (for scheduling)  040C               chproc    rmb    1         Set if must switch users of CPU (reschedule)                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port  0459               NUM_TSK   rmb    1         max tasks                       045A               hstbuf    rmb    HRECSIZ*MAXHIST  049A               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  049C               tsktab    rmb    2         Task Control Tables  049E               tskend    rmb    2         End of task table  04A0               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A6                         rmb    32                       04C6               SYS_TABS  rmb    0         Start of dynamic system tables                                    04C6  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             00:30:49  Jan 07, 2024   Page   22CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 40A1                    fdb    rom_trap  Unused  FFF2 409A                    fdb    rom_swi3  SWI3  FFF4 4093                    fdb    rom_swi2  SWI2  FFF6 4086                    fdb    rom_firq  FIRQ  FFF8 4395                    fdb    IRQ_han   IRQ  FFFA 408D                    fdb    rom_swi   SWI  FFFC 4080                    fdb    rom_nmi   Background debug  FFFE 405F                    fdb    rom_init  Reset                     FIO Simulation Structure             00:30:49  Jan 07, 2024   Page   23System     RESET Code                                                      4000                         org    ROMLOorg                       4000 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM',0  4009 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  4029 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  403D 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          * share settings with kernel driver code               405A  fio_fsz   equ    *         device fifo size               405C  fio_dsz   equ    *+2       device RAM size               405E  max_trn   equ    *+4       max transactions                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  405A 0200                    fdb    512       fio_fsz FIFO SIZE  405C 0400                    fdb    1024      fio_dsz DEVICE SIZE  405E 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONS                     *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *                     * System RESET code                     *  405F 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  4063                         ldmd   3  4063 113D                    fdb    $113d  4065 03                      fcb    3                               endm                                          *                     * for background debugger                     *                     **        lda     #$15                     **        sta     ACIAC         init debug acia                     **        clr     bdbsta        echo on                                            4066 8E   4395               ldx    #IRQ_han  IRQ  4069 BF   7F00               stx    $7f00     GPPMON vector                                           >406C 17   0053     20        lbsr   stbinit   go initialize system memory                       406F 10FE 049C     30        lds    tsktab    Task 0 Stack  4073 32   E9 00D7            leas   TSKSIZ,s  4077 17   0152               lbsr   fio_reset  407A 17   012C               lbsr   timerinFIO Simulation Structure             00:30:49  Jan 07, 2024   Page   24System     RESET Code                                                    *                     * Initialization complete - Start executing commands                     *  407D               fio_start  407D 7E   449A     10        jmp    rsched                                          FIO Simulation Structure             00:30:49  Jan 07, 2024   Page   25ROM        Interrupt Fielders                                              4080 8D   26       rom_nmi   bsr    rom_int  4082 4E 4D 49 00             fcc    'NMI',0  4086 8D   20       rom_firq  bsr    rom_int  4088 46 49 52 51             fcc    'FIRQ',0  408D 8D   19       rom_swi   bsr    rom_int  408F 53 57 49 00             fcc    'SWI',0  4093 8D   13       rom_swi2  bsr    rom_int  4095 53 57 49 32             fcc    'SWI2',0  409A 8D   0C       rom_swi3  bsr    rom_int  409C 53 57 49 33             fcc    'SWI3',0  40A1 8D   05       rom_trap  bsr    rom_int  40A3 54 52 41 50             fcc    'TRAP',0                       40A8 8E   40B5     rom_int   ldx    #ROM_ERR  40AB BD   5173               jsr    DB_pdata  40AE 35   10                 puls   x  40B0 BD   5173               jsr    DB_pdata  40B3 20   FE       rom_bad   bra    *                     *  40B5 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             00:30:50  Jan 07, 2024   Page   26Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  40C2 8E   0000     stbinit   ldx    #0        s  clear all variables  40C5 CC   0000               ldd    #0  40C8 ED   81       10        std    ,x++  40CA 8C   3EFF               cmpx   #end_vars done yet?  40CD 25   F9                 blo    10b                       40CF CC   0D04               ldd    #DEBUG  40D2 FD   0401               std    DB_cntrl                                            40D5 B6   405E               lda    max_trn   shared with main CPU  40D8 48                      asla             *2  40D9 8B   04                 adda   #4        fixed system tasks  40DB B7   0459               sta    NUM_TSK                     * >40DE 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  40E1 8E   040E     15        ldx    #SI_Q     set queue empty  40E4 BF   0444               stx    SI_Q_ptr  40E7 8E   0447               ldx    #int_buf  reset message in pointer  40EA BF   0453               stx    int_ptr                      >40ED 17   0061     17        lbsr   tskinit   initialize tasks                       40F0 17   109E     18        lbsr   DB_config display configuration  40F3 39                      rts                                          *                     * Set up system tables                     *  40F4               set_tables  40F4 108E 04A0               ldy    #dev_tab  40F8 8E   45CD               ldx    #DEV_SOCK  40FB AF   22                 stx    dev_type,y  40FD AD   98 2A              jsr    [D_init,x]                                          * Compute configuration  4100 CE   41BB               ldu    #mod_tbl  tables with module refs  4103 AE   C4       12        ldx    mod_type,u  4105 27   09                 beq    20f       jump if end of module table  4107 AD   98 2C              jsr    [D_test,x] check for device  410A 25   04                 bcs    15f       jump if found  410C 33   44                 leau   MOD_SIZE,u  410E 20   F3                 bra    12b                     *FIO Simulation Structure             00:30:50  Jan 07, 2024   Page   27Table      Initialization                             4110               15  4110               20                     * -- All done setting up configuration                       4110 CC   04C6               ldd    #SYS_TABS start of system tables  4113 1F   03                 tfr    d,u                     * -- Task table  4115 86   D7                 lda    #TSKSIZ  4117 F6   0459               ldb    NUM_TSK  411A 3D                      mul  411B FF   049C               stu    tsktab >411E 17   0022               lbsr   sto_chk   check for system table space overflow  4121 FF   049E               stu    tskend                     *                     * -- All done  4124 39            90        rts                     *  4125 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  413C 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  4143 33   CB       sto_chk   leau   d,u       compute new end pointer  4145 1183 3EFF               cmpu   #end_vars overflow?  4149 22   03                 bhi    10f       yes - return error  414B 1C   FE                 clc              no         - return OK  414D 39                      rts  414E 1A   01       10        sec              ..         bad owies  4150 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  4151 BE   049C     tskinit   ldx    tsktab  4154 BF   0409               stx    utask  4157 F6   0459               ldb    NUM_TSK   # tasks in system  415A 34   04                 pshs   b  415C 10BE 049C               ldy    tsktab    task 1  4160 31   A9 00D7            leay   TSKSIZ,y  4164               10                                            4164 86   04       11        lda    #TFREE    mark all tasks free  4166 BC   049C               cmpx   tsktab    is this the system task?FIO Simulation Structure             00:30:50  Jan 07, 2024   Page   28Table      Initialization                             4169 26   02                 bne    15f  416B 86   05                 lda    #TSYS     the system task is never free  416D A7   04       15        sta    tsstat,x  416F 86   FF                 lda    #$FF      not associated with a terminal  4171 A7   0D                 sta    tsdev,x  4173 A7   0E                 sta    tsdev+1,x  4175 33   89 00D7            leau   TSKSIZ,x  initialize stack  4179 CC   4319               ldd    #IO_han  417C 34   20                 pshs   y  417E AC   E1                 cmpx   ,s++      task 1?  4180 26   03                 bne    20f       no - normal I/O handling task  4182 CC   43E9               ldd    #SI_HAN   yes - special terminal interrupt handling task  4185 36   06       20        pshu   d  4187 EF   88 11              stu    usp,x  418A EF   88 13              stu    umark0,x  418D 30   89 00D7            leax   TSKSIZ,x  4191 6A   E4                 dec    0,s       done?  4193 26   CF                 bne    10b  4195 32   61                 leas   1,s       clean up stack  4197 CC   0000               ldd    #0        nothing running or sleeping  419A FD   0403               std    runlst  419D FD   0405               std    slplst  41A0 FD   0407               std    slplst+tsslnk  41A3 30   A4                 leax   0,y       start interrupt handling task  41A5 BD   4540               jsr    makrdy  41A8 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       41A9 86   00       timerin   lda    #%00000000 D0      (OFF!)  41AB B7   8400               sta    tim_base  interrupt enable  41AE 39                      rts                                                         41AF  timerack  equ    *  41AF 86   01                 lda    #1  41B1 B7   8401               sta    tim_rest  reset interrupt  41B4 39                      rts                       41B5 B6   8400     timerchk  lda    tim_base  41B8 84   80                 anda   #%10000000 interrupt flag  41BA 39                      rtsFIO Simulation Structure             00:30:50  Jan 07, 2024   Page   29IOP        Configuration                                                                      *                     * define which type of boards are present                     *               41BB  mod_tbl   equ    *  41BB 45CD 41C1               fdb    DEV_SOCK,WZ5_name  41BF 0000                    fdb    0                     *  41C1 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             00:30:51  Jan 07, 2024   Page   30FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     *  41CC               fio_reset                     * when here, all storage locations have been erased already                     *  41CC 8E   0000               ldx    #0  41CF 9F   14                 stx    fifo_get  set Q pointers  41D1 9F   16                 stx    fifo_put  41D3 8E   0360               ldx    #WZNETOF  41D6 9F   1A                 stx    fifo_us1  41D8 8E   0220               ldx    #WZSKOFF  41DB 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  41DD 86   08                 lda    #8  41DF A7   84       01        sta    wzenum,x  41E1 30   88 28              leax   WZSIZE,x  to next  41E4 4A                      deca  41E5 26   F8                 bne    01b                     *  41E7 BE   405C               ldx    fio_dsz  41EA 30   1E                 leax   -2,x      one from top  41EC CE   0400               ldu    #1024     -- Reset Time-Out value                     *  41EF C6   FF       fio_wait  ldb    #255      Spin counter                     *  41F1               00  41F1 6D   84                 tst    0,x       fio_cpuF  41F3 27   16                 beq    10f                     *  41F5 5A                      decb  41F6 26   F9                 bne    00b       jump back if not ready                     *  41F8 33   5F                 leau   -1,u  41FA 1183 0000               cmpu   #0  41FE 26   EF                 bne    fio_wait  4200 8E   403D               ldx    #CPU_down  4203 17   0F6D               lbsr   DB_pdata  4206 17   0F64               lbsr   DB_main  4209 20   C1                 bra    fio_reset                     * reset OK  420B 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     *  420C BE   0453     fio_irq   ldx    int_ptr   input message pointer  420F 96   00                 lda    cpu_fio   move REQUEST  4211 A7   80                 sta    ,x+FIO Simulation Structure             00:30:51  Jan 07, 2024   Page   31FIO        Simulation Routines                        4213 DC   01                 ldd    cpu_fio1  sequence # TASK ID  4215 ED   81                 std    ,x++  4217 96   03                 lda    cpu_fio2  specific DATA  4219 A7   80                 sta    ,x+  421B DC   04                 ldd    cpu_fio3  device major/minor  421D ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  421F FE   405C               ldu    fio_dsz  4222 33   5F                 leau   -1,u  4224 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  4226 BF   0453               stx    int_ptr   update pointer  4229 108E 0447               ldy    #int_buf  get message from buffer  422D A6   A4                 lda    0,y       -- Send interrupt command?  422F 81   38                 cmpa   #S_INTRPT  4231 26   0D                 bne    30f                     *                     * special case OOB signal                     *  4233 10BF 0453               sty    int_ptr   reset pointer  4237 E6   23                 ldb    3,y       signal  4239 AE   24                 ldx    4,y       SOCK reference                     *  423B BD   461B               jsr    sdev_sig  send device signal  423E 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  4240 BE   049C     30        ldx    tsktab    search for an available task  4243 F6   0459               ldb    NUM_TSK   Number of tasks in system                     *  4246 A6   04       32        lda    tsstat,x  4248 81   04                 cmpa   #TFREE    looking for a "free" task  424A 27   0E                 beq    40f                     *  424C 30   89 00D7            leax   TSKSIZ,x  4250 5A                      decb  4251 26   F3                 bne    32b                     *  4253 C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >4255 BD   4276               jsr    fio_msg  4258 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  425A 108E 0447     40        ldy    #int_buf  get message from buffer  425E 10BF 0453               sty    int_ptr   reset pointer  4262 E6   A0                 ldb    ,y+       command byte  REQUESTFIO Simulation Structure             00:30:51  Jan 07, 2024   Page   32FIO        Simulation Routines                        4264 E7   09                 stb    tscmd,x   save for task  4266 EC   A1                 ldd    ,y++      sequence #    task ID  4268 ED   0A                 std    tsseq,x  426A E6   A0                 ldb    ,y+       command specific DATA  426C E7   0C                 stb    tstval,x  426E EC   A1                 ldd    ,y++      associate with terminal major/minor  4270 ED   0D                 std    tsdev,x  4272 BD   4540               jsr    makrdy    make task ready to run                     *  4275 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *  4276 34   54       fio_msg   pshs   b,x,u     save register  4278 FE   405C               ldu    fio_dsz  427B 33   5E                 leau   -2,u      one off top  427D D7   09                 stb    fio_cpu   set up mailbox value                       427F 86   FF       5         lda    #$FF      tell CPU mailbox full  4281 A7   C4                 sta    0,u       fio_cpuF  4283 8E   FFFF     05        ldx    #$FFFF    time-out counter                     *  4286 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  4288 27   06                 beq    20f       jump if consumed                     *  428A 30   1F                 leax   -1,x      time-out yet?  428C 26   F8                 bne    10b                     *  428E 20   F3                 bra    05b       try again                     *  4290 35   D4       20        puls   b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  4292 34   16       fio_response pshs d,x  4294 8D   18                 bsr    FIO_get   access FIO  4296 BE   0409               ldx    utask     task ID  4299 EC   0A                 ldd    tsseq,x  429B DD   0A                 std    fio_cpu1  429D EC   0D                 ldd    tsdev,x   device info  429F DD   0D                 std    fio_cpu3FIO Simulation Structure             00:30:51  Jan 07, 2024   Page   33FIO        Simulation Routines                        42A1 A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  42A3 97   0C                 sta    fio_cpu2  42A5 E6   61                 ldb    1,s       is RESPONSE code >42A7 BD   4276               jsr    fio_msg  42AA 8D   17                 bsr    FIO_rel   release FIO  42AC 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  42AE 34   76       FIO_get   pshs   d,x,y,u   save registers  42B0 108E 0446     10        ldy    #FIO_lock is the device locked  42B4 6D   A4                 tst    0,y  42B6 27   07                 beq    20f       no - go get it                     *  42B8 C6   CE                 ldb    #FIOPRI   waiting for the FIO  42BA BD   457A               jsr    sleep  42BD 20   F1                 bra    10b       try again                     *  42BF 6C   A4       20        inc    0,y       mark in use  42C1 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  42C3 34   76       FIO_rel   pshs   d,x,y,u  42C5 108E 0446               ldy    #FIO_lock  42C9 6F   A4                 clr    0,y  42CB BD   4556               jsr    wakeup  42CE 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  42D0 34   04       FIFOgeta  pshs   b  42D2 8D   05                 bsr    FIFO_get  42D4 35   02                 puls   a  42D6 1E   89                 exg    a,b  42D8 39                      rts                     *  42D9 34   12       FIFO_get  pshs   a,x  42DB DC   12                 ldd    fifo_cnt  any data?  42DD 27   15                 beq    99f       no - exit                     *  42DF                         decd   yes       - adjust count  42DF 104A                    fdb    $104a                               endm  42E1 DD   12                 std    fifo_cnt  42E3 9E   14                 ldx    fifo_get  get consumer pointer  42E5 E6   88 20              ldb    fifo,x    fetch byteFIO Simulation Structure             00:30:52  Jan 07, 2024   Page   34FIO        Simulation Routines                        42E8 30   01                 leax   1,x       bump pointer  42EA BC   405A               cmpx   fio_fsz   end of fifo?  42ED 26   03                 bne    10f                     *  42EF 8E   0000               ldx    #0        reset pointer                     *  42F2 9F   14       10        stx    fifo_get                     *  42F4 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  42F6 34   04       FIFOputa  pshs   b  42F8 1F   89                 tfr    a,b  42FA 8D   02                 bsr    FIFO_put  42FC 35   84                 puls   b,pc                     *  42FE 34   16       FIFO_put  pshs   d,x  4300 9E   16                 ldx    fifo_put  get consumer pointer  4302 E7   88 20              stb    fifo,x    store byte  4305 30   01                 leax   1,x       bump pointer  4307 BC   405A               cmpx   fio_fsz   end of FIFO?  430A 26   03                 bne    10f                     *  430C 8E   0000               ldx    #0        reset pointer  430F 9F   16       10        stx    fifo_put                     *  4311 DC   12                 ldd    fifo_cnt  4313                         incd  4313 104C                    fdb    $104c                               endm  4315 DD   12                 std    fifo_cnt  4317 35   96       99        puls   d,x,pcFIO Simulation Structure             00:30:52  Jan 07, 2024   Page   35IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  4319               IO_han    seti   block     interrupts  4319 1A   50                 orcc   #FF|IF                               endm                     *                     * we execute the task belonging to the transaction                     *  431B               10        clri  431B 1C   AF                 andcc  #!(FF|IF)                               endm  431D BE   0409               ldx    utask     get task control block address  4320 A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  4322 44                      lsra             isolate    command  4323 44                      lsra  4324 44                      lsra                     **        lsra  4325 81   15                 cmpa   #MAX_S_NUM  4327 22   69                 bhi    bad_cmd                     *  4329 48                      lsla             --   word index on command  432A 34   10                 pshs   x  432C 8E   04A0               ldx    #dev_tab  432F AE   02                 ldx    dev_type,x get handler table address  4331 10AE 86                 ldy    a,x       get processor address  4334 35   10                 puls   x  4336 34   20                 pshs   y  4338 10AE 0F                 ldy    tsagin,x  if 0, d nothing  433B 27   0A                 beq    05f       else it is target ponter  433D 10AF E4                 sty    0,s  4340 108E 0000               ldy    #0  4344 10AF 0F                 sty    tsagin,x  reset pointer  4347 35   20       05        puls   y         change address  4349 4F                      clra                     *  434A 8E   4377               ldx    #IO_end   interrupt handler address  434D 34   10                 pshs   x  434F BE   0409               ldx    utask     task pointer  4352 10EF 88 15              sts    umark1,x  4356 EE   0D                 ldu    tsdev,x   get sock refernceFIO Simulation Structure             00:30:52  Jan 07, 2024   Page   36IO         Command Handler                            4358 1E   03                 exg    d,u  435A 84   07                 anda   #%00000111 mask off address bits  435C 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  435E AD   A4                 jsr    0,y       perform operation & return status  4360 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  4362 BE   0409               ldx    utask     restore task pointer  4365 108C FFFF               cmpy   #$ffff  4369 26   09                 bne    20f                     * task is NOT done yet  436B 86   BA                 lda    #POLPRI  436D A7   05                 sta    tsprir,x  at lower prio  436F BD   4494               jsr    change  4372 20   1B                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  4374 BD   4292     20        jsr    fio_response                     *                     * task is done                     *  4377               IO_end    seti   mask      interrupts  4377 1A   50                 orcc   #FF|IF                               endm  4379 BE   0409               ldx    utask     restore task control block address  437C A7   0C                 sta    tstval,x  remember transaction value sent  437E E7   09                 stb    tscmd,x   and command response  4380 86   04                 lda    #TFREE    mark task "terminated & free"  4382 A7   04                 sta    tsstat,x  4384 86   FF                 lda    #$FF      disassociate from any terminal  4386 A7   0D                 sta    tsdev,x  4388 A7   0E                 sta    tsdev+1,x  438A 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  438C BD   449A     90        jsr    rsched    run other tasks >438F 16   FF87     91        lbra   IO_han                                          *                     * Illegal command                     *  4392               bad_cmdFIO Simulation Structure             00:30:52  Jan 07, 2024   Page   37IO         Command Handler                            4392 C6   81                 ldb    #E_BADCMD error code  4394 39                      rtsFIO Simulation Structure             00:30:52  Jan 07, 2024   Page   38Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               4395  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  4395 BE   405C     10        ldx    fio_dsz  4398 30   1F                 leax   -1,x  439A A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  439C 27   03                 beq    99f       no - move on  439E BD   420C               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  43A1 3B            99        rti              return from interrupt                     *  43A2 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  43AD 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             00:30:53  Jan 07, 2024   Page   39Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  43BA 34   36       int_all   pshs   d,x,y  43BC F6   0459               ldb    NUM_TSK  43BF C0   02                 subb   #2  43C1 34   04                 pshs   b  43C3 BE   049C               ldx    tsktab  43C6 30   89 01AE            leax   2*TSKSIZ,x                     *  43CA EC   61       10        ldd    1,s  43CC 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  43CF 26   0C                 bne    20f                     *  43D1 BC   0409               cmpx   utask     make sure I don't get blown away  43D4 27   07                 beq    20f                     *  43D6 34   16                 pshs   d,x  43D8 BD   45AF               jsr    xmtint    interrupt task  43DB 35   16                 puls   d,x                     *  43DD 30   89 00D7  20        leax   TSKSIZ,x  next task  43E1 6A   E4                 dec    0,s       more tasks?  43E3 26   E5                 bne    10b  43E5 32   61                 leas   1,s                     *  43E7 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             00:30:53  Jan 07, 2024   Page   40Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  43E9 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  43ED                         seti  43ED 1A   50                 orcc   #FF|IF                               endm  43EF FE   0444               ldu    SI_Q_ptr  get current Q ptr  43F2 1183 040E               cmpu   #SI_Q     anything in Q?  43F6 26   07                 bne    20f       yes - go process it                     *  43F8 C6   D8                 ldb    #SIQPRI   wait for something to do  43FA BD   457A               jsr    sleep  43FD 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  43FF E6   C2       20        ldb    0,-u      B = Interrupt #  4401 34   04                 pshs   b  4403 EC   C3                 ldd    0,--u     A = Device #  4405 34   06                 pshs   d  4407 EC   C3                 ldd    0,--u     task ID  4409 34   06                 pshs   d         save registers  440B FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  440E E6   63                 ldb    3,s       set up to flush all input for this terminal                     **!       jsr     ttftab     X=ttytab, U=device table                     **!       jsr     flushi  4410                         clri   allow     interrupts  4410 1C   AF                 andcc  #!(FF|IF)                               endm                     *  4412 BD   42AE               jsr    FIO_get   get access to FIO  4415 EC   E1                 ldd    0,s++     task ID  4417 DD   0A                 std    fio_cpu1  4419 EC   E1                 ldd    ,s++      terminal #  441B DD   0D                 std    fio_cpu3  terminal  441D E6   E0                 ldb    ,s+       interrupt #  441F D7   0C                 stb    fio_cpu2  signal  4421 C6   07                 ldb    #R_INTRPT  4423 BD   4276               jsr    fio_msg   send interrupt message  4426 BD   42C3               jsr    FIO_rel   release access to FIO  4429 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = SOCK address                     *   jsr send_SIFIO Simulation Structure             00:30:53  Jan 07, 2024   Page   41Terminal   Interrupt Handling Task                                       *  442B 34   76       send_SI   pshs   d,x,y,u   save registers  442D FE   0444               ldu    SI_Q_ptr  get Q head  4430 1183 0444               cmpu   #SI_Q_ptr check for overflow  4434 24   0D                 bhs    90f       exit if so - sorry                     *  4436 34   04                 pshs   b                     **!       ldd     ttask,x    task id  4438 ED   C1                 std    0,u++                     **!       ldd     tdevic,x   get terminal #  443A ED   C1                 std    0,u++     place value in Queue  443C 35   04                 puls   b  443E E7   C0                 stb    0,u+  4440 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  4443 108E 040E     90        ldy    #SI_Q     wake up Queue server  4447 BD   4556               jsr    wakeup  444A 35   F6                 puls   d,x,y,u,pc return                     FIO Simulation Structure             00:30:53  Jan 07, 2024   Page   42History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  444C 34   16       H_cpu     pshs   d,x  444E BE   049A               ldx    hstptr    get history queue pointer  4451 96   00                 lda    cpu_fio  4453 A7   84                 sta    hst_cmd,x  4455 96   01                 lda    cpu_fio1  4457 A7   01                 sta    hst_seq,x  4459 96   04                 lda    cpu_fio3  445B A7   02                 sta    hst_tty,x  445D 96   03                 lda    cpu_fio2  445F A7   03                 sta    hst_val,x  4461 30   04                 leax   HRECSIZ,x  4463 8C   049A               cmpx   #hstptr   end of Queue?  4466 25   03                 blo    10f  4468 8E   045A               ldx    #hstbuf  446B BF   049A     10        stx    hstptr  446E 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  4470 34   16       H_fio     pshs   d,x  4472 BE   049A               ldx    hstptr    get history queue pointer  4475 96   09                 lda    fio_cpu  4477 A7   84                 sta    hst_cmd,x  4479 96   0A                 lda    fio_cpu1  447B A7   01                 sta    hst_seq,x  447D 96   0D                 lda    fio_cpu3  447F A7   02                 sta    hst_tty,x  4481 96   0C                 lda    fio_cpu2  4483 A7   03                 sta    hst_val,x  4485 30   04                 leax   HRECSIZ,x  4487 8C   049A               cmpx   #hstptr   end of Queue?  448A 25   03                 blo    10f  448C 8E   045A               ldx    #hstbuf  448F BF   049A     10        stx    hstptr  4492 35   96                 puls   d,x,pcFIO Simulation Structure             00:30:54  Jan 07, 2024   Page   43Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       4494 BE   0409     change    ldx    utask     point to task table entry >4497 17   006D               lbsr   putrun    put on ready list                     *  449A               rsched    seti   mask      interrupts  449A 1A   50                 orcc   #FF|IF                               endm  449C BE   0409               ldx    utask     point to current task  449F 10EF 88 13              sts    umark0,x  save stack pointers  44A3 BE   049C               ldx    tsktab    point to task table  44A6 8D   23                 bsr    swtchu    switch users  44A8 7F   040D               clr    idle      reset idle/running flag                     *  44AB 7F   040C     rsche2    clr    chproc    reset change flag >44AE 17   0025               lbsr   getjob    get a new task  44B1 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       44B3 86   7F       05        lda    #127      set higheset priority  44B5 B7   040B               sta    jobpri    set as current  44B8                         clri   clear     interrupts  44B8 1C   AF                 andcc  #!(FF|IF)                               endm                     * idle work could go on here  44BA 12                      nop  44BB                         seti  44BB 1A   50                 orcc   #FF|IF                               endm  44BD 20   EC                 bra    rsche2    loop til find a ready one                     *  44BF F7   040B     rsche3    stb    jobpri    set new priority  44C2 8D   07                 bsr    swtchu    switch users top pageFIO Simulation Structure             00:30:54  Jan 07, 2024   Page   44Scheduler  routines                                   44C4 BE   0409               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  44C7 CC   0001               ldd    #1        return 1 to new task  44CA 39                      rts              return                                              *                     * Switch users                     *   X - Task entry for new task                     *  44CB 35   20       swtchu    puls   y         get return address  44CD BF   0409               stx    utask     set up new running task  44D0 10EE 88 13              lds    umark0,x  reset stack                                          ***+++                     ***---                       44D4 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             00:30:54  Jan 07, 2024   Page   45Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       44D6 5F            getjob    clrb             clear      flag  44D7 BE   0403               ldx    runlst    point to head of list  44DA 27   1F                 beq    getjo6    empty list?                     *  44DC A6   04       getjo1    lda    tsstat,x  get status byte  44DE 81   01                 cmpa   #TRUN     is it in run state?  44E0 26   1B                 bne    getjo8                     *  44E2 5D                      tstb             first      in list?  44E3 27   06                 beq    getjo2                     *  44E5 EC   84                 ldd    tslink,x  remove from list  44E7 ED   A4                 std    tslink,y  44E9 20   07                 bra    getjo4                     *  44EB 10AE 84       getjo2    ldy    tslink,x  remove from list head  44EE 10BF 0403               sty    runlst    set new head                     *  44F2 E6   05       getjo4    ldb    tsprir,x  get priority  44F4 6F   84                 clr    tslink,x  zero out link  44F6 6F   01                 clr    tslink+1,x so not run list  44F8 86   FF                 lda    #$ff      set ne status  44FA 39                      rts              return                         *  44FB 4F            getjo6    clra             set        eq status  44FC 39                      rts                     *  44FD 1F   12       getjo8    tfr    x,y       save old pos  44FF AE   84                 ldx    tslink,x  follow link  4501 27   F8                 beq    getjo6                     *  4503 C6   01                 ldb    #1        set flag  4505 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             00:30:54  Jan 07, 2024   Page   46Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       4507 34   01       putrun    pshs   cc        save status  4509                         seti   mask      interrupts  4509 1A   50                 orcc   #FF|IF                               endm  450B 10BE 0403               ldy    runlst    point to head  450F 26   0A                 bne    putru2  4511 BF   0403               stx    runlst    set new head                     *  4514 CC   0000     putru1    ldd    #0        set last link  4517 ED   84                 std    tslink,x  4519 35   81                 puls   cc,pc     return                     *  451B E6   05       putru2    ldb    tsprir,x  get priority  451D E1   25                 cmpb   tsprir,y  look for correct prior slot  451F 2F   08                 ble    putru4                     *  4521 FC   0403               ldd    runlst  4524 BF   0403               stx    runlst    set new head  4527 20   0F                 bra    putru5    link in rest                     *  4529 1F   23       putru4    tfr    y,u       save last look  452B 10AE A4                 ldy    tslink,y  follow link  452E 27   0C                 beq    putru6                     *  4530 E1   25                 cmpb   tsprir,y  check priority  4532 2F   F5                 ble    putru4                     *  4534 EC   C4                 ldd    tslink,u  link into list here  4536 AF   C4                 stx    tslink,u                     *  4538 ED   84       putru5    std    tslink,x  453A 35   81                 puls   cc,pc     return                     *  453C AF   C4       putru6    stx    tslink,u  453E 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             00:30:55  Jan 07, 2024   Page   47Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       4540 86   01       makrdy    lda    #TRUN     set status  4542 A7   04                 sta    tsstat,x  4544 CC   0000               ldd    #0        clear events flag  4547 ED   06                 std    tsevnt,x  4549 8D   BC                 bsr    putrun    put on ready list  454B E6   05                 ldb    tsprir,x  get priority  454D F1   040B               cmpb   jobpri    higher than current?  4550 2F   03                 ble    makrd6                     *  4552 7C   040C               inc    chproc    set change flag                     *  4555 39            makrd6    rts              return    FIO Simulation Structure             00:30:55  Jan 07, 2024   Page   48Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       4556 34   57       wakeup    pshs   cc,d,x,u  save registers  4558                         seti   mask      interupts  4558 1A   50                 orcc   #FF|IF                               endm  455A CE   0405               ldu    #slplst  455D AE   42                 ldx    tsslnk,u  point to sleep list  455F 27   0B                 beq    wakeu4                     *  4561 10AC 06       wakeu2    cmpy   tsevnt,x  check event  4564 27   08                 beq    wakeu5  4566 33   84                 leau   0,x       mark this entry                     *  4568 AE   02       wakeu3    ldx    tsslnk,x  follow chain  456A 26   F5                 bne    wakeu2    end of list?                     *  456C 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  456E 34   70       wakeu5    pshs   x,y,u     save registers  4570 EC   02                 ldd    tsslnk,x  remove from list  4572 ED   42                 std    tsslnk,u  4574 8D   CA                 bsr    makrdy    put on ready list  4576 35   70                 puls   u,x,y  4578 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             00:30:55  Jan 07, 2024   Page   49Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  457A 34   51       sleep     pshs   cc,x,u    save registers  457C BE   0409               ldx    utask     point to task  457F 6D   08                 tst    tssgnl,x  any signals waiting?  4581 26   1F                 bne    sleep7                     *  4583                         seti   mask      ints  4583 1A   50                 orcc   #FF|IF                               endm  4585 E7   05                 stb    tsprir,x  set priority  4587 10AF 06                 sty    tsevnt,x  set event  458A 86   02                 lda    #TSLEEP   set status  458C A7   04                 sta    tsstat,x  458E FC   0407               ldd    slplst+tsslnk get head of list  4591 ED   02                 std    tsslnk,x  set new link  4593 BF   0407               stx    slplst+tsslnk set new head  4596 17   FF01               lbsr   rsched    reschedule cpu                       4599 BE   0409     20        ldx    utask     get task entry  459C 6D   08                 tst    tssgnl,x  any signals waiting?  459E 26   02                 bne    sleep7                     *  45A0 35   D1                 puls   cc,x,u,pc return                     *  45A2 BE   0409     sleep7    ldx    utask     reset signal  45A5 6F   08                 clr    tssgnl,x  45A7 EC   88 15              ldd    umark1,x  stack reset point  45AA 35   51                 puls   cc,x,u    reset cc and registers  45AC 1F   04                 tfr    d,s       change stacks  45AE 39                      rts              returnFIO Simulation Structure             00:30:55  Jan 07, 2024   Page   50Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  45AF 34   76       xmtint    pshs   d,x,y,u   save registers  45B1 A6   04                 lda    tsstat,x  get task state  45B3 81   01                 cmpa   #TRUN     running?  45B5 26   06                 bne    10f       no - try something else                     *  45B7 86   01                 lda    #1        set signal  45B9 A7   08                 sta    tssgnl,x  45BB 20   0E                 bra    99f       exit                     *  45BD 81   02       10        cmpa   #TSLEEP   task sleeping?  45BF 26   0A                 bne    99f       no - can't send interrupt                     *  45C1 86   01                 lda    #1        set signal  45C3 A7   08                 sta    tssgnl,x  45C5 10AE 06                 ldy    tsevnt,x  wake task up >45C8 17   FF8B               lbsr   wakeup                     *  45CB 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             00:30:56  Jan 07, 2024   Page   51Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  45CD               DEV_SOCK  45CD 4392                    fdb    bad_cmd   0  45CF 4653                    fdb    skopen    S_OPEN    1 open socket  45D1 46CC                    fdb    skclos    S_CLOSE   2 close socket  45D3 48C7                    fdb    skreqwr   S_RQWR    3 request write to socket  45D5 4908                    fdb    sksend    S_SEND    4 write data to socket  45D7 485D                    fdb    skreqrd   S_RQRD    5 request read data from socket  45D9 48A5                    fdb    skrecv    S_RECV    6 read data from socket  45DB 4B34                    fdb    skintrp   S_INTRPT  7 interrupt socket  45DD 4719                    fdb    skconn    S_CONNECT 8 connect socket  45DF 47AF                    fdb    skbind    S_BIND    9 bind socket  45E1 47F4                    fdb    sklist    S_LISTEN  10 listen on socket  45E3 4826                    fdb    skacpt    S_ACCEPT  11 accept connection  45E5 4B34                    fdb    skdisc    S_DISCON  12 disconnect socket  45E7 4B34                    fdb    sksmac    S_SNDMAC  13 send mac  45E9 4B34                    fdb    skskep    S_SNDKEP  14 send keep alive  45EB 4A7C                    fdb    skspcl    S_SPCL    15 special command  45ED 492A                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  45EF 498F                    fdb    skurrd    S_RREAD   17 read data readfrom  45F1 49B9                    fdb    skurwt    S_WRQSTO  18 request write sendto  45F3 4A4C                    fdb    skusnt    S_WSNDTO  19 write data sendto  45F5 4A03                    fdb    skusnm    S_WSNDTM  20 write data send more                     *  45F7 461A                    fdb    skinthan  16 socket interrupt handler  45F9 45FD                    fdb    skinit    17 socket initialization  45FB 4617                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectively                     * cleared to zero, with exception of the enumeration byte                     *                                          *                     * do everything to init the system                     *               45FD  skinit    equ    *  45FD BD   4B3B               jsr    spinit    set SPI  4600 C6   80                 ldb    #%10000000 software reset  4602 BD   4C0B               jsr    PCRMR  4605 BD   4BFC     01        jsr    GCRMR  4608 5D                      tstb  4609 2B   FA                 bmi    01bFIO Simulation Structure             00:30:56  Jan 07, 2024   Page   52wz socket interface routines                          460B C6   78                 ldb    #%01111000 power up  460D BD   4DE9               jsr    PCRPHY    set the PHY part  4610 CC   8000               ldd    #32768  4613 FD   0457               std    wzanyp    set value for Source port  4616 39                      rts                                          *                     * test if device is present                     *  4617 1A   01       sktest    sec              yes  4619 39                      rts                                          *                     * skinthan, fromddevice table                     *               461A  skinthan  equ    *  461A 39                      rts                                          *                     * device signal handle                     *               461B  sdev_sig  equ    *  461B 39                      rts                                          *                     * get a new source port                     *  461C FC   0457     sknewp    ldd    wzanyp    else create one  461F                         incd  461F 104C                    fdb    $104c                               endm  4621 1083 FFF0               cmpd   #$FFF0  4625 25   03                 blo    03f  4627 CC   8000               ldd    #$8000  462A FD   0457     03        std    wzanyp  462D 39                      rts                                                               *                     * wzdevt, device test, return Z if running, NZ if not                     *  462E 34   22       wzdevt    pshs   a,y  4630 109E 1A                 ldy    fifo_us1  device info  4633 A6   A8 12              lda    wzdsta,y  4636 81   FF                 cmpa   #$ff      open  4638 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info                     *  463A A6   C4       skfres    lda    wzenum,u  socket #, is remembered  463C                         trfr   A,EFIO Simulation Structure             00:30:56  Jan 07, 2024   Page   53wz socket interface routines                          463C 1F                      fcb    $1f  463D 8E                      fcb    A<<4|E                               endm  463E 6F   47                 clr    wzerr,u   init result  4640 39                      rts                                          *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  4641 34   06       skctcp    pshs   d  4643 EC   C8 24              ldd    wztype,u  SOCK_STREAM  4646 C1   01                 cmpb   #SK_STRM  is TCP  4648 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  464A 34   06       skcudp    pshs   d  464C EC   C8 24              ldd    wztype,u  SOCK_DGRAM  464F C1   02                 cmpb   #SK_DGRM  is UDP  4651 35   86                 puls   d,pc                                          ****************************************************************                     *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               4653  skopen    equ    * >4653 BD   463A               jsr    skfres                     *                     * check if DEVICE is active                     * >4656 BD   462E               jsr    wzdevt  4659 27   06                 beq    11f  465B BD   46E7               jsr    skclin    NO, close internal and don't start >465E 16   003D     04        lbra   skoper1                     *                     * retry, we do all things                     *  4661 A6   42       11        lda    wzfsta,u  check if allocated by OS  4663 2A   F9                 bpl    04b       no, do nothing                     *                     * check socket() call arguments                     *  4665 6F   43                 clr    wzflg,u   erase flags  4667 EC   C8 22              ldd    wzfaml,u  466A C1   02                 cmpb   #AF_INETFIO Simulation Structure             00:30:56  Jan 07, 2024   Page   54wz socket interface routines                          466C 26   F0                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  466E EC   C8 24              ldd    wztype,u  4671 C1   01                 cmpb   #SK_STRM  SOCK_STREAM  4673 27   10                 beq    01f  4675 C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  4677 27   08                 beq    21f  4679 C1   03                 cmpb   #SK_RAW   SOCK_RAW  467B 26   25                 bne    skoper2                     * raw socket  467D C6   04                 ldb    #%00000100 MACRAW  467F 20   06                 bra    07f                     * dgram  4681 C6   02       21        ldb    #%00000010 UDP  4683 20   02                 bra    07f                     * TCP socket  4685 C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  4687 BD   4E16     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *  468A C6   01                 ldb    #WCOPEN   open the device  468C E7   44                 stb    wzcmnd,u  copy command  468E BD   4E34               jsr    PSRCR                     *                     * interrupts not expected for 'open'                     *  4691 BD   4E68     21        jsr    GSRSR     get status  4694 E7   45                 stb    wzstat,u  4696 C1   00                 cmpb   #WSCLSD  4698 27   F7                 beq    21b       wait until updated                     *  469A 4F                      clra  469B C6   01                 ldb    #R_OPEN   response  469D 39            99        rts                     *  469E 86   01       skoper1   lda    #1        device not initialized  46A0 20   02                 bra    12f  46A2 86   02       skoper2   lda    #2        type error  46A4 C6   C0       12        ldb    #E_SOCKET  46A6 20   F5                 bra    99b                                          *                     * convert number in bit position                     * B = enum, B=bit                     *  46A8 34   10       num2bt    pshs   x  46AA 8E   46C3               ldx    #bittab  46AD 3A                      abxFIO Simulation Structure             00:30:57  Jan 07, 2024   Page   55wz socket interface routines                          46AE E6   84                 ldb    0,x  46B0 35   90                 puls   x,pc                                          *                     * bit to nummer, offset byt one, entry should NOT be 0                     *  46B2 34   10       bt2num    pshs   x  46B4 8E   46C3               ldx    #bittab  46B7 6F   E2                 clr    0,-s  46B9 E1   80       02        cmpb   0,x+  46BB 27   04                 beq    01f  46BD 6C   E4                 inc    0,s  46BF 20   F8                 bra    02b  46C1 35   94       01        puls   b,x,pc                                          * table  46C3 00            bittab    fcb    0  46C4 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  46C8 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                          ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               46CC  skclos    equ    *  46CC BD   463A               jsr    skfres  46CF C6   08                 ldb    #WCDISC  46D1 E7   44                 stb    wzcmnd,u  46D3 BD   4E34               jsr    PSRCR     send disconnect                     *  46D6 8D   0F                 bsr    skclin  46D8                         clrd  46D8 104F                    fdb    $104f                               endm  46DA ED   C8 22              std    wzfaml,u  46DD ED   C8 24              std    wztype,u  46E0 ED   C8 26              std    wzprot,u                     *  46E3 4F                      clra  46E4 C6   02                 ldb    #R_CLOSE  response  46E6 39                      rts                                          *                     * wzclin, close interal                     *  46E7 34   06       skclin    pshs   d  46E9 C6   10                 ldb    #WCCLOS   do close  46EB E7   44                 stb    wzcmnd,u  46ED BD   4E34               jsr    PSRCR                     *FIO Simulation Structure             00:30:57  Jan 07, 2024   Page   56wz socket interface routines                                             * erase registers in device                     *  46F0 CC   0000               ldd    #0  46F3 BD   4E86               jsr    PSRPORT   source port                     *  46F6 A6   42                 lda    wzfsta,u  46F8 84   F9                 anda   #!(WZSKIO+WZSKIS) reset io mode and is sending  46FA A7   42                 sta    wzfsta,u  46FC CC   0000               ldd    #0  46FF ED   48                 std    wzxfer,u  clear remaining size                     *  4701 BD   4E68     91        jsr    GSRSR  4704 E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  4706 CC   0000               ldd    #0  4709 ED   C8 10              std    wzsprt,u  erase old info  470C ED   C8 14              std    wzipad,u  470F ED   C8 16              std    wzipad+2,u  4712 ED   C8 12              std    wzdprt,u  4715 E7   43                 stb    wzflg,u   clear flags                     *  4717 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               4719  skconn    equ    *  4719 BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  471C BD   462E               jsr    wzdevt  471F 27   06                 beq    01f >4721 BD   46CC               jsr    skclos    NO, don't start >4724 16   007A     02        lbra   skcner4  4727 BD   4641     01        jsr    skctcp    not in tcp, illegal  472A 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  472C BD   4E68     11        jsr    GSRSR     status  472F E7   45                 stb    wzstat,u  check if properly setup  4731 C1   13                 cmpb   #WSINIT   SHOULD BE >4733 1026 005F               lbne   skcner6                     *                     * check the info from the connect call                     *  4737 EC   C8 14              ldd    wzipad,u  check if dest IP == nullFIO Simulation Structure             00:30:57  Jan 07, 2024   Page   57wz socket interface routines                          473A                         ordx   wzipad+2,IU  473A 10AA                    fdb    $10aa  473C                         doindx wzipad+2,IU  473C C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  473E 27   65                 beq    skcner1   IP address == NULL                     * IP address = 0000  4740 EC   C8 14              ldd    wzipad,u  or FFFFFFFF  4743                         incd  4743 104C                    fdb    $104c                               endm  4745 26   07                 bne    01f  4747 EC   C8 16              ldd    wzipad+2,u  474A                         incd  474A 104C                    fdb    $104c                               endm  474C 27   57                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  474E EC   C8 12    01        ldd    wzdprt,u  check destination port  4751 27   4A                 beq    skcner5   is not set, error                     *  4753 BD   4F10               jsr    PSRDPOR   set destination port  4756 31   C8 14              leay   wzipad,u  load socket  4759 BD   4EEA               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  475C BD   461C               jsr    sknewp    get new  475F ED   C8 10              std    wzsprt,u  tell us what you took  4762 BD   4E86               jsr    PSRPORT   source port                     *                     * do the CONNECT here                     *  4765 C6   04                 ldb    #WCCONN  4767 E7   44                 stb    wzcmnd,u  4769 BD   4E34               jsr    PSRCR     do connect                     *                     *                     *  476C BD   463A     conlb1    jsr    skfres  476F BD   4E68               jsr    GSRSR     update status  4772 E7   45                 stb    wzstat,u  4774 C1   17                 cmpb   #WSESTB  4776 27   0A                 beq    90f  4778 C1   00                 cmpb   #WSCLSD  477A 27   16                 beq    skcner2  477C 108E 476C               ldy    #conlb1  4780 20   04                 bra    polext                     *FIO Simulation Structure             00:30:58  Jan 07, 2024   Page   58wz socket interface routines                          4782 4F            90        clra  4783 C6   08                 ldb    #R_CONNECT  4785 39            99        rts                                          *                     * polexit, Y=where to return                     *  4786 10AF 0F       polext    sty    tsagin,x  here to restart  4789 C6   BA                 ldb    #POLPRI  478B E7   05                 stb    tsprir,x  478D 108E FFFF               ldy    #$ffFF  4791 39                      rts                       4792 C6   0C       skcner2   ldb    #R_DISCON  4794 20   EF                 bra    99b                       4796 BD   46E7     skcner6   jsr    skclin    reset open  4799 86   0F                 lda    #15       not properly setup  479B 20   0E                 bra    09f  479D 86   0E       skcner5   lda    #14       destination port not set  479F 20   0A                 bra    09f  47A1 86   0A       skcner4   lda    #10       device not initialized  47A3 20   06                 bra    09f  47A5 86   0B       skcner1   lda    #11       IP address invalid  47A7 20   02                 bra    09f  47A9 86   0D       skcner3   lda    #13  47AB C6   C0       09        ldb    #E_SOCKET  47AD 20   D6                 bra    99b                                          ***************************************************************                     *                     * bind request                     * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structure                     *               47AF  skbind    equ    *  47AF BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  47B2 BD   462E               jsr    wzdevt  47B5 1026 00E7               lbne   rdrqer1  47B9 BD   4641               jsr    skctcp    check TCP  47BC 27   12                 beq    01f  47BE BD   464A               jsr    skcudp    check UDP >47C1 1026 FFD1               lbne   skcner6                     *                     * go on , the bind() call sets wzipad and wzsprt, this is for                     * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *FIO Simulation Structure             00:30:58  Jan 07, 2024   Page   59wz socket interface routines                                             *  47C5 BD   4E68               jsr    GSRSR     status  47C8 E7   45                 stb    wzstat,u  47CA C1   22                 cmpb   #WSUDP    check  47CC 27   0D                 beq    03f  47CE 20   07                 bra    04f                       47D0 BD   4E68     01        jsr    GSRSR     status  47D3 E7   45                 stb    wzstat,u  47D5 C1   13                 cmpb   #WSINIT   should be >47D7 1026 FFBB     04        lbne   skcner6                     *                     * set the network connection data                     *  47DB BD   461C     03        jsr    sknewp  47DE ED   C8 12              std    wzdprt,u  47E1 BD   4F10               jsr    PSRDPOR   destination port  47E4 EC   C8 10              ldd    wzsprt,u  47E7 BD   4E86               jsr    PSRPORT   source port                     *  47EA 31   C8 14              leay   wzipad,u  47ED BD   4EEA               jsr    PSRDIP    source IP                     *  47F0 4F                      clra  47F1 C6   09                 ldb    #R_BIND  47F3 39                      rts                     *                                          ***************************************************************                     *                     * listen request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               47F4  sklist    equ    *  47F4 BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  47F7 BD   462E               jsr    wzdevt  47FA 1026 00A2     02        lbne   rdrqer1  47FE BD   4641               jsr    skctcp  4801 26   F7                 bne    02b                     *                     * go on                     *                     *  4803 BD   4E68               jsr    GSRSR     status  4806 E7   45                 stb    wzstat,u                     *  4808 C1   00                 cmpb   #WSCLSD   closed?FIO Simulation Structure             00:30:58  Jan 07, 2024   Page   60wz socket interface routines                          480A 27   0F                 beq    80f  480C C1   13                 cmpb   #WSINIT   opened  480E 26   0F                 bne    90f                     *  4810 C6   02                 ldb    #WCLIST  4812 E7   44                 stb    wzcmnd,u  4814 BD   4E34               jsr    PSRCR                     *  4817 4F                      clra  4818 C6   0A                 ldb    #R_LISTEN  481A 39                      rts                                          *  481B 4F            80        clra  481C C6   02                 ldb    #R_CLOSE  481E 39                      rts                     *  481F 108E 47F4     90        ldy    #sklist  4823 7E   4786               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               4826  skacpt    equ    *  4826 BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  4829 BD   462E               jsr    wzdevt >482C 1026 0070     02        lbne   rdrqer1  4830 BD   4641               jsr    skctcp  4833 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  4835 BD   4E68               jsr    GSRSR     status  4838 E7   45                 stb    wzstat,u  483A C1   17                 cmpb   #WSESTB   connected  483C 26   10                 bne    01f  483E BD   4F01               jsr    GSRDPOR   fill in peer port  4841 ED   C8 12              std    wzdprt,u  4844 31   C8 14              leay   wzipad,u  4847 BD   4ED3               jsr    GSRDIP                     *  484A 4F                      clra  484B C6   0B                 ldb    #R_ACCEPT  484D 39                      rts                     *FIO Simulation Structure             00:30:59  Jan 07, 2024   Page   61wz socket interface routines                          484E C1   00       01        cmpb   #WSCLSD  4850 26   04                 bne    02f  4852 4F                      clra  4853 C6   02                 ldb    #R_CLOSE  4855 39                      rts                     *  4856 108E 4826     02        ldy    #skacpt  485A 7E   4786               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               485D  skreqrd   equ    *  485D BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  4860 BD   462E               jsr    wzdevt >4863 1026 0039     02        lbne   rdrqer1  4867 BD   4641               jsr    skctcp    check TCP  486A 26   F7                 bne    02b                     *                     * go on                     *                     *  486C BD   4E68               jsr    GSRSR  486F E7   45                 stb    wzstat,u  update status  4871 BD   5001               jsr    GSRRXRS   data available?  4874 ED   48                 std    wzxfer,u  4876 26   20                 bne    70f                     *  4878 A6   C8 24              lda    wztype,u  check flags  487B 85   01                 bita   #WFNBLK   non block  487D 26   15                 bne    75f                     *  487F E6   45                 ldb    wzstat,u  4881 C1   17       17        cmpb   #WSESTB   still active  4883 27   08                 beq    20f                       4885 C1   1C                 cmpb   #WSCLWT  4887 27   13                 beq    60f  4889 C1   00                 cmpb   #WSCLSD  488B 27   0F                 beq    60f                     *  488D 108E 485D     20        ldy    #skreqrd  4891 7E   4786               jmp    polext                     FIO Simulation Structure             00:30:59  Jan 07, 2024   Page   62wz socket interface routines                                             *************************  4894 4F            75        clra  4895 C6   15                 ldb    #R_RQRDNB tell no data  4897 39                      rts                                          * data present  4898 4F            70        clra  4899 C6   05                 ldb    #R_RQRD  489B 39                      rts                                          * close socket and return  489C 4F            60        clra  489D C6   02                 ldb    #R_CLOSE  489F 39                      rts                                            48A0 86   82       rdrqer1   lda    #130  48A2 C6   C0                 ldb    #E_SOCKET  48A4 39                      rts                                          ***************************************************************                     *                     * get the data  U=wzsock                     *               48A5  skrecv    equ    *  48A5 BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  48A8 BD   462E               jsr    wzdevt >48AB 1026 FFF1               lbne   rdrqer1  48AF BD   4641     02        jsr    skctcp  48B2 26   FB                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  48B4 BD   5001               jsr    GSRRXRS   received size                     * D total aviable data  48B7 BD   50D1               jsr    RDSK2FB   transfer datat to fifo  48BA ED   48                 std    wzxfer,u  save it  48BC C6   40                 ldb    #WCRECV  48BE E7   44                 stb    wzcmnd,u  48C0 BD   4E34               jsr    PSRCR     tell sender we took it                       48C3 C6   06                 ldb    #R_READ   tell data in fifo  48C5 4F                      clra  48C6 39                      rts                                          ***************************************************************                     *FIO Simulation Structure             00:30:59  Jan 07, 2024   Page   63wz socket interface routines                                             * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               48C7  skreqwr   equ    *  48C7 BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  48CA BD   462E               jsr    wzdevt >48CD 1026 FFCF     02        lbne   rdrqer1  48D1 BD   4641               jsr    skctcp  48D4 26   F7                 bne    02b                     *                     * go on                     *                     *  48D6 BD   4E68               jsr    GSRSR  48D9 E7   45                 stb    wzstat,u  update status  48DB BD   4FB5               jsr    GSRTXFR   free size (remaining)  48DE 10A3 4A                 cmpd   wzrqln,u  would it fit  48E1 24   15                 bhs    70f                     *  48E3 E6   45       10        ldb    wzstat,u  48E5 C1   17                 cmpb   #WSESTB  48E7 27   18                 beq    20f  48E9 C1   1C                 cmpb   #WSCLWT  48EB 27   11                 beq    60f  48ED C1   00                 cmpb   #WSCLSD  48EF 26   10                 bne    20f  48F1 CC   0000               ldd    #0  48F4 ED   48                 std    wzxfer,u  48F6 20   06                 bra    60f                     * data space  48F8 4F            70        clra  48F9 C6   03                 ldb    #R_RQWR  48FB 39                      rts                                          * data space exhausted, would block  48FC 4F            72        clra                     **        ldb     #R_RQWRWB  48FD 39                      rts                                          * close socket and return  48FE C6   02       60        ldb    #R_CLOSE  4900 39                      rts                                          *  4901 108E 48C7     20        ldy    #skreqwr  4905 7E   4786               jmp    polext                     FIO Simulation Structure             00:31:00  Jan 07, 2024   Page   64wz socket interface routines                                             ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               4908  sksend    equ    *  4908 BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  490B BD   462E               jsr    wzdevt >490E 1026 FF8E     02        lbne   rdrqer1  4912 BD   4641               jsr    skctcp  4915 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  4917 BD   4FB5               jsr    GSRTXFR   free size (remaining)                     * D = total available space  491A BD   5120               jsr    WRFB2SK   transfer from fifo to socket  491D ED   48                 std    wzxfer,u  save it  491F C6   20                 ldb    #WCSEND  4921 E7   44                 stb    wzcmnd,u  4923 BD   4E34               jsr    PSRCR     tell sender it is coming                       4926 C6   04                 ldb    #R_WRITE  tell data in fifo  4928 4F                      clra  4929 39                      rts                                          ***************************************************************                     * skurrdf, request readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               492A  skurrdf   equ    *  492A BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  492D BD   462E               jsr    wzdevt  4930 1026 FF6C     02        lbne   rdrqer1  4934 BD   464A               jsr    skcudp  4937 26   F7                 bne    02b                     *                     * go on                     *FIO Simulation Structure             00:31:00  Jan 07, 2024   Page   65wz socket interface routines                                             *  4939 EC   C8 20              ldd    wzurms,u  check remaining size  493C 26   43                 bne    84f                     *                     * no  packet data present, wait for it                     *  493E BD   4E68               jsr    GSRSR  4941 E7   45                 stb    wzstat,u  update status  4943 BD   5001               jsr    GSRRXRS   data available?  4946 ED   7E                 std    -2,s      test D  4948 26   15                 bne    22f       keep waiting                     * no data yet, check socket state  494A E6   45                 ldb    wzstat,u  494C C1   22                 cmpb   #WSUDP    still active  494E 27   08                 beq    20f                       4950 C1   1C                 cmpb   #WSCLWT  4952 27   31                 beq    60f  4954 C1   00                 cmpb   #WSCLSD  4956 27   2D                 beq    60f                     *       ldd     wzsprt,u                     *       jsr     PSRPORT         set source port                     *  4958 108E 492A     20        ldy    #skurrdf  495C 7E   4786               jmp    polext                     *                     * first data present, set wzuipa, wzuprt, wzurms                     *  495F 31   C8 1A    22        leay   wzuipa,u  4962 CC   0008               ldd    #8        size of header  4965 BD   4B93               jsr    bmread    copy data                     *                     * move pointer                     *  4968 BD   5018               jsr    GSRRXRP  496B C3   0008               addd   #8  496E BD   5027               jsr    PSRRXRP   update pointer  4971 C6   40                 ldb    #WCRECV  4973 E7   44                 stb    wzcmnd,u  process move  4975 BD   4E34               jsr    PSRCR                     *  4978 EC   C8 20              ldd    wzurms,u  497B 1083 05C0               cmpd   #MAX_UDP  max size  497F 22   08                 bhi    78f                     *  4981 4F            84        clra  4982 C6   21                 ldb    #R_RDFRM  4984 39                      rts                                          * close socket and return  4985 4F            60        clra  4986 C6   02                 ldb    #R_CLOSEFIO Simulation Structure             00:31:00  Jan 07, 2024   Page   66wz socket interface routines                          4988 39                      rts                                          *  4989 BD   46E7     78        jsr    skclin    close  498C C6   C0                 ldb    #E_SOCKET  498E 39                      rts                                          ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               498F  skurrd    equ    *  498F BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  4992 BD   462E               jsr    wzdevt  4995 1026 FF07     02        lbne   rdrqer1  4999 BD   464A               jsr    skcudp  499C 26   F7                 bne    02b                     *                     * go on                     *                     *                     * transfer at most fio_fsz bytes  499E EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available data  49A1 BD   50D1               jsr    RDSK2FB   transfer data  49A4 34   06                 pshs   d         xferred count  49A6 EC   C8 20              ldd    wzurms,u  update  49A9 A3   E1                 subd   0,s++  49AB ED   C8 20              std    wzurms,u  new remaining                     *  49AE C6   40       01        ldb    #WCRECV  49B0 E7   44                 stb    wzcmnd,u  set processed  49B2 BD   4E34               jsr    PSRCR                     *  49B5 4F                      clra  49B6 C6   22                 ldb    #R_RRDFD  49B8 39                      rts                                                               ***************************************************************                     * skurwt,  request sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *FIO Simulation Structure             00:31:01  Jan 07, 2024   Page   67wz socket interface routines                                       49B9  skurwt    equ    *  49B9 BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  49BC BD   462E               jsr    wzdevt  49BF 1026 FEDD     02        lbne   rdrqer1  49C3 BD   464A               jsr    skcudp  49C6 26   F7                 bne    02b                     *                     * go on                     *                     *  49C8 EC   C8 12              ldd    wzdprt,u  check illegal port >49CB 1027 0077               lbeq   78f                     *  49CF EC   C8 14              ldd    wzipad,u  49D2                         ordx   wzipad+2,IU  49D2 10AA                    fdb    $10aa  49D4                         doindx wzipad+2,IU  49D4 C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >49D6 1027 006C               lbeq   78f                     * set network registers  49DA EC   C8 12              ldd    wzdprt,u  49DD BD   4F10               jsr    PSRDPOR                       49E0 31   C8 14              leay   wzipad,u  49E3 BD   4EEA               jsr    PSRDIP  49E6 EC   C8 10              ldd    wzsprt,u  49E9 26   11                 bne    04f                     *  49EB EC   C8 10              ldd    wzsprt,u  already set?  49EE 26   09                 bne    16f  49F0 BD   461C               jsr    sknewp    get new source port  49F3 ED   C8 10              std    wzsprt,u  49F6 ED   C8 1E              std    wzuprt,u  set also return port  49F9 BD   4E86     16        jsr    PSRPORT                     *  49FC 108E 4A03     04        ldy    #skuwr2   do remainder  4A00 7E   4786               jmp    polext                                          *                     * after intial setup. loop here                     *               4A03  skusnm    equ    *  4A03 BD   463A     skuwr2    jsr    skfres    set socket base  4A06 BD   462E               jsr    wzdevt    devie active >4A09 1026 FFB2               lbne   02b       no  4A0D BD   464A               jsr    skcudp    check open method  4A10 26   AD                 bne    02bFIO Simulation Structure             00:31:01  Jan 07, 2024   Page   68wz socket interface routines                                             *  4A12 BD   4E68               jsr    GSRSR  4A15 E7   45                 stb    wzstat,u  update status  4A17 BD   4FB5               jsr    GSRTXFR   free size  4A1A 10A3 C8 20              cmpd   wzurms,u  4A1E 24   15                 bhs    10f                     * no space yet  4A20 E6   45                 ldb    wzstat,u  4A22 C1   22                 cmpb   #WSUDP  4A24 27   08                 beq    20f                       4A26 C1   1C                 cmpb   #WSCLWT   is closing  4A28 27   18                 beq    60f  4A2A C1   00                 cmpb   #WSCLSD   closed  4A2C 27   14                 beq    60f                     *  4A2E 108E 49B9     20        ldy    #skurwt  4A32 7E   4786               jmp    polext    keep polling                     *  4A35 EC   C8 20    10        ldd    wzurms,u  4A38 1083 05C0               cmpd   #MAX_UDP  too big  4A3C 22   08                 bhi    78f                     *  4A3E 4F                      clra  4A3F C6   23                 ldb    #R_RSNDTO  4A41 39                      rts                       4A42 4F            60        clra  4A43 C6   02                 ldb    #R_CLOSE  4A45 39                      rts                       4A46 BD   46E7     78        jsr    skclin    close  4A49 C6   C0                 ldb    #E_SOCKET  4A4B 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               4A4C  skusnt    equ    *  4A4C BD   463A               jsr    skfres                     *                     * is the DEVICE (still) active                     *  4A4F BD   462E               jsr    wzdevt  4A52 1026 FE4A     02        lbne   rdrqer1  4A56 BD   464A               jsr    skcudp  4A59 26   F7                 bne    02bFIO Simulation Structure             00:31:01  Jan 07, 2024   Page   69wz socket interface routines                                             *                     * go on                     *                     * transfer fifo to socket data register  4A5B EC   C8 20              ldd    wzurms,u  total data                     *  4A5E BD   5120               jsr    WRFB2SK   fifo to socket  4A61 34   06                 pshs   d  4A63 EC   C8 20              ldd    wzurms,u  all loaded  4A66 A3   E1                 subd   0,s++  4A68 ED   C8 20              std    wzurms,u  4A6B 26   0B                 bne    01f                       4A6D C6   20                 ldb    #WCSEND  4A6F E7   44                 stb    wzcmnd,u  4A71 BD   4E34               jsr    PSRCR  4A74 4F                      clra  4A75 C6   24                 ldb    #R_WSNDTO data taken  4A77 39                      rts                       4A78 4F            01        clra  4A79 C6   25                 ldb    #R_SNDTOM ask for more  4A7B 39                      rts                                          ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)                     *               4A7C  skspcl    equ    *                     *  4A7C 34   10                 pshs   x  4A7E E6   0C                 ldb    tstval,x  get index  4A80 C1   04                 cmpb   #MAXTBL  4A82 22   18                 bhi    01f       illegal  4A84 58                      aslb  4A85 8E   4AA3               ldx    #functb  4A88 10AE 85                 ldy    b,x       get special function  4A8B 27   0F                 beq    01f       not valid  4A8D 35   10                 puls   x                     *  4A8F AD   A4                 jsr    0,y       do function  4A91 26   05                 bne    90f                     *  4A93 4F                      clra  4A94 C6   0F                 ldb    #R_SPCL  4A96 20   0A                 bra    99f                     *  4A98 86   A2       90        lda    #162  4A9A 20   04                 bra    02f                     *FIO Simulation Structure             00:31:02  Jan 07, 2024   Page   70wz socket interface routines                          4A9C 35   10       01        puls   x  4A9E 86   A1                 lda    #161  4AA0               02  4AA0 C6   C0                 ldb    #E_SOCKET                     *  4AA2 39            99        rts                       4AA3 4AAB          functb    fdb    wzdev     set device settings  4AA5 4AAB                    fdb    wzdev  4AA7 4AD5                    fdb    showrg  4AA9 0000                    fdb    0               0004  MAXTBL    equ    (*-functb)/2                                                               *                     * X hold the task table                     * U holds the special sock address                     *  4AAB               wzdev  4AAB C6   08                 ldb    #8  4AAD                         trfr   B,E  4AAD 1F                      fcb    $1f  4AAE 9E                      fcb    B<<4|E                               endm  4AAF DE   1A                 ldu    fifo_us1  device info area  4AB1 31   C4                 leay   0,u       myip  4AB3 BD   4CCB               jsr    PCRSIP    source IP  4AB6 31   44                 leay   4,u  4AB8 BD   4C5F               jsr    PCRSNM    subnet mask  4ABB 31   48                 leay   8,u  4ABD BD   4C31               jsr    PCRGA     gateway IP  4AC0 31   4C                 leay   12,u  4AC2 BD   4C95               jsr    PCRSHA    hardware address  4AC5 A6   C8 12              lda    18,u      ON/OFF  4AC8 27   04                 beq    01f  4ACA C6   F8                 ldb    #%11111000 all on  4ACC 20   02                 bra    02f  4ACE C6   78       01        ldb    #%01111000 all off  4AD0 BD   4DE9     02        jsr    PCRPHY  4AD3 4F                      clra  4AD4 39                      rts                                          *                     *                     *  4AD5               showrg  4AD5 C6   08                 ldb    #8  4AD7                         trfr   B,E       select first socket  4AD7 1F                      fcb    $1f  4AD8 9E                      fcb    B<<4|E                               endm  4AD9 DE   1A                 ldu    fifo_us1FIO Simulation Structure             00:31:02  Jan 07, 2024   Page   71wz socket interface routines                          4ADB 33   C8 20              leau   32,u      skip network data area  4ADE BD   4E07               jsr    GSRMR  4AE1 E7   C0                 stb    0,u+  4AE3 BD   4E68               jsr    GSRSR  4AE6 E7   C0                 stb    0,u+  4AE8 BD   4F79               jsr    GSRRBFS  4AEB E7   C0                 stb    0,u+                       4AED C6   3D                 ldb    #'=  4AEF E7   C0                 stb    0,u+                       4AF1 BD   4E77               jsr    GSRPORT  4AF4 ED   C1                 std    0,u++  4AF6 BD   4F01               jsr    GSRDPOR  4AF9 ED   C1                 std    0,u++                       4AFB C6   23                 ldb    #'#  4AFD E7   C0                 stb    0,u+                       4AFF 31   C4                 leay   0,u  4B01 BD   4E95               jsr    GSRDHAR  4B04 33   46                 leau   6,u                       4B06 C6   23                 ldb    #'#  4B08 E7   C0                 stb    0,u+                       4B0A 31   C4                 leay   0,u  4B0C BD   4ED3               jsr    GSRDIP  4B0F 33   44                 leau   4,u                       4B11 C6   3D                 ldb    #'=  4B13 E7   C0                 stb    0,u+                       4B15 BD   4F1F               jsr    GSRMSS  4B18 ED   C1                 std    0,u++  4B1A BD   5001               jsr    GSRRXRS  4B1D ED   C1                 std    0,u++  4B1F BD   5018               jsr    GSRRXRP  4B22 ED   C1                 std    0,u++  4B24 BD   5036               jsr    GSRRXWP  4B27 ED   C1                 std    0,u++  4B29 BD   506B               jsr    GSRFRAG  4B2C ED   C1                 std    0,u++                       4B2E C6   23                 ldb    #'#  4B30 E7   C4                 stb    0,u  4B32 4F                      clra                       4B33 39                      rts                                                               * X hold the task tableFIO Simulation Structure             00:31:02  Jan 07, 2024   Page   72wz socket interface routines                                             * U holds the sock address  4B34               skintrp  4B34               skdisc  4B34               sksmac  4B34               skskep  4B34 86   FF                 lda    #255  4B36 A7   47                 sta    wzerr,u  4B38 C6   C0                 ldb    #E_SOCKET  4B3A 39                      rts                                    4B3B  oldorg    set    *                     *                     * hardware register orgaization                     *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register access  0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)  0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       4B3B                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *               4B3B  spinit    equ    *  4B3B 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  4B3D B7   8080               sta    SPIBASE+spicmd  4B40 39                      rts                                          *                     * setup inital port for SPI accessFIO Simulation Structure             00:31:03  Jan 07, 2024   Page   73wzspi, basic spi routines                                                *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= read                     * X,Y untouched                     *               4B41  spistr2   equ    *  4B41 CE   8080               ldu    #SPIBASE  SPI base TODO  4B44                         trfr   F,B  4B44 1F                      fcb    $1f  4B45 F9                      fcb    F<<4|B                               endm  4B46 5D                      tstb             register pointer  4B47 27   09                 beq    01f       OK, valid  4B49 34   04                 pshs   b  4B4B C4   03                 andb   #RSVREG   reserved loctation  4B4D 5D                      tstb             xxx10xxx  is invalid!  4B4E 35   04                 puls   b  4B50 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  4B52 4D            01        tsta             cmd flag  4B53 27   04                 beq    04f  4B55 1A   01                 sec              write   100  4B57 20   02                 bra    05f  4B59 1C   FE       04        clc              read    000                     *  4B5B 59            05        rolb             set READ/WRITE bit  [2...0]  4B5C 58                      lslb             set variable length data [00]  4B5D 58                      lslb                     *                     * here the actual SPI action starts                     *  4B5E                         seti   disable   interrupts  4B5E 1A   50                 orcc   #FF|IF                               endm  4B60 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  4B61 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  4B63 A7   C4                 sta    spicmd,u  4B65 AF   44                 stx    hibyta,u  and shift out  4B67 E7   44                 stb    hibyta,u  and shift out  4B69 1A   04                 sez  4B6B 39                      rts  4B6C 1C   FB       09        clz  4B6E 39                      rts                                          *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPI                     * return B=value, D,X,Y,U preserved                     *FIO Simulation Structure             00:31:03  Jan 07, 2024   Page   74wzspi, basic spi routines                                          4B6F  byterd    equ    *  4B6F 34   47                 pshs   cc,d,u  4B71 4F                      clra  4B72 8D   CD                 bsr    spistr2 >4B74 1026 007E               lbne   09f  4B78 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  4B7A E6   45                 ldb    lobyta,u  read byte  4B7C 4F                      clra  4B7D ED   61                 std    1,s  4B7F 20   69                 bra    sprend                                          *                     * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               4B81  wordrd    equ    *  4B81 34   47                 pshs   cc,d,u  4B83 4F                      clra >4B84 BD   4B41               jsr    spistr2  4B87 26   6D                 bne    09f  4B89 E6   44                 ldb    hibyta,u  extra clocks for first data                     *  4B8B A6   45                 lda    lobyta,u  read byte  4B8D E6   45                 ldb    lobyta,u  read byte  4B8F ED   61                 std    1,s  4B91 20   57                 bra    sprend                                          *                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               4B93  bmread    equ    *  4B93 34   77                 pshs   cc,d,x,y,u  4B95 4F                      clra  4B96 BD   5018               jsr    GSRRXRP  4B99 1F   01                 tfr    d,x  4B9B CE   8080               ldu    #SPIBASE  4B9E 34   40                 pshs   u  4BA0 1A   50                 orcc   #$50  4BA2 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT  4BA4 A7   C4                 sta    spicmd,u  4BA6 AF   44                 stx    hibyta,u  start address  4BA8 BD   50C2               jsr    tsk2rx  4BAB E7   44                 stb    hibyta,u  4BAD EC   63                 ldd    3,s       old D  4BAF                         trfr   D,W       count  4BAF 1F                      fcb    $1fFIO Simulation Structure             00:31:03  Jan 07, 2024   Page   75wzspi, basic spi routines                             4BB0 06                      fcb    D<<4|W                               endm  4BB1 1F   12                 tfr    x,y       mem pointer  4BB3 10AE 67                 ldy    7,s       old Y  4BB6 E7   44                 stb    hibyta,u  shift out  4BB8 33   45                 leau   lobyta,u  4BBA                         tfm4   U,Y  4BBA 113B                    fdb    $113b  4BBC 32                      fcb    U<<4|Y                               endm  4BBD 35   40                 puls   u         old U  4BBF 86   25                 lda    #SPI_RST+SPI_SR_+SPI_CR_  4BC1 A7   C4                 sta    spicmd,u                     * X = old read pointer, 0,s byte wount  4BC3 1F   10                 tfr    x,d  4BC5 E3   61                 addd   1,s       move pointer  4BC7 BD   5027               jsr    PSRRXRP   update pointer  4BCA 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preserved                     *               4BCC  bytewr    equ    *  4BCC 34   47                 pshs   cc,d,u  4BCE 86   01                 lda    #1  4BD0 BD   4B41               jsr    spistr2  4BD3 26   21                 bne    09f                     *  4BD5 A6   62                 lda    2,s  4BD7 A7   44                 sta    hibyta,u  4BD9 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               4BDB  wordwr    equ    *  4BDB 34   47                 pshs   cc,d,u  4BDD 86   01                 lda    #1  4BDF BD   4B41               jsr    spistr2  4BE2 26   12                 bne    09f                     *  4BE4 EC   61                 ldd    1,s  4BE6 A7   44                 sta    hibyta,u  4BE8 E7   44                 stb    hibyta,u                     *                     * common exit from SPI action                     *  4BEA 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_FIO Simulation Structure             00:31:03  Jan 07, 2024   Page   76wzspi, basic spi routines                                                *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  4BEC A7   C4                 sta    spicmd,u  4BEE A6   E4                 lda    0,s       sez  4BF0 8A   04                 ora    #4  4BF2 A7   E4       02        sta    0,s  4BF4 35   C7                 puls   cc,d,u,pc                     *  4BF6 A6   E4       09        lda    0,s       clz  4BF8 84   FB                 anda   #255-4  4BFA 20   F6                 bra    02b                     FIO Simulation Structure             00:31:04  Jan 07, 2024   Page   77wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  4BFC 34   56       GCRMR     pshs   d,x,u  4BFE 5F                      clrb  4BFF                         trfr   B,F  4BFF 1F                      fcb    $1f  4C00 9F                      fcb    B<<4|FFIO Simulation Structure             00:31:04  Jan 07, 2024   Page   78wzspi, basic spi routines                                                          endm  4C01 8E   0000               ldx    #WZMR  4C04 BD   4B6F               jsr    byterd  4C07 ED   E4                 std    0,s  4C09 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  4C0B 34   16       PCRMR     pshs   d,x  4C0D 5F                      clrb  4C0E                         trfr   B,F  4C0E 1F                      fcb    $1f  4C0F 9F                      fcb    B<<4|F                               endm  4C10 8E   0000               ldx    #WZMR  4C13 EC   E4                 ldd    0,s >4C15 BD   4BCC               jsr    bytewr  4C18 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  4C1A 34   16       GCRGA     pshs   d,x  4C1C 5F                      clrb  4C1D                         trfr   B,F  4C1D 1F                      fcb    $1f  4C1E 9F                      fcb    B<<4|F                               endm  4C1F 8E   0001               ldx    #WZGAR0  4C22 BD   4B81               jsr    wordrd  4C25 ED   A4                 std    0,y  4C27 8E   0003               ldx    #WZGAR2  4C2A BD   4B81               jsr    wordrd  4C2D ED   22                 std    2,y  4C2F 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  4C31 34   16       PCRGA     pshs   d,x  4C33 5F                      clrb  4C34                         trfr   B,F  4C34 1F                      fcb    $1f  4C35 9F                      fcb    B<<4|F                               endm  4C36 8E   0001               ldx    #WZGAR0  4C39 EC   A4                 ldd    0,y >4C3B BD   4BDB               jsr    wordwr  4C3E 8E   0003               ldx    #WZGAR2FIO Simulation Structure             00:31:04  Jan 07, 2024   Page   79wzspi, basic spi routines                             4C41 EC   22                 ldd    2,y >4C43 BD   4BDB               jsr    wordwr  4C46 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  4C48 34   16       GCRSNM    pshs   d,x  4C4A 5F                      clrb  4C4B                         trfr   B,F  4C4B 1F                      fcb    $1f  4C4C 9F                      fcb    B<<4|F                               endm  4C4D 8E   0005               ldx    #WZSUBR0  4C50 BD   4B81               jsr    wordrd  4C53 ED   A4                 std    0,y  4C55 8E   0007               ldx    #WZSUBR2  4C58 BD   4B81               jsr    wordrd  4C5B ED   22                 std    2,y  4C5D 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  4C5F 34   16       PCRSNM    pshs   d,x  4C61 5F                      clrb  4C62                         trfr   B,F  4C62 1F                      fcb    $1f  4C63 9F                      fcb    B<<4|F                               endm  4C64 8E   0005               ldx    #WZSUBR0  4C67 EC   A4                 ldd    0,y  4C69 BD   4BDB               jsr    wordwr  4C6C 8E   0007               ldx    #WZSUBR2  4C6F EC   22                 ldd    2,y  4C71 BD   4BDB               jsr    wordwr  4C74 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  4C76 34   16       GCRSHA    pshs   d,x  4C78 5F                      clrb  4C79                         trfr   B,F  4C79 1F                      fcb    $1f  4C7A 9F                      fcb    B<<4|F                               endm  4C7B 8E   0009               ldx    #WZSHAR0  4C7E BD   4B81               jsr    wordrdFIO Simulation Structure             00:31:05  Jan 07, 2024   Page   80wzspi, basic spi routines                             4C81 ED   A4                 std    0,y  4C83 8E   000B               ldx    #WZSHAR2  4C86 BD   4B81               jsr    wordrd  4C89 ED   22                 std    2,y  4C8B 8E   000D               ldx    #WZSHAR4  4C8E BD   4B81               jsr    wordrd  4C91 ED   24                 std    4,y  4C93 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  4C95 34   16       PCRSHA    pshs   d,x  4C97 5F                      clrb  4C98                         trfr   B,F  4C98 1F                      fcb    $1f  4C99 9F                      fcb    B<<4|F                               endm  4C9A 8E   0009               ldx    #WZSHAR0  4C9D EC   A4                 ldd    0,y  4C9F BD   4BDB               jsr    wordwr  4CA2 8E   000B               ldx    #WZSHAR2  4CA5 EC   22                 ldd    2,y  4CA7 BD   4BDB               jsr    wordwr  4CAA 8E   000D               ldx    #WZSHAR4  4CAD EC   24                 ldd    4,y  4CAF BD   4BDB               jsr    wordwr  4CB2 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  4CB4 34   16       GCRSIP    pshs   d,x  4CB6 5F                      clrb  4CB7                         trfr   B,F  4CB7 1F                      fcb    $1f  4CB8 9F                      fcb    B<<4|F                               endm  4CB9 8E   000F               ldx    #WZSIPR0  4CBC BD   4B81               jsr    wordrd  4CBF ED   A4                 std    0,y  4CC1 8E   0011               ldx    #WZSIPR2  4CC4 BD   4B81               jsr    wordrd  4CC7 ED   22                 std    2,y  4CC9 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             00:31:05  Jan 07, 2024   Page   81wzspi, basic spi routines                             4CCB 34   16       PCRSIP    pshs   d,x  4CCD 5F                      clrb  4CCE                         trfr   B,F  4CCE 1F                      fcb    $1f  4CCF 9F                      fcb    B<<4|F                               endm  4CD0 8E   000F               ldx    #WZSIPR0  4CD3 EC   A4                 ldd    0,y  4CD5 BD   4BDB               jsr    wordwr  4CD8 8E   0011               ldx    #WZSIPR2  4CDB EC   22                 ldd    2,y  4CDD BD   4BDB               jsr    wordwr  4CE0 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  4CE2 34   16       GCRILLT   pshs   d,x  4CE4 5F                      clrb  4CE5                         trfr   B,F  4CE5 1F                      fcb    $1f  4CE6 9F                      fcb    B<<4|F                               endm  4CE7 8E   0013               ldx    #WZILLT0  4CEA BD   4B81               jsr    wordrd  4CED ED   E4                 std    0,s  4CEF 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  4CF1 34   16       PCRILLT   pshs   d,x  4CF3 5F                      clrb  4CF4                         trfr   B,F  4CF4 1F                      fcb    $1f  4CF5 9F                      fcb    B<<4|F                               endm  4CF6 8E   0013               ldx    #WZILLT0  4CF9 EC   E4                 ldd    0,s  4CFB BD   4BDB               jsr    wordwr  4CFE 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  4D00 34   16       GCRIR     pshs   d,x  4D02 5F                      clrb  4D03                         trfr   B,F  4D03 1F                      fcb    $1f  4D04 9F                      fcb    B<<4|FFIO Simulation Structure             00:31:05  Jan 07, 2024   Page   82wzspi, basic spi routines                                                          endm  4D05 8E   0015               ldx    #WZIR  4D08 BD   4B6F               jsr    byterd  4D0B ED   E4                 std    0,s  4D0D 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  4D0F 34   16       PCRIR     pshs   d,x  4D11 5F                      clrb  4D12                         trfr   B,F  4D12 1F                      fcb    $1f  4D13 9F                      fcb    B<<4|F                               endm  4D14 8E   0015               ldx    #WZIR  4D17 EC   E4                 ldd    0,s  4D19 BD   4BCC               jsr    bytewr  4D1C 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  4D1E 34   16       GCRIMR    pshs   d,x  4D20 5F                      clrb  4D21                         trfr   B,F  4D21 1F                      fcb    $1f  4D22 9F                      fcb    B<<4|F                               endm  4D23 8E   0016               ldx    #WZIMR  4D26 BD   4B6F               jsr    byterd  4D29 ED   E4                 std    0,s  4D2B 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  4D2D 34   16       PCRIMR    pshs   d,x  4D2F 5F                      clrb  4D30                         trfr   B,F  4D30 1F                      fcb    $1f  4D31 9F                      fcb    B<<4|F                               endm  4D32 8E   0016               ldx    #WZIMR  4D35 EC   E4                 ldd    0,s  4D37 BD   4BCC               jsr    bytewr  4D3A 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             00:31:05  Jan 07, 2024   Page   83wzspi, basic spi routines                                                *  4D3C 34   16       GCRSIR    pshs   d,x  4D3E 5F                      clrb  4D3F                         trfr   B,F  4D3F 1F                      fcb    $1f  4D40 9F                      fcb    B<<4|F                               endm  4D41 8E   0017               ldx    #WZSIR  4D44 BD   4B6F               jsr    byterd  4D47 ED   E4                 std    0,s  4D49 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  4D4B 34   16       PCRSIR    pshs   d,x  4D4D 5F                      clrb  4D4E                         trfr   B,F  4D4E 1F                      fcb    $1f  4D4F 9F                      fcb    B<<4|F                               endm  4D50 8E   0017               ldx    #WZSIR  4D53 EC   E4                 ldd    0,s  4D55 BD   4BCC               jsr    bytewr  4D58 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  4D5A 34   16       GCRSIMR   pshs   d,x  4D5C 5F                      clrb  4D5D                         trfr   B,F  4D5D 1F                      fcb    $1f  4D5E 9F                      fcb    B<<4|F                               endm  4D5F 8E   0018               ldx    #WZSIMR  4D62 BD   4B6F               jsr    byterd  4D65 ED   E4                 std    0,s  4D67 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  4D69 34   16       PCRSIMR   pshs   d,x  4D6B 5F                      clrb  4D6C                         trfr   B,F  4D6C 1F                      fcb    $1f  4D6D 9F                      fcb    B<<4|F                               endm  4D6E 8E   0018               ldx    #WZSIMR  4D71 EC   E4                 ldd    0,sFIO Simulation Structure             00:31:06  Jan 07, 2024   Page   84wzspi, basic spi routines                             4D73 BD   4BCC               jsr    bytewr  4D76 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  4D78 34   16       GCRRTR    pshs   d,x  4D7A 5F                      clrb  4D7B                         trfr   B,F  4D7B 1F                      fcb    $1f  4D7C 9F                      fcb    B<<4|F                               endm  4D7D 8E   0019               ldx    #WZRTR0  4D80 BD   4B81               jsr    wordrd  4D83 ED   E4                 std    0,s  4D85 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  4D87 34   16       PCRRTR    pshs   d,x  4D89 5F                      clrb  4D8A                         trfr   B,F  4D8A 1F                      fcb    $1f  4D8B 9F                      fcb    B<<4|F                               endm  4D8C 8E   0019               ldx    #WZRTR0  4D8F EC   E4                 ldd    0,s  4D91 BD   4BDB               jsr    wordwr  4D94 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  4D96 34   16       GCRRCR    pshs   d,x  4D98 5F                      clrb  4D99                         trfr   B,F  4D99 1F                      fcb    $1f  4D9A 9F                      fcb    B<<4|F                               endm  4D9B 8E   001B               ldx    #WZRCR  4D9E BD   4B6F               jsr    byterd  4DA1 ED   E4                 std    0,s  4DA3 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  4DA5 34   16       PCRRCR    pshs   d,x  4DA7 5F                      clrbFIO Simulation Structure             00:31:06  Jan 07, 2024   Page   85wzspi, basic spi routines                             4DA8                         trfr   B,F  4DA8 1F                      fcb    $1f  4DA9 9F                      fcb    B<<4|F                               endm  4DAA 8E   001B               ldx    #WZRCR  4DAD EC   E4                 ldd    0,s  4DAF BD   4BCC               jsr    bytewr  4DB2 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  4DB4 34   16       GCRURP    pshs   d,x  4DB6 5F                      clrb  4DB7                         trfr   B,F  4DB7 1F                      fcb    $1f  4DB8 9F                      fcb    B<<4|F                               endm  4DB9 8E   002C               ldx    #WZUPRT0  4DBC BD   4B81               jsr    wordrd  4DBF ED   E4                 std    0,s  4DC1 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  4DC3 34   16       GCRUIP    pshs   d,x  4DC5 5F                      clrb  4DC6                         trfr   B,F  4DC6 1F                      fcb    $1f  4DC7 9F                      fcb    B<<4|F                               endm  4DC8 8E   0028               ldx    #WZUIPR0  4DCB BD   4B81               jsr    wordrd  4DCE ED   A4                 std    0,y  4DD0 8E   002A               ldx    #WZUIPR2  4DD3 BD   4B81               jsr    wordrd  4DD6 ED   22                 std    2,y  4DD8 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  4DDA 34   56       GCRPHY    pshs   d,x,u  4DDC 8E   002E               ldx    #WZPHY  4DDF 5F                      clrb  4DE0                         trfr   B,F  4DE0 1F                      fcb    $1f  4DE1 9F                      fcb    B<<4|FFIO Simulation Structure             00:31:06  Jan 07, 2024   Page   86wzspi, basic spi routines                                                          endm  4DE2 BD   4B6F               jsr    byterd  4DE5 ED   E4                 std    0,s  4DE7 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  4DE9 34   56       PCRPHY    pshs   d,x,u  4DEB 8E   002E               ldx    #WZPHY  4DEE 5F                      clrb  4DEF                         trfr   B,F  4DEF 1F                      fcb    $1f  4DF0 9F                      fcb    B<<4|F                               endm  4DF1 EC   E4                 ldd    0,s  4DF3 BD   4BCC               jsr    bytewr  4DF6 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  4DF8 34   56       GCRVERS   pshs   d,x,u  4DFA 8E   0039               ldx    #WZVERS  4DFD 5F                      clrb  4DFE                         trfr   B,F  4DFE 1F                      fcb    $1f  4DFF 9F                      fcb    B<<4|F                               endm  4E00 BD   4B6F               jsr    byterd  4E03 ED   E4                 std    0,s  4E05 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             00:31:07  Jan 07, 2024   Page   87wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  4E07 34   16       GSRMR     psh    d,x  4E09 BD   50A7               jsr    tsk2rg  4E0C 8E   0000               ldx    #SNMR  4E0F BD   4B6F               jsr    byterd  4E12 ED   E4                 std    0,s  4E14 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  4E16 34   16       PSRMR     pshs   d,x  4E18 BD   50A7               jsr    tsk2rg  4E1B 8E   0000               ldx    #SNMRFIO Simulation Structure             00:31:07  Jan 07, 2024   Page   88wzspi, basic spi routines                             4E1E EC   E4                 ldd    0,s  4E20 BD   4BCC               jsr    bytewr  4E23 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  4E25 34   16       GSRCR     pshs   d,x  4E27 BD   50A7               jsr    tsk2rg  4E2A 8E   0001               ldx    #SNCR  4E2D BD   4B6F               jsr    byterd  4E30 ED   E4                 std    0,s  4E32 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  4E34 34   16       PSRCR     pshs   d,x  4E36 BD   50A7               jsr    tsk2rg  4E39 8E   0001               ldx    #SNCR  4E3C EC   E4                 ldd    0,s  4E3E BD   4BCC               jsr    bytewr  4E41 8D   E2       01        bsr    GSRCR  4E43 5D                      tstb  4E44 26   FB                 bne    01b       wait command to be consumed  4E46 E7   61                 stb    1,s       set return  4E48 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  4E4A 34   16       GSRIR     pshs   d,x  4E4C BD   50A7               jsr    tsk2rg  4E4F 8E   0002               ldx    #SNIR  4E52 BD   4B6F               jsr    byterd  4E55 ED   E4                 std    0,s  4E57 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  4E59 34   16       PSRIR     pshs   d,x  4E5B BD   50A7               jsr    tsk2rg  4E5E 8E   0002               ldx    #SNIR  4E61 EC   E4                 ldd    0,s  4E63 BD   4BCC               jsr    bytewrFIO Simulation Structure             00:31:07  Jan 07, 2024   Page   89wzspi, basic spi routines                             4E66 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  4E68 34   16       GSRSR     pshs   d,x  4E6A BD   50A7               jsr    tsk2rg  4E6D 8E   0003               ldx    #SNSR  4E70 BD   4B6F               jsr    byterd  4E73 ED   E4                 std    0,s  4E75 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  4E77 34   16       GSRPORT   pshs   d,x  4E79 BD   50A7               jsr    tsk2rg  4E7C 8E   0004               ldx    #SNPORT0  4E7F BD   4B81               jsr    wordrd  4E82 ED   E4                 std    0,s  4E84 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D  into socket registers source port                     * E=socket#                     *  4E86 34   16       PSRPORT   pshs   d,x  4E88 BD   50A7               jsr    tsk2rg  4E8B 8E   0004               ldx    #SNPORT0  4E8E EC   E4                 ldd    0,s  4E90 BD   4BDB               jsr    wordwr  4E93 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  4E95 34   16       GSRDHAR   pshs   d,x  4E97 BD   50A7               jsr    tsk2rg  4E9A 8E   0006               ldx    #SNDHAR0  4E9D BD   4B81               jsr    wordrd  4EA0 ED   A4                 std    0,y  4EA2 8E   0008               ldx    #SNDHAR2  4EA5 BD   4B81               jsr    wordrd  4EA8 ED   22                 std    2,y  4EAA 8E   000A               ldx    #SNDHAR4  4EAD BD   4B81               jsr    wordrd  4EB0 ED   24                 std    4,yFIO Simulation Structure             00:31:08  Jan 07, 2024   Page   90wzspi, basic spi routines                             4EB2 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  4EB4 34   16       PSRDHAR   pshs   d,x  4EB6 BD   50A7               jsr    tsk2rg  4EB9 8E   0006               ldx    #SNDHAR0  4EBC EC   A4                 ldd    0,y  4EBE BD   4BDB               jsr    wordwr  4EC1 8E   0008               ldx    #SNDHAR2  4EC4 EC   22                 ldd    2,y  4EC6 BD   4BDB               jsr    wordwr  4EC9 8E   000A               ldx    #SNDHAR4  4ECC EC   24                 ldd    4,y  4ECE BD   4BDB               jsr    wordwr  4ED1 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  4ED3 34   16       GSRDIP    pshs   d,x  4ED5 BD   50A7               jsr    tsk2rg  4ED8 8E   000C               ldx    #SNDIPR0  4EDB BD   4B81               jsr    wordrd  4EDE ED   A4                 std    0,y  4EE0 8E   000E               ldx    #SNDIPR2  4EE3 BD   4B81               jsr    wordrd  4EE6 ED   22                 std    2,y  4EE8 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  4EEA 34   16       PSRDIP    pshs   d,x  4EEC BD   50A7               jsr    tsk2rg  4EEF 8E   000C               ldx    #SNDIPR0  4EF2 EC   A4                 ldd    0,y  4EF4 BD   4BDB               jsr    wordwr  4EF7 8E   000E               ldx    #SNDIPR2  4EFA EC   22                 ldd    2,y  4EFC BD   4BDB               jsr    wordwr  4EFF 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in D                     *FIO Simulation Structure             00:31:08  Jan 07, 2024   Page   91wzspi, basic spi routines                             4F01 34   16       GSRDPOR   pshs   d,x  4F03 BD   50A7               jsr    tsk2rg  4F06 8E   0010               ldx    #SNDPOR0  4F09 BD   4B81               jsr    wordrd  4F0C ED   E4                 std    0,s  4F0E 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D  into socket registers source port                     * E=socket#                     *  4F10 34   16       PSRDPOR   pshs   d,x  4F12 BD   50A7               jsr    tsk2rg  4F15 8E   0010               ldx    #SNDPOR0  4F18 EC   E4                 ldd    0,s  4F1A BD   4BDB               jsr    wordwr  4F1D 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  4F1F 34   16       GSRMSS    pshs   d,x  4F21 BD   50A7               jsr    tsk2rg  4F24 8E   0012               ldx    #SNMSSR0  4F27 BD   4B81               jsr    wordrd  4F2A ED   E4                 std    0,s  4F2C 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D  into socket registers maximum segment size                     * E=socket#                     *  4F2E 34   16       PSRMSS    pshs   d,x  4F30 BD   50A7               jsr    tsk2rg  4F33 8E   0012               ldx    #SNMSSR0  4F36 EC   E4                 ldd    0,s  4F38 BD   4BDB               jsr    wordwr  4F3B 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  4F3D 34   16       GSRTOS    pshs   d,x  4F3F BD   50A7               jsr    tsk2rg  4F42 8E   0015               ldx    #SNTOS  4F45 BD   4B6F               jsr    byterd  4F48 ED   E4                 std    0,s  4F4A 35   96                 pul    d,x,pcFIO Simulation Structure             00:31:08  Jan 07, 2024   Page   92wzspi, basic spi routines                                                                     *                     * PSRTOS, put byte B  into socket registers TOS                     * E=socket#                     *  4F4C 34   16       PSRTOS    pshs   d,x  4F4E BD   50A7               jsr    tsk2rg  4F51 8E   0015               ldx    #SNTOS  4F54 EC   E4                 ldd    0,s  4F56 BD   4BCC               jsr    bytewr  4F59 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  4F5B 34   16       GSRTTL    pshs   d,x  4F5D BD   50A7               jsr    tsk2rg  4F60 8E   0016               ldx    #SNTTL  4F63 BD   4B6F               jsr    byterd  4F66 ED   E4                 std    0,s  4F68 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B  into socket registers TTL                     * E=socket#                     *  4F6A 34   16       PSRTTL    pshs   d,x  4F6C BD   50A7               jsr    tsk2rg  4F6F 8E   0016               ldx    #SNTTL  4F72 EC   E4                 ldd    0,s  4F74 BD   4BCC               jsr    bytewr  4F77 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  4F79 34   16       GSRRBFS   pshs   d,x  4F7B BD   50A7               jsr    tsk2rg  4F7E 8E   001E               ldx    #SNRBFSZ  4F81 BD   4B6F               jsr    byterd  4F84 ED   E4                 std    0,s  4F86 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B  into socket registers rec buf siz                     * E=socket#                     *  4F88 34   16       PSRRBFS   pshs   d,xFIO Simulation Structure             00:31:09  Jan 07, 2024   Page   93wzspi, basic spi routines                             4F8A BD   50A7               jsr    tsk2rg  4F8D 8E   001E               ldx    #SNRBFSZ  4F90 EC   E4                 ldd    0,s  4F92 BD   4BCC               jsr    bytewr  4F95 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  4F97 34   16       GSRTBFS   pshs   d,x  4F99 BD   50A7               jsr    tsk2rg  4F9C 8E   001F               ldx    #SNTBFSZ  4F9F BD   4B6F               jsr    byterd  4FA2 ED   E4                 std    0,s  4FA4 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B  into socket registers tx buf siz                     * E=socket#                     *  4FA6 34   16       PSRTBFS   pshs   d,x  4FA8 BD   50A7               jsr    tsk2rg  4FAB 8E   001F               ldx    #SNTBFSZ  4FAE EC   E4                 ldd    0,s  4FB0 BD   4BCC               jsr    bytewr  4FB3 35   96                 puls   d,x,pc                                          *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  4FB5 34   16       GSRTXFR   pshs   d,x  4FB7 BD   50A7               jsr    tsk2rg  4FBA 8E   0020               ldx    #SNTXFR0  [R]  4FBD BD   4B81               jsr    wordrd  4FC0 ED   E4       01        std    0,s  4FC2 BD   4B81               jsr    wordrd  4FC5 10A3 E4                 cmpd   0,s       read more times and exit  4FC8 26   F6                 bne    01b       when 2 reads are equal  4FCA 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  4FCC 34   16       GSRTXRP   pshs   d,x  4FCE BD   50A7               jsr    tsk2rg  4FD1 8E   0022               ldx    #SNTXRP0  [R]FIO Simulation Structure             00:31:09  Jan 07, 2024   Page   94wzspi, basic spi routines                             4FD4 BD   4B81               jsr    wordrd  4FD7 ED   E4       01        std    0,s  4FD9 BD   4B81               jsr    wordrd  4FDC 10A3 E4                 cmpd   0,s       read more times and exit  4FDF 26   F6                 bne    01b       when 2 reads are equal  4FE1 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  4FE3 34   16       GSRTXWP   pshs   d,x  4FE5 BD   50A7               jsr    tsk2rg  4FE8 8E   0024               ldx    #SNTXWP0  [RW]  4FEB BD   4B81               jsr    wordrd  4FEE ED   E4                 std    0,s  4FF0 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  4FF2 34   16       PSRTXWP   pshs   d,x  4FF4 BD   50A7               jsr    tsk2rg  4FF7 8E   0024               ldx    #SNTXWP0  4FFA EC   E4                 ldd    0,s  4FFC BD   4BDB               jsr    wordwr  4FFF 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  5001 34   16       GSRRXRS   pshs   d,x  5003 BD   50A7               jsr    tsk2rg  5006 8E   0026               ldx    #SNRXRZ0  [R]  5009 BD   4B81               jsr    wordrd  500C ED   E4       01        std    0,s  500E BD   4B81               jsr    wordrd  5011 10A3 E4                 cmpd   0,s       read more times and exit  5014 26   F6                 bne    01b       when 2 reads are equal  5016 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  5018 34   16       GSRRXRP   pshs   d,x  501A BD   50A7               jsr    tsk2rgFIO Simulation Structure             00:31:09  Jan 07, 2024   Page   95wzspi, basic spi routines                             501D 8E   0028               ldx    #SNRXRP0  [RW]  5020 BD   4B81               jsr    wordrd  5023 ED   E4                 std    0,s  5025 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  5027 34   16       PSRRXRP   pshs   d,x >5029 BD   50A7               jsr    tsk2rg  502C 8E   0028               ldx    #SNRXRP0  502F EC   E4                 ldd    0,s  5031 BD   4BDB               jsr    wordwr  5034 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  5036 34   16       GSRRXWP   pshs   d,x >5038 BD   50A7               jsr    tsk2rg  503B 8E   002A               ldx    #SNRXWP0  [R]  503E BD   4B81               jsr    wordrd  5041 ED   E4       01        std    0,s  5043 BD   4B81               jsr    wordrd  5046 10A3 E4                 cmpd   0,s       read more times and exit  5049 26   F6                 bne    01b       when 2 reads are equal  504B 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  504D 34   16       GSRIMR    pshs   d,x >504F BD   50A7               jsr    tsk2rg  5052 8E   002C               ldx    #SNIMR  5055 BD   4B6F               jsr    byterd  5058 ED   E4                 std    0,s  505A 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B  into socket registers interrupt mask                     * E=socket#                     *  505C 34   16       PSRIMR    pshs   d,x >505E BD   50A7               jsr    tsk2rg  5061 8E   002C               ldx    #SNIMR  5064 EC   E4                 ldd    0,s  5066 BD   4BCC               jsr    bytewrFIO Simulation Structure             00:31:10  Jan 07, 2024   Page   96wzspi, basic spi routines                             5069 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  506B 34   16       GSRFRAG   pshs   d,x >506D BD   50A7               jsr    tsk2rg  5070 8E   002D               ldx    #SNFRAG0  5073 BD   4B81               jsr    wordrd  5076 ED   E4                 std    0,s  5078 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  507A 34   16       PSRFRAG   pshs   d,x >507C BD   50A7               jsr    tsk2rg  507F 8E   002D               ldx    #SNFRAG0  5082 EC   E4                 ldd    0,s  5084 BD   4BDB               jsr    wordwr  5087 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#                     * return byte in B                     *  5089 34   16       GSKATM    pshs   d,x >508B BD   50A7               jsr    tsk2rg  508E 8E   002F               ldx    #SNKATIM  5091 BD   4B6F               jsr    byterd  5094 ED   E4                 std    0,s  5096 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B  into socket registers keep alive timer                     * E=socket#                     *  5098 34   16       PSRKATM   pshs   d,x >509A BD   50A7               jsr    tsk2rg  509D 8E   002F               ldx    #SNKATIM  50A0 EC   E4                 ldd    0,s  50A2 BD   4BCC               jsr    bytewr  50A5 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial addressFIO Simulation Structure             00:31:10  Jan 07, 2024   Page   97wzspi, basic spi routines                                                * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               50A7  tsk2rg    equ    *  50A7                         trfr   E,B  50A7 1F                      fcb    $1f  50A8 E9                      fcb    E<<4|B                               endm  50A9 5A                      decb             wzenum= 1...8, sn= 0...7                     *  50AA 1C   FE                 clc              make reg bits + '01'  50AC 59                      rolb             socket register  50AD 1A   01                 sec  50AF 59                      rolb             xxx 01 ...                     *  50B0                         trfr   B,F  50B0 1F                      fcb    $1f  50B1 9F                      fcb    B<<4|F                               endm  50B2 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               50B3  tsk2tx    equ    *  50B3                         trfr   E,B  50B3 1F                      fcb    $1f  50B4 E9                      fcb    E<<4|B                               endm  50B5 5A                      decb             wzenum= 1...8, sn= 0...7                     *  50B6 1A   01                 sec              make reg bits + '10'  50B8 59                      rolb             sock TX buffer  50B9 1C   FE                 clc  50BB 59                      rolb                     *  50BC 1A   01                 sec  50BE 59                      rolb             write bit     '1'                     *  50BF 58                      lslb             variable size '00'  50C0 58                      lslb             xxx 10 100                     *  50C1 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               50C2  tsk2rx    equ    *  50C2                         trfr   E,B  50C2 1F                      fcb    $1f  50C3 E9                      fcb    E<<4|BFIO Simulation Structure             00:31:10  Jan 07, 2024   Page   98wzspi, basic spi routines                                                          endm  50C4 5A                      decb             wzenum= 1...8, sn= 0...7                     *  50C5 1A   01                 sec              make reg bits + '11'  50C7 59                      rolb             sock RX buffer  50C8 1A   01                 sec              make reg bits + '11'  50CA 59                      rolb                     *  50CB 1C   FE                 clc  50CD 59                      rolb             read bit     '0'                     *  50CE 58                      lslb             variable size '00'  50CF 58                      lslb             xxx 11 000  50D0 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=sock, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  50D1 34   76       RDSK2FB   pshs   d,x,y,u                     *  50D3 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  50D6 23   02                 bls    01f  50D8 EC   4A                 ldd    wzrqln,u  mandatory size  50DA 1F   01       01        tfr    D,X       size  50DC ED   E4                 std    0,s       save xfrerred old  D  50DE ED   48                 std    wzxfer,u  50E0 27   3C                 beq    15f       no data                     *  50E2 BD   5018               jsr    GSRRXRP  50E5 34   06                 pshs   d         save socket read pointer  50E7 1F   02                 tfr    D,Y                     *  50E9 CE   8080               ldu    #SPIBASE  50EC 34   01                 pshs   cc  50EE                         pshsw  50EE 1038                    fdb    $1038                               endm  50F0 34   40                 pshs   u  50F2 1A   50                 orcc   #$50      disable interrupts  50F4 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  50F6 A7   C4                 sta    spicmd,u  50F8 10AF 44                 sty    hibyta,u  start address                      >50FB BD   50C2               jsr    tsk2rx    SOCK# to buffer address                       50FE E7   44                 stb    hibyta,u  5100 108E 0020               ldy    #fifo  5104 E7   44                 stb    hibyta,u  shift out first data byteFIO Simulation Structure             00:31:10  Jan 07, 2024   Page   99wzspi, basic spi routines                             5106 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  5108                         trfr   X,W  5108 1F                      fcb    $1f  5109 16                      fcb    X<<4|W                               endm  510A                         tfm4   U,Y  510A 113B                    fdb    $113b  510C 32                      fcb    U<<4|Y                               endm  510D 35   40                 puls   u  510F 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  5111 A7   C4                 sta    spicmd,u  5113                         pulsw  restore   E:F  5113 1039                    fdb    $1039                               endm  5115 35   01                 puls   cc                     *  5117 35   06                 puls   d         old read pointer  5119 E3   E4                 addd   0,s       adjust transferred  511B BD   5027               jsr    PSRRXRP   update pointer                     *  511E 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=sock                     * E=socket#                     * on entry D= total amount to xfer                     * on return D= xferred count                     *  5120 34   76       WRFB2SK   pshs   d,x,y,u  5122 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  5125 23   02                 bls    01f  5127 EC   4A                 ldd    wzrqln,u  5129 1F   01       01        tfr    d,x  512B ED   E4                 std    0,s  512D ED   48                 std    wzxfer,u  report size  512F 27   3A                 beq    15f                     *  5131 BD   4FE3               jsr    GSRTXWP   write pointer  5134 34   06                 pshs   d  5136 1F   02                 tfr    D,Y                     *  5138 CE   8080               ldu    #SPIBASE  513B 34   01                 pshs   cc  513D                         pshsw  save      E:F  513D 1038                    fdb    $1038                               endm  513F 34   40                 pshs   u  5141 1A   50                 orcc   #$50  5143 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS lowFIO Simulation Structure             00:31:11  Jan 07, 2024   Page  100wzspi, basic spi routines                             5145 A7   C4                 sta    spicmd,u  5147 10AF 44                 sty    hibyta,u  start address                       514A BD   50B3               jsr    tsk2tx                       514D E7   44                 stb    hibyta,u  514F 108E 0020               ldy    #fifo  5153 33   44                 leau   hibyta,u  the first to shift out  5155                         trfr   X,W  5155 1F                      fcb    $1f  5156 16                      fcb    X<<4|W                               endm  5157                         tfm3   Y,U  5157 113A                    fdb    $113a  5159 23                      fcb    Y<<4|U                               endm  515A 35   40                 puls   u  515C 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  515E A7   C4                 sta    spicmd,u  5160                         pulsw  restore   E:F  5160 1039                    fdb    $1039                               endm  5162 35   01                 puls   cc                     *  5164 35   06                 puls   d         old write pointer  5166 E3   E4                 addd   0,s  5168 BD   4FF2               jsr    PSRTXWP   update pointer                     *                     *  516B 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             00:31:11  Jan 07, 2024   Page  101Debug Interface Routines                                                   516D               DB_main  516D 8D   4F                 bsr    DB_test   see if debug routines present  516F 6E   9F 6002            jmp    [DEBUGROM+2]  5173               DB_pdata  5173 8D   49                 bsr    DB_test   see if debug routines present  5175 6E   9F 6004            jmp    [DEBUGROM+4]  5179               DB_phex  5179 8D   43                 bsr    DB_test   see if debug routines present  517B 6E   9F 6006            jmp    [DEBUGROM+6]  517F               DB_phex2  517F 8D   3D                 bsr    DB_test   see if debug routines present  5181 6E   9F 6008            jmp    [DEBUGROM+8]  5185               DB_pcrlf  5185 8D   37                 bsr    DB_test   see if debug routines present  5187 6E   9F 600A            jmp    [DEBUGROM+10]  518B               DB_check  518B 8D   31                 bsr    DB_test   see if debug routines present  518D 6E   9F 600C            jmp    [DEBUGROM+12]  5191               DB_config  5191 8D   2B                 bsr    DB_test   see if debug routines present  5193 6E   9F 600E            jmp    [DEBUGROM+14]  5197 34   17       DB_msg    pshs   cc,d,x  5199 AE   65                 ldx    1+2+2,s   get return address  519B EC   81                 ldd    ,x++      get mask word  519D B4   0401               anda   DB_cntrl  51A0 F4   0402               andb   DB_cntrl+1  51A3 34   04                 pshs   b  51A5 AA   E0                 ora    ,s+  51A7 27   04                 beq    10f       jump if flag not set  51A9 30   02                 leax   2,x       skip over false address & fall through  51AB 20   02                 bra    20f  51AD AE   84       10        ldx    ,x        get false branch label  51AF AF   65       20        stx    1+2+2,s   fix up return address  51B1 35   97                 puls   cc,d,x,pc return                     *  51B3               DB_pspace  51B3               DB_outsp  51B3 34   16                 pshs   d,x  51B5 8E   51BC               ldx    #00f  51B8 8D   B9                 bsr    DB_pdata  51BA 35   96                 puls   d,x,pc  51BC 20 00         00        fcc    ' ',0                       51BE 34   07       DB_test   pshs   cc,d  51C0 FC   6000               ldd    DEBUGROM  Debug rom present?  51C3 1083 1234               cmpd   #$1234    special marker  51C7 27   05                 beq    99f       yes - exit  51C9 35   07                 puls   cc,d      no - abort DB_xx function  51CB 32   62                 leas   2,s  51CD 39                      rts  51CE 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             00:31:11  Jan 07, 2024   Page  102Debug Interface Routines                                                                                                     end    rom_initFIO Simulation Structure             00:31:11  Jan 07, 2024   Page  103Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down 403D   CPUtraps FFF0   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check 518B   DB_cntrl 0401   DB_confi 5191   DB_iflg  0400   DB_main  516D   DB_msg   5197   DB_outsp 51B3   DB_pcrlf 5185   DB_pdata 5173   DB_phex  5179   DB_phex2 517F   DB_pspac 51B3   DB_test  51BE   DBmsg00  4000   DBmsg01  4009   DBmsg02  4029   DEBUG    0D04   DEBUGROM 6000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK 45CD   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    002E   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   002A   D_inthan 0028   D_test   002C   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get 42D9   FIFO_put 42FE   FIFOgeta 42D0   FIFOputa 42F6   FIOPRI   FFCE   FIO_get  42AE   FIO_lock 0446   FIO_rel  42C3   GCRGA    4C1A   GCRILLT  4CE2   GCRIMR   4D1E   GCRIR    4D00   GCRMR    4BFC   GCRPHY   4DDA   GCRRCR   4D96   GCRRTR   4D78   GCRSHA   4C76   GCRSIMR  4D5A   GCRSIP   4CB4   GCRSIR   4D3C   GCRSNM   4C48   GCRUIP   4DC3   GCRURP   4DB4   GCRVERS  4DF8   GSKATM   5089   GSRCR    4E25   GSRDHAR  4E95   GSRDIP   4ED3   GSRDPOR  4F01   GSRFRAG  506B   GSRIMR   504D   GSRIR    4E4A   GSRMR    4E07   GSRMSS   4F1F   GSRPORT  4E77   GSRRBFS  4F79   GSRRXRP  5018   GSRRXRS  5001   GSRRXWP  5036   GSRSR    4E68   GSRTBFS  4F97   GSRTOS   4F3D   GSRTTL   4F5B   GSRTXFR  4FB5   GSRTXRP  4FCC   GSRTXWP  4FE3   HANGS    0001   HRECSIZ  0004   H_cpu    444C   H_fio    4470   IF       0010   INTS     0002   IO_end   4377   IO_han   4319   IRQ_han  4395   IRQmsg10 43A2   IS       0003   IU       0002   IX       0000   IY       0001   MAXHIST  0010   MAXTBL   0004   MAX_DEV  0001   MAX_S_NU 0015   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NET      0001   NUM_TSK  0459   O_INTRPT 0038   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    4C31   PCRILLT  4CF1   PCRIMR   4D2D   PCRIR    4D0F   PCRMR    4C0B   PCRPHY   4DE9   PCRRCR   4DA5   PCRRTR   4D87   PCRSHA   4C95   PCRSIMR  4D69   PCRSIP   4CCB   PCRSIR   4D4B   PCRSNM   4C5F   PF_INET  0002   PF_UNIX  0001   POLPRI   FFBA   PSRCR    4E34   PSRDHAR  4EB4   PSRDIP   4EEA   PSRDPOR  4F10   PSRFRAG  507A   PSRIMR   505C   PSRIR    4E59   PSRKATM  5098   PSRMR    4E16   PSRMSS   4F2E   PSRPORT  4E86   PSRRBFS  4F88   PSRRXRP  5027   PSRTBFS  4FA6   PSRTOS   4F4C   PSRTTL   4F6A   PSRTXWP  4FF2   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  50D1   REJECT   0080   ROMLOorg 4000   ROM_ERR  40B5   ROM_VERS 0030   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_RDFRM  0021   R_READ   0006   R_RQRD   0005   R_RQRDNB 0015   R_RQWR   0003   R_RQWRNB 0013   R_RRDFD  0022   R_RSNDTO 0023   FIO Simulation Structure             00:31:12  Jan 07, 2024   Page  104Debug Interface Routines                            R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   43E9   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_RAW   0003   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SYS_TABS 04C6   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_OPEN   0008   S_READ   0030   S_RQRD   0028   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WRFB2SK  5120   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSLACK   001D   WSLIST   0014   WSMCRW   0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name 41C1   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0360   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   0028   WZSKIO   0002   WZSKIP   0040   WZSKIS   0004   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWLCK   0010   X        0001   Y        0002   bad_cmd  4392   bittab   46C3   bmread   4B93   bt2num   46B2   byterd   4B6F   bytewr   4BCC   change   4494   chproc   040C   clock_ti 0455   conlb1   476C   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  04A0   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  405C   fio_fsz  405A   fio_irq  420C   fio_msg  4276   fio_rese 41CC   fio_resp 4292   fio_star 407D   fio_wait 41EF   fiointe  4275   functb   4AA3   getjo1   44DC   getjo2   44EB   getjo4   44F2   getjo6   44FB   getjo8   44FD   getjob   44D6   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   045A   hstptr   049A   idle     040D   int_all  43BA   int_buf  0447   int_ptr  0453   jobpri   040B   lobyta   0005   lobyts   0007   lstram   04C6   makrd6   4555   makrdy   4540   max_trn  405E   mod_name 0002   mod_tbl  41BB   mod_type 0000   no_dev   413C   FIO Simulation Structure             00:31:12  Jan 07, 2024   Page  105Debug Interface Routines                            num2bt   46A8   nwp_strt 0000   oldorg   4B3B   polext   4786   putru1   4514   putru2   451B   putru4   4529   putru5   4538   putru6   453C   putrun   4507   rdrqer1  48A0   rom_bad  40B3   rom_firq 4086   rom_init 405F   rom_int  40A8   rom_nmi  4080   rom_swi  408D   rom_swi2 4093   rom_swi3 409A   rom_trap 40A1   rsche2   44AB   rsche3   44BF   rsched   449A   runlst   0403   sa_dat   0002   sa_fam   0000   sdev_sig 461B   send_SI  442B   set_tabl 40F4   showrg   4AD5   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   4826   skbind   47AF   skclin   46E7   skclos   46CC   skcner1  47A5   skcner2  4792   skcner3  47A9   skcner4  47A1   skcner5  479D   skcner6  4796   skconn   4719   skctcp   4641   skcudp   464A   skdisc   4B34   skfres   463A   skinit   45FD   skinthan 461A   skintrp  4B34   sklist   47F4   sknewp   461C   skopen   4653   skoper1  469E   skoper2  46A2   skrecv   48A5   skreqrd  485D   skreqwr  48C7   sksend   4908   skskep   4B34   sksmac   4B34   skspcl   4A7C   sktest   4617   skurrd   498F   skurrdf  492A   skurwt   49B9   skusnm   4A03   skusnt   4A4C   skuwr2   4A03   sleep    457A   sleep7   45A2   slplst   0405   spicmd   0000   spicon   0001   spiint   0456   spinit   4B3B   spista   0000   spistr2  4B41   sprend   4BEA   stbinit  40C2   sto_chk  4143   swtchu   44CB   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack 41AF   timerchk 41B5   timerin  41A9   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   50A7   tsk2rx   50C2   tsk2tx   50B3   tskend   049E   tskinit  4151   tsktab   049C   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0409   wakeu2   4561   wakeu3   4568   wakeu4   456C   wakeu5   456E   wakeup   4556   wlocip   0360   wordrd   4B81   wordwr   4BDB   wzanyp   0457   wzcmnd   0004   wzdev    4AAB   wzdevt   462E   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0022   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzipad   0014   wzmyip   0000   wzprot   0026   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0338   wzsk2    0310   wzsk3    02E8   wzsk4    02C0   wzsk5    0298   wzsk6    0270   wzsk7    0248   wzsk8    0220   wzsprt   0010   wzstat   0005   wztype   0024   wzuipa   001A   wzupkt   0006   wzuprt   001E   wzurms   0020   wzxfer   0008   xmtint   45AF   