The 09FLP support board provides:*) WD2793 controller *) 50 pin connector for 8" drives, 36 pin connector for 5.25" / 3.5" drives*) control latch: drive select, side select, SD/DD select, 8"/5" mode select*) status port: FDC DRQ, FDC INT, *) motor-on timer*) test jumper, variable capacitor and 2 potentiometers to adjust various settings for the WD2793*) local 2MHz oscillator for the WD2793*) 40 pin IO connector and form factor that fits on a CPU09GPPThe schematic is the final version of the design2020-03-22:I entered simple code, for reading a sector from diskette, in RAM and yes, it works. I can read data from floppies whoare written in 1993!. I have a 33 diskette large backup of a whole UniFLEX system from that time, so I expect a few surprisesto be on those disks. Now it is time for some serious driver coding :-). I need to study the(my) driver from the past becauseat that time it was so clever that it could work with: 3/5/8 inch, each FM and MFM. Also double-step, that is a 40 track diskette in a 80 track drive and biased and un-biased sectors on tracks. The latter more important for MSDOS diskswhich UniFLEX could handle with uos2pc and pc2uos etc.Bottom line is we are on track (!)2020-04-29: I am opening a time capsule by restoring 34 floppies of a backup I made in 1992 (or so). This means that a few things start to work well. First, I created a second block device driver for the CPU09GPP/09FLP combo. This is the first UniFLEX kernel ever to have two separate block devices! Second, the driver on the 09FLP side start to work too. At this moment it supports restore,seek and read but that is enough for the moment. By restoring the backup a lot of programs in /bin and /usr/bin are overwritten. But as it turns out these new (old) versions work better than the ones I used up to now.2020-07-10:In the mean time I indeed got the second block device driver working. It is a milestone in UniFLEX world as the kernelnow handles 2 completely independent block device drivers.The floppy driver code that runs on the GPP CPU, is still somewhat experimental, but tests have shown that without DMAthe hardware can handle High Denisty floppy disks (500 kbit) with ease. The GPP code should be completed and matured. When finished it will support 512 bytes sectors initially but later I planto add 128 Byte sectors and 256 Bytes sectors as well. In the past (80's-90's) my kernel/floppy driver could also handleFLEX Double sided Double density disks, something the original TSC version could not. That driver could figure out whichdata rate the floppy had, single or double sided, single or double denisty, 5 inch mode or 8 inch mode and lastly didsupport 40 tarck disks in a 80 tarck drive. Another thing the GPP/FLP combo will be capable off is 'read track'. 'Write track' was used to put the basic format onto the diskettes and could be done because of the sys cbreak call that would issue the process memory contineously so that the DMA could transfer a whole trackfrom process memory to the disk. Read track was not allowed because there was no guarantee that the memory was properlysorted in advance. For Write track this was not a big issue, if the memory was not sorted, the diskette would not bereadable as result, but no further harm to the system was done.2020-09-21:The kernel driver flpdrvr.t is in a good shape. It supports sector read, sector write and track write.The gppflpdrv.t is getting mature, I _can_ format a number of disk formats but not yet all :-(Nice is that our formatting programs from the 80/090's work without any change. The problem is definitively in the gppflpdvr.t code or in the hardware. But I made a lot of progress here.I can format F8-DD80, F8-SD80, F8-DS80, F8-SS80, FD-SS, FD-SD, FD-DS, FD-DD. But for some reason the 5' formatsyet fail. I am sure I will find that too :-)2020-10-12:The software for the CPU09GPP keeps throwing up obstacles. I have hunting an effect that I failed tounderstand for a couple of days. While my short test program gppflp would allow me to read a DS-DD diskwithout a problem, the full gppflpdrv software would not let that happen. The kernel driver will test if it can read the SIR block with SD 8", DD 8", SD 5" and DD 5", in thatorder. When successful, the kernel will read and apply the 2 special bytes from the SIR as parametersfor the driver, so the driver knows all it needs to know i.e: sectors/track, biased sectors, tracks etc.This way it can handle every UniFLEX disk thrown at it. Futhermore,via the character device driver and a proper program it can handle every diskette with 128, 256 and 512 byte sectors. So even a DS-DD FLEX disk would be readable.Many hypothesis were recherched but none gave a real clue, until.... I started to add debug statements in the code that would show settings of variables. All of a sudden it worked, but disabling the debug calls brought back the problem.I nailed it down to the fact the de WD2793 controller needs some 'settling' time when the density settingis changed. And yes inserting a delay made everything working again.I could not find any documentation on that.Now I have to get down to the amount of minimal delay what is essential to keep it working.2020-10-10:It was not the WD2793, but it was the driver though. During testing it appeared to me that ONLY sector 1of track 0 was unreadable after fresh formatting. So I followed the formatting process very carefuly butfound no errors. Mmmm, track 0, sector 1, that is the _first_ write track action. What if the drive hadnot positioned well?? I put on a restore action in the write track function just before the write itselfand guess what?? That was the solution! I could strip all other (extra) code for which I thought it helped. ********************************************************************************************* The CPU09GPP/09FLP combo now works fully********************************************************************************************Status: 1) I can format any format from the spreadsheet2) formatpc0 start to work too, I can format PC diskettes that I can handle under Linux with mtools3) pc2uos and uos2pc started to work too, I can transfer files from UniFLEX to MSDOS disks and vice versa.Now I have good confidence that the drivers are OK. O yes, I need to add ReadTrack still but that hasno priority now.I made component changes to 09FLP: T1 has been changed to BS170, the K246 is wrong at that place.R1 has already been changed to 1K5 I believe.2021-12-08:Code for driver now completed. Read Description for the details.