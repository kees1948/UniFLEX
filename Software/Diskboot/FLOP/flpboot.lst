Generic Boot                         06:02:47  Mar 02, 2022   Page    1boots first stage from floppy                                                      info   Bootstrap  for CPU09GPP/09FLP                     *                     * generic defines for unibug ROM                     *                               opt    lis                                          * UniFLEX Bootstrap Loader for CPU09GPP/09FLP                     *                     * Assumptions:                     * 'Boot' resides in to lower 65K blocks on the disk                     *                                          * Special core locations                                    0013  corcnt    equ    $13               0014  lstmem    equ    $14                                    F40A  DATMAP    equ    $F40A     Map for $A000                                          * Equates               0011  ffmap     equ    17        file map offset in fdn               000A  bhxfr     equ    10        transfer address offset in header               0018  BHDSIZ    equ    24        binary file header size               0200  BUFSIZ    equ    512       disk buffer size                                    01F0  PARTOFF   equ    $01f0     offset to partition table in disk block 0                                          * System equates for single sector read                                    0200  SECLEN    equ    512       sector length                                          *                     * the UniFLEX kernel has some pointers at start of code                     *                     * 5000   fdb  unidat            relic from "install"                     * 5002   fdb  parttbl (unidat2)                     * 5004   fdb  unikey            relic from "install"                     * 5006   fdb  unisrn                     * 5008   fdb  contab                                    5002  parttbl   equ    $5002     tell boot where to find pointer                                          *************************************************************************************************                     *                     *   expect CPU09GPP to be on (F)E000 in kernel space                     *                     *                     * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3Generic Boot                         06:02:48  Mar 02, 2022   Page    2boots first stage from floppy                                      0006  W         equ    6                     *                     * trfr, transfer registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                     Generic Boot                         06:02:48  Mar 02, 2022   Page    3boots first stage from floppy                                                                 *                     * This is the header file for the kernel flpdrvr.t and                     * for gppflpdrvr.t                     *                                          * BIT defines                                          * IO defines                               global flpdpr,flpint               E000  flpdpr    equ    $e000     base address controller 0                                          *                     * OFFSET's in Dual Port Ram                     *               0000  flrflg    equ    0         transaction read/write flag (copy of bfflag)               0001  flblkh    equ    1         block address high (unused)               0002  flblkm    equ    2         mid               0003  flblkl    equ    3         low               0004  fltsiz    equ    4         transaction size (total bytes)               0006  fltxfr    equ    6         transferred data size (actual bytes)               0008  flstat    equ    8         result status (error)                                    0009  fldriv    equ    9         which drive               000A  flnwop    equ    10        driver new open flag                     * ttyget/ttyset byte parameters for the selected drive               000B  fltsid    equ    11        side      floppy ttyget/set bytes               000C  fltden    equ    12        density                                          * DPR_DMAX sets the location               0020  flpfifo   equ    $20       offset to DPR fifo buffer                                          * disk hardware parameters               03F0  flpstp    equ    $3f0      step rate                                          * last 16 bytes are special               03FC  fio2cp    equ    $3fc      debug port data from IO to CPU               03FD  fcp2io    equ    $3fd      debug port data from CPU to IO                                          * 'postbox' locations between the 2 sides of the DPR                     * set INT when written (and enabled)               03FE  flpint    equ    $3fe      IOP tells you it did something               03FF  flptel    equ    $3ff      tell IOP you want something                     *                                    0011  CMDRSC    equ    %00010001 read sector                       0000                         abs                                          *                     *************************************************************************************************                     Generic Boot                         06:02:48  Mar 02, 2022   Page    4boots first stage from floppy                                            * Temporary storage                     * will be overwritten when kernel intializes  07E0                         org    bootorg-32 in low memory, past memory tables  07E0               direct    rmb    1         index in map  07E1               mapptr    rmb    2  07E3               fdnbkn    rmb    3  07E6               entrys    rmb    2         entries in directory  07E8               xfradr    rmb    2  07EA               conadr    rmb    2         controller base address  07EC               drvsel    rmb    2         drive/table select bits                                          ********************************************                     * Start of program,                     ********************************************                       0800                         org    bootorg                                          * Lookup "Boot" in directory                     *                     * on entry U holds the controller base address                     * D holds drive select info                     * >0800 16   001B     uboot     lbra   uboot0    skip disk type bytes                     *  0803 00 00         flpdns    fcb    0,0       side/dens info from formatter                     * filename for booting  0805 0D            bootn     fcb    $0d  0806 69 6D 61 67             fcc    'image: '  080D 75 6E 69 66   btname    fcc    'uniflex'  0814 00            extchar   fcb    0         extra character for name  0815 00 00 00 00             fcb    0,0,0,0,0,0 14 in total  081B 0D 0A 00      crlf      fcb    $0d,$0a,0                     *  081E FF   07EA     uboot0    stu    conadr    save this info  0821 7F   07EC               clr    drvsel    drive select                     *  0824 8E   0805               ldx    #bootn    show bootname  0827 AD   9F F80A            jsr    [rpdata]                     *  082B 108E 4E20               ldy    #20000  082F AD   9F F804  uboot02   jsr    [rinchk]  key pressed  0833 25   09                 bcs    uboot01  0835 BD   09D4               jsr    delay  0838 31   3F                 leay   -1,y  083A 26   F3                 bne    uboot02  083C 20   0F                 bra    uboot1                     *  083E AD   9F F806  uboot01   jsr    [rinch]   get character from keyboard  0842 81   30                 cmpa   #'0  0844 25   07                 blo    uboot1    invalid  0846 81   39                 cmpa   #'9  0848 22   03                 bhi    uboot1Generic Boot                         06:02:49  Mar 02, 2022   Page    5boots first stage from floppy                         084A B7   0814               sta    extchar   extend boot name                     *  084D 8E   081B     uboot1    ldx    #crlf  0850 AD   9F F80A            jsr    [rpdata]                     *  0854 B6   010A               lda    $010A     check block $A000 mapped in  0857 81   FD                 cmpa   #BLKHOL   black hole?  0859 26   0E                 bne    uboot2  085B 0A   13                 dec    corcnt    decrease number of pages available  085D 9E   14                 ldx    lstmem    pick up last page pointer  085F A6   82                 lda    ,-x       get a page  0861 9F   14                 stx    lstmem  0863 B7   010A               sta    $010A     set up map  0866 B7   F40A               sta    DATMAP    map it in for us                     *                     * here the actual boot process starts                     *  0869 CC   0001     uboot2    ldd    #1        root directory fdn no.  086C BD   0937               jsr    fdnblk    read in fdn  086F EC   27                 ldd    7,y       find size of directory  0871 BD   091C               jsr    divby8  0874 44                      lsra  0875 56                      rorb  0876 FD   07E6               std    entrys    save entry count  0879 BD   0965     read1     jsr    rdblk     read data block  087C 1026 00B6               lbne   noboot    exit if error  0880 30   42       lookup    leax   2,u       point to filespec  0882 EC   C4                 ldd    0,u       check for deleted entry  0884 27   13                 beq    nxtent    skip deleted files  0886 108E 080D               ldy    #btname   point to boot file name  088A C6   0E                 ldb    #14       set name length  088C A6   80       cmpnam    lda    0,x+  088E A1   A0                 cmpa   0,y+      is this boot file entry?  0890 26   07                 bne    nxtent    if not, skip to next  0892 5A                      decb  0893 26   F7                 bne    cmpnam  0895 EC   C4                 ldd    0,u       found it, get fdn  0897 20   17                 bra    load      go load uniflex  0899 BE   07E6     nxtent    ldx    entrys  089C 30   1F                 leax   -1,x      decrement count  089E BF   07E6               stx    entrys    end of directory?  08A1 1027 0091               lbeq   noboot    error if so  08A5 33   C8 10              leau   16,u      point to next entry  08A8 1183 0C00               cmpu   #buffer+512 past current block?  08AC 26   D2                 bne    lookup    check entry if not  08AE 20   C9                 bra    read1     else, get another block                                          * found it, Load Boot Image                       08B0 BD   0937     load      jsr    fdnblk    read in uniflex fdn  08B3 BD   0965               jsr    rdblk     read 1st block of the file  08B6 26   7E                 bne    noboot    exit if errorGeneric Boot                         06:02:49  Mar 02, 2022   Page    6boots first stage from floppy                         08B8 EC   4A                 ldd    bhxfr,u   get transfer address  08BA FD   07E8               std    xfradr    save it  08BD 33   C8 18              leau   BHDSIZ,u  skip binary file header  08C0 8D   61       getrc1    bsr    getchr    get record length in x  08C2 1F   98                 tfr    b,a  08C4 8D   5D                 bsr    getchr  08C6 1083 0000               cmpd   #0        terminator?  08CA 27   14                 beq    done      start uniflex if so  08CC 1F   01                 tfr    d,x  08CE 8D   53                 bsr    getchr    get load address in y  08D0 1F   98                 tfr    b,a  08D2 8D   4F                 bsr    getchr  08D4 1F   02                 tfr    d,y  08D6 8D   4B       getrc2    bsr    getchr    get a data byte  08D8 E7   A0                 stb    0,y+      put in memory  08DA 30   1F                 leax   -1,x      decrement the count  08DC 26   F8                 bne    getrc2    loop if not end of record  08DE 20   E0                 bra    getrc1    else, get next record                                          * Boot is loaded, begin execution                       08E0 7F   07EC     done      clr    drvsel    set for disk 0  08E3 108E 0919               ldy    #bootno   point to block 0 of disk  0  08E7 BD   0990               jsr    mread     read boot sector in map  08EA 26   4A                 bne    noboot    error!  08EC FE   5002               ldu    parttbl   we use (unidat2) as pointer to store partition table  08EF 8D   18                 bsr    cpypart                     * check ready drive 1  08F1 C6   10                 ldb    #IDE_DSL  drive select bit  08F3 F7   07EC               stb    drvsel  08F6 34   40                 pshs   u  08F8 108E 0919               ldy    #bootno   point to block 0 of disk 1  08FC BD   0990               jsr    mread     read boot sector in map  08FF 35   40       don05     puls   u  0901 26   02                 bne    don02     could not read  0903 8D   04                 bsr    cpypart                     *  0905 6E   9F 07E8  don02     jmp    [xfradr]  jump to transfer address                                          * copy part table from boot sector into kernel               0909  cpypart   equ    *  0909 108E 0DF0               ldy    #map+PARTOFF buffer with bootsector  090D 8E   0008               ldx    #8        8 words  0910 EC   A1       don01     ldd    0,y++  0912 ED   C1                 std    0,u++  0914 30   1F                 leax   -1,x  0916 26   F8                 bne    don01  0918 39                      rts                                          *                     * artificial blockno of boot sector on disk                     *Generic Boot                         06:02:49  Mar 02, 2022   Page    7boots first stage from floppy                         0919 00 00 00      bootno    fcb    0,0,0     we need it for mread                                          * Divide contents of D by 8                       091C 44            divby8    lsra  091D 56                      rorb  091E 44                      lsra  091F 56                      rorb  0920 44                      lsra  0921 56                      rorb  0922 39                      rts                                          * Get single character from binary file                       0923 1183 0C00     getchr    cmpu   #buffer+512 more data in buffer?  0927 26   08                 bne    getch2    skip if so  0929 34   32                 pshs   a,x,y  092B 8D   38                 bsr    rdblk     else, read another block  092D 35   32                 puls   a,x,y  092F 26   03                 bne    nbootx    exit if error  0931 E6   C0       getch2    ldb    0,u+      get character, advance ptr  0933 39                      rts                                          * Uniflex file was not found                       0934 35   06       nbootx    puls   d         fix stack  0936 3F            noboot    swi              return to monitor ROM                                          * Read fdn specified in D                       0937 34   06       fdnblk    pshs   d         save fdn number  0939 C3   000F               addd   #15       convert to block number  093C 8D   DE                 bsr    divby8  093E FD   07E4               std    fdnbkn+1  0941 7F   07E3               clr    fdnbkn  0944 108E 07E3               ldy    #fdnbkn  0948 8D   46                 bsr    mread     read a block  094A 35   06                 puls   d         restore fdn number  094C 26   E6                 bne    nbootx    exit if error  094E 5A                      decb             calculate  buffer offset  094F C4   07                 andb   #$07  0951 86   40                 lda    #64  0953 3D                      mul              offset=(fdn&7)*64  0954 C3   0C00               addd   #map  0957 1F   02                 tfr    d,y       fdn pointer in y  0959 C3   0009               addd   #9        point to ffmap  095C FD   07E1               std    mapptr    save map pointer  095F 86   0A                 lda    #10       get direct block count  0961 B7   07E0               sta    direct    initialize indirect flag  0964 39                      rts                                          * Read a block from fileGeneric Boot                         06:02:49  Mar 02, 2022   Page    8boots first stage from floppy                                              0965 7D   07E0     rdblk     tst    direct    a direct block?  0968 27   14                 beq    chgind    change to indirect  096A 7A   07E0               dec    direct    dec. direct count  096D 10BE 07E1               ldy    mapptr    get file map pointer  0971 8E   0A00               ldx    #buffer   setup buffer address  0974 8D   1D                 bsr    xread     read the sector  0976 34   01                 pshs   cc  0978 10BF 07E1               sty    mapptr  097C 35   81                 puls   cc,pc                       097E 10BE 07E1     chgind    ldy    mapptr    get file map pointer  0982 8D   0C                 bsr    mread     read block of indirects  0984 26   AE                 bne    nbootx    exit if error  0986 FF   07E1               stu    mapptr    reset file map pointer  0989 86   80                 lda    #128      set new direct count  098B B7   07E0               sta    direct  098E 20   D5                 bra    rdblk     now read data block                                          ****************************************************                     * Read the specified map block (low level)                     ****************************************************  0990 8E   0C00     mread     ldx    #map      address of buffer for block                     ****************************************************                     * LOW level drivers for CPU09GPP/09FLP                     *                     *   X - Buffer Address                     *   Y - Block # Pointer                     *                     ****************************************************                     * Read a single sector  0993 FE   07EA     xread     ldu    conadr  0996 34   10                 pshs   x         buffer address                     *  0998 F6   07EC               ldb    drvsel  099B E7   49                 stb    fldriv,u  099D E7   4A                 stb    flnwop,u  099F EC   21                 ldd    1,y       block 15..0  09A1 ED   42                 std    flblkm,u  09A3 6F   41                 clr    flblkh,u  09A5 31   23                 leay   3,y       ext block  09A7 FC   0803               ldd    flpdns    bits from boot sector  09AA ED   4B                 std    fltsid,u  09AC CC   0200               ldd    #BUFSIZ  09AF ED   44                 std    fltsiz,u  09B1                         trfr   D,W       transfer count  09B3 86   11                 lda    #CMDRSC  09B5 A7   C4                 sta    flrflg,u  09B7 86   FF                 lda    #$ff  09B9 A7   C9 03FF            sta    flptel,u                     *  09BD A6   C9 03FE  xrdl01    lda    flpint,u  wait for block to arriveGeneric Boot                         06:02:50  Mar 02, 2022   Page    9boots first stage from floppy                         09C1 27   FA                 beq    xrdl01  09C3 6F   C9 03FE            clr    flpint,u  09C7 A6   48                 lda    flstat,u  status  09C9 26   07                 bne    ider2                     *  09CB 33   C8 20              leau   flpfifo,u transfer data from fifo to buffer  09CE                         tfm1   U,X  09D1 4F                      clra             set no error                     *  09D2 35   C0       ider2     puls   u,pc      buffer now in u                                          * delay                       09D4 86   40       delay     lda    #$40  09D6 4A            del2      deca  09D7 26   FD                 bne    del2  09D9 39                      rts                                          ****************************************************                       09DA 00 00 00 00             rzb    512-(*-uboot)                     * Buffers  0A00               buffer    rmb    512       (0a00)  0C00               map       rmb    512       (0c00)                                                    end0 Error(s) detected     1 Excessive BRANCH/JUMP(S) detectedGeneric Boot                         06:02:50  Mar 02, 2022   Page   10boots first stage from floppy                       Symbol Table:Absolute Symbols:BHDSIZ   0018   BLKHOL   00FD   BUFSIZ   0200   CMDRSC   0011   D        0000   DATMAP   F40A   DATSENSE 0000   DEBSIG   A55A   DIVZRO   00FF   FALTI    0007   IDEBSY   0080   IDEDMRQ  0040   IDEDRD   00C8   IDEDSC   0010   IDEDWR   00CA   IDEERR   0001   IDEINTR  0080   IDEIO16  0001   IDEIORY  0002   IDEIRQ   0004   IDERDY   0040   IDERSTR  0010   IDE_DSL  0010   IDE_LBA  0040   ILGOPC   00FF   KILLI    0005   LSTPAG   00F7   L_ADDR   000F   L_CSEL   0010   L_DMAEN  0040   L_DREAD  0080   L_INTEN  0020   PARTOFF  01F0   PATIME   0001   PATIMR   0080   PBLGHT   00FF   PBMTRP   0080   PIRQMSK  0080   SECLEN   0200   STKSIZ   000E   TIMEI    0009   U        0003   W        0006   X        0001   Y        0002   acia     F000   ascii    FFE4   bhxfr    000A   bootn    0805   bootno   0919   bootorg  0800   brdbas0  F100   btname   080D   buffer   0A00   bufseg   000C   chgind   097E   cmpnam   088C   conadr   07EA   corcnt   0013   count    FFFA   cpypart  0909   crlf     081B   cuddwn   FE01   datbox   F400   datsiz   0400   dbsign   E800   debini   E804   debnmi   E802   del2     09D6   delay    09D4   digit    FFFB   direct   07E0   divby8   091C   dlen     001C   dmaadh   0010   dmaadl   0011   dmaltc   0013   don01    0910   don02    0905   don05    08FF   done     08E0   drvsel   07EC   entrys   07E6   extchar  0814   fcp2io   03FD   fdnbkn   07E3   fdnblk   0937   ffmap    0011   fio2cp   03FC   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flnwop   000A   flpdns   0803   flpdpr   E000   flpfifo  0020   flpint   03FE   flpstp   03F0   flptel   03FF   flrflg   0000   flstat   0008   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   getch2   0931   getchr   0923   getrc1   08C0   getrc2   08D6   hiadr    FFFE   hirom    FE10   ideadr0  0006   ideadr1  0008   ideadr2  000A   ideadr3  000C   idecmst  000E   idedat   0000   ideerft  0002   ider2    09D2   idescnt  0004   idestat  0018   inistk   F7FF   ioseg    000E   k_u_map  FE02   limit    FFF7   load     08B0   lookup   0880   lowadr   FFFC   lstmem   0014   map      0C00   mapptr   07E1   monpcra  F005   monpcrb  F007   monpdra  F004   monpdrb  F006   mread    0990   nbootx   0934   noboot   0936   nomap    00FD   nxtent   0899   offset   FFF5   parttbl  5002   rammap   0100   rdblk    0965   read1    0879   rhexbyt  F80C   rinch    F806   rinchk   F804   romadr   F800   rommap   FEFF   romseg   000F   romstk   BE80   routch   F808   rpdata   F80A   rrinit   F800   rtinit   F802   segadr   0010   segmax   0100   segmnt   FFF4   segsiz   1000   sysram   0100   sysres   0000   sysseg   0000   tfrseg   000D   tlatch   FE03   tstloc   D0F0   tstpat   99AA   txtseg   0005   uboot    0800   uboot0   081E   uboot01  083E   uboot02  082F   uboot1   084D   uboot2   0869   uisctr   FE00   useres   0001   usrseg   000B   usrvec   FFE0   vector   FFF0   xfradr   07E8   xrdl01   09BD   xread    0993   