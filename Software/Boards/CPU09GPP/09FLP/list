




                     *
                     * GPPFLPDRV, ROM code for CPU09GPP with 09FLP add-on
                     *
                     * 2021-03-05: write track, no retry. return error if drive/diskette absent
                     *
                     * 2021-04-30: minor bug fixes, different approach for WD2791
                     *
                     * 2021-08-31: correction in fseek, ready test now OK
                     *
                     * 2021-11-12: added double step, 40 track disk in 80 track drive
                     *
                     * 2021-12-04: implemented read track, flpdrvr.t is already done
                     *
                     * 2021-12-07: buffer clear read-track, ttyset to disable error check
                     *
                     *
                     * supports:  read block 128,256,512 byte size
                     *            write block 128,256,512 byte size
                     *            read track 125kBit, 250kBit, 500 kBit rate
                     *            write track 125kBit, 250 kBit, 500 kBit rate
                     *
                     *            supports 8", 5.25" and 3.5" in single /
                     *            double side and single / double / high density
                     *
                     *            runs with Interrupts disabled
                     *            almost no 63X09 code
                     *
                     *
                     * compatibillity with FLEX improved
                     *
                     *
                     *
                     *
                     *
                     *
                     *
                     *
                     *
                               opt    lis,exp   |
                               opt    nop
                     
                     *
                     *  for DEBUG program is RAM based
                     *
               E000  ROMBASE   equ    $E000
                     
               FFF0  VECTORS   equ    $FFF0
                     
                     
               0400  RAMBASE   equ    $0400     just above Dual Port Ram
               0800  BUFFER    equ    $0800     track buffer
                     
               0040  STACKSZ   equ    64        enough?
                     
               9C40  RDYWAIT   equ    40000     delay count
                     
                     * hardware dependent values
               0005  LA_DS0    equ    LA_SEL0   drive select 0
               000A  LA_DS1    equ    LA_SEL1   drive select 1
                     
                     *
                     * DPR, command exchange withe kernel
                     *
               0091  CMDMSK    equ    %10010001 command mask
               0011  CMDRSC    equ    %00010001 read sector
               0001  CMDWSC    equ    %00000001 write sector
               0091  CMDRTK    equ    %10010001 read track
               0081  CMDWTK    equ    %10000001 write track
                     *
                     *
                     
                     
                     * for a WD2793 (default) leave this at 0
                     * for a WD2791 set it to 1
               0000  WD2791    set    0
                     
               0001  MXDMSK    equ    %00000001 max drive mask 0,1
               0003  MXSTPM    equ    %00000011 max step rate mask
                     *
               0080  SBDCRC    equ    %10000000 side info, disable CRC
               0001  SBDSID    equ    %00000001 side infi, double (other) side
               0010  DBDSTP    equ    %00010000 dens info, double step
               0001  DBDDEN    equ    %00000001 dens info, doubel dens
                     *
               0015  FDSTP1    equ    %00010101 FDC TYPE 1 status mask
               0004  FDSTZR    equ    %00000100 FDC TYPE 1, track zero
                     
                     
                     
                     
                     
  0400                         org    RAMBASE
                     
  0400               lside     rmb    1         actual latch side
  0401               track     rmb    1
  0402               sector    rmb    1
  0403               latch     rmb    1         latch backup
  0404               curdrv    rmb    1         last selected drive
  0405               diserr    rmb    1         disable (read) error check
  0406               trktab    rmb    4         track numbers / drive
  040A               ltctab    rmb    4         latch settings /drive
                     *
  040E               pstep     rmb    1         debug for progress
  040F               wrkprm    rmb    2         pointer to drive info table entry
  0411               retry     rmb    1         retry count
  0412               steprt    rmb    1         step rate modifier
                     *
               0413  drvtab    equ    *
  0413               dtrack    rmb    2
  0415               ddens     rmb    2
                     
  0417                         rmb    STACKSZ
               0457  romstck   equ    *
                     
               0457  RAMEND    equ    *
                     
  0800                         org    BUFFER
  0800               trkbuf    rmb    12500     track buffer
                     
  E000                         org    ROMBASE
                     
                     *
                     * configuration constants
                     *
  E000 02            rretry    fcb    2
                     * drive 0 and 1 obey the IBM PC selects
  E001 05 0A         drvsel    fcb    LA_DS0,LA_DS1 driver select bytes
                     * drive 2 and 3 have no specific setup
  E003 04 08                   fcb    %00000100,%00001000
                     *
  E005 11 00         parstab   fcb    CMDRSC,0
  E007 E12E                    fdb    do_rdsc
  E009 01 00                   fcb    CMDWSC,0
  E00B E152                    fdb    do_wrsc
  E00D 91 00                   fcb    CMDRTK,0
  E00F E176                    fdb    do_rdtk
  E011 81 00                   fcb    CMDWTK,0
  E013 E1F6                    fdb    do_wrtk
  E015 0000 0000               fdb    0,0       end of table
                     
               000C  dens      equ    flpdpr+fltden
               000B  side      equ    flpdpr+fltsid
               0004  size      equ    flpdpr+fltsiz
               0006  xfer      equ    flpdpr+fltxfr
               0009  driv      equ    flpdpr+fldriv
               03F0  step      equ    flpdpr+flpstp
               0008  stat      equ    flpdpr+flstat
               000A  open      equ    flpdpr+flnwop
               0000  func      equ    flpdpr+flrflg
               0001  addrh     equ    flpdpr+flblkh
               0002  addrm     equ    flpdpr+flblkm
               0003  addrl     equ    flpdpr+flblkl
               03FF  tiop      equ    flpdpr+flptel
               03FE  fiop      equ    flpdpr+flpint
                     
                     *
                     * cold start
                     *
               E019  reset     equ    *
  E019 1A   50                 orcc   #$50
  E01B 10CE 0457               lds    #romstck
  E01F 86   80                 lda    #fdbasp
  E021 1F   8B                 tfr    a,dp
               0080            setdp  fdbasp
                     * NATIVE 63X09 !!
  E023 11 3D 03                fcb    $11,$3d,$03 6309
                     *
  E026 8E   0000               ldx    #flpdpr   go clear the Dual Port Ram
  E029 4F                      clra
  E02A 5F                      clrb
  E02B ED   81       01        std    0,x++
  E02D 8C   03FF               cmpx   #flpdpr+flptel
  E030 25   F9                 blo    01b
                     *
  E032 8E   0400               ldx    #RAMBASE
  E035 ED   81       02        std    0,x++
  E037 8C   0457               cmpx   #RAMEND
  E03A 25   F9                 blo    02b
                     * set default disk type
  E03C 8E   E3EE               ldx    #flpdfl
  E03F BF   040F               stx    wrkprm    set pointer
                     ****************************************************************
                     *
                     * normally the driver loops here
                     *
                     ****************************************************************
               E042  warm      equ    *
  E042 1A   50                 orcc   #$50
  E044 10CE 0457               lds    #romstck
                     *
  E048 BD   E12A     01        jsr    flpcmd    new message from main CPU
  E04B 27   FB                 beq    01b       wait
                     * load system set values
  E04D F6   03F0               ldb    step
  E050 C4   03                 andb   #MXSTPM   step bits
  E052 F7   0412               stb    steprt
                     * save previous settings for track register and latch
  E055 BD   E111               jsr    seldrv    save old setttings
  E058 D6   01                 ldb    <fo2trk
  E05A E7   84                 stb    0,x
  E05C F6   0403               ldb    latch
  E05F E7   04                 stb    4,x
                     * restore the correct setting for the current drive
  E061 F6   0009               ldb    driv      get drive  0,1
  E064 C4   01                 andb   #MXDMSK
  E066 F7   0404               stb    curdrv
  E069 BD   E111               jsr    seldrv
  E06C E6   84                 ldb    0,x
  E06E D7   01                 stb    <fo2trk
  E070 E6   04                 ldb    4,x
  E072 F7   0403               stb    latch
                     * set drive select bits
  E075 F6   0404               ldb    curdrv
  E078 8E   E001               ldx    #drvsel
  E07B 3A                      abx
  E07C F6   0403               ldb    latch
  E07F C4   F8                 andb   #$f8      leave these intact
  E081 34   04                 pshs   b
  E083 E6   84                 ldb    0,x
  E085 EA   E0                 orb    0,s+
  E087 F7   0403               stb    latch     clean higher bits
                     *
                     * update other settings
                     *
  E08A B6   E000               lda    rretry    rom setting
  E08D B7   0411               sta    retry
                     * test 5"/8"
  E090 F6   0403               ldb    latch
  E093 B6   000B               lda    side
  E096 85   40                 bita   #LA_8_5   5/8" select
  E098 27   04                 beq    setd2
  E09A CA   40                 orb    #LA_8_5
  E09C 20   02                 bra    setd3
                     *
  E09E C4   BF       setd2     andb   #255-LA_8_5
  E0A0 CA   80       setd3     orb    #$80
  E0A2 F7   0403               stb    latch
  E0A5 D7   04                 stb    <fo4lat   set latch
                     *
  E0A7 84   80                 anda   #SBDCRC   disable read error check
  E0A9 B7   0405               sta    diserr
                     *
                     * everything is set
                     *
  E0AC BD   E37B               jsr    chkrdy    see if drive is on-line
  E0AF B7   0008               sta    stat
  E0B2 27   02                 beq    03f
  E0B4 20   55                 bra    fend1
                     * if new open force restore
  E0B6 B6   000A     03        lda    open      new open?
  E0B9 27   09                 beq    04f       yes, skip forced restore
                     *
                     * retry loops here
                     *
  E0BB BD   E3AE     skretry   jsr    restore   restore drive
  E0BE 84   15                 anda   #FDSTP1
  E0C0 81   04                 cmpa   #FDSTZR   should be there
  E0C2 26   35                 bne    flerr
                     *
  E0C4 7F   000A     04        clr    open      remove flag
                     *
  E0C7 C6   01                 ldb    #1        set progress
  E0C9 F7   040E               stb    pstep
                     *
  E0CC 7F   0008               clr    stat      initialize return status
                     *
  E0CF BD   E37B               jsr    chkrdy    drive still ready?
  E0D2 4D                      tsta
  E0D3 26   24                 bne    flerr
                     *
  E0D5 BD   E3CF     06        jsr    srchpm    scan drive table
                     *
  E0D8 C6   02                 ldb    #2
  E0DA F7   040E               stb    pstep
  E0DD B6   0000               lda    func      check command for valid
  E0E0 84   91                 anda   #CMDMSK
  E0E2 8E   E005               ldx    #parstab  search function
  E0E5 A1   84       21        cmpa   0,x
  E0E7 27   0D                 beq    20f
  E0E9 30   04                 leax   4,x
  E0EB 6D   84                 tst    0,x
  E0ED 26   F6                 bne    21b
                     *
  E0EF 86   BF                 lda    #FD_ERR+63
  E0F1 B7   0008               sta    stat
  E0F4 20   15                 bra    fend1
                     *
  E0F6 AD   98 02    20        jsr    [2,x]
                     *
  E0F9 B7   0008     flerr     sta    stat
                     *
  E0FC C6   07       fend      ldb    #7
  E0FE F7   040E               stb    pstep
  E101 4D                      tsta             error
  E102 27   07                 beq    fend1
  E104 7A   0411               dec    retry
 >E107 1026 FFB0               lbne   skretry
  E10B 12            fend1     nop
  E10C 8D   0E                 bsr    flpack    tell main CPU about it
                     *
  E10E 7E   E042               jmp    warm
                     
                     *
                     * seldrv
                     *
  E111 34   04       seldrv    pshs   b
  E113 8E   0413               ldx    #drvtab
  E116 F6   0404               ldb    curdrv
  E119 3A                      abx
  E11A 35   84                 puls   b,pc
                     
                     *
                     *  write MAILBOX to other CPU I'm done
                     *
  E11C C6   08       flpack    ldb    #8
  E11E F7   040E               stb    pstep
  E121 7F   03FF               clr    tiop      acknowledge main CPU
  E124 86   FF                 lda    #$ff
  E126 B7   03FE               sta    fiop      tell him I'am done
  E129 39                      rts
                     
                     *
                     * flpcmd, test MAILBOX for new data from main CPU
                     *
  E12A B6   03FF     flpcmd    lda    tiop      command present?
  E12D 39                      rts
                     
                     *
                     * Y = fdcbase
                     *
               E12E  do_rdsc   equ    *
  E12E C6   03                 ldb    #3
  E130 F7   040E               stb    pstep
                     *
  E133 BD   E2AD               jsr    clcpos    block# -> trk/sec/sid
  E136 4D                      tsta
  E137 26   18                 bne    frder     error
                     *
  E139 C6   04                 ldb    #4
  E13B F7   040E               stb    pstep
  E13E BD   E30F               jsr    fseek
  E141 4D                      tsta
  E142 26   0D                 bne    frder
                     *
  E144 C6   05                 ldb    #5
  E146 F7   040E               stb    pstep
  E149 CE   0020               ldu    #flpdpr+flpfifo where data is to land
  E14C 86   80                 lda    #FD_SRD
  E14E BD   E259               jsr    frdblk
                     *
  E151 39            frder     rts
                     
                     *
                     * Y = fdcbase
                     *
               E152  do_wrsc   equ    *
  E152 C6   03                 ldb    #3
  E154 F7   040E               stb    pstep
                     *
  E157 BD   E2AD               jsr    clcpos    block# -> trk/sec/sid
  E15A 4D                      tsta
  E15B 26   18                 bne    fwder     error
                     *
  E15D C6   04                 ldb    #4
  E15F F7   040E               stb    pstep
  E162 BD   E30F               jsr    fseek
  E165 4D                      tsta
  E166 26   0D                 bne    fwder
                     *
  E168 C6   05                 ldb    #5
  E16A F7   040E               stb    pstep
  E16D CE   0020               ldu    #flpdpr+flpfifo where data is present
  E170 86   A0                 lda    #FD_SWR
  E172 BD   E295               jsr    fwrblk
                     *
  E175 39            fwder     rts
                     
                     *
                     * We read the designated track into buffer and transfer
                     * that back to the System
                     *
               E176  do_rdtk   equ    *
  E176 34   70                 pshs   x,y,u
                     *  clear track buffer
  E178                         ldwe   size
  E178 10B6                    fdb    $10b6
  E17A 0004                    fdb    size
                               endm
  E17C 8E   0800               ldx    #trkbuf
  E17F 6F   E2                 clr    0,-s
  E181                         tfm4   S,X
  E181 113B                    fdb    $113b
  E183 41                      fcb    S<<4|X
                               endm
  E184 32   61                 leas   1,s
                     *
  E186 86   01                 lda    #1        no retry!
  E188 B7   0411               sta    retry
  E18B C6   03                 ldb    #3
  E18D F7   040E               stb    pstep
                     *
  E190 B6   0003               lda    addrl     track address << 1 + side bit
  E193 5F                      clrb
  E194 44                      lsra             strip side bit
  E195 24   01                 bcc    08f
  E197 5C                      incb             set side select
  E198 F7   0400     08        stb    lside     read  track on other side
                     *
  E19B B7   0401               sta    track
  E19E 26   03                 bne    18f       make sure we  start at track 00
  E1A0 BD   E3AE               jsr    restore   restore if target is 0
                     *
  E1A3 86   01       18        lda    #1        set sector register
  E1A5 B7   0402               sta    sector
                     *
  E1A8 BD   E30F               jsr    fseek     should set latch
  E1AB 4D                      tsta
  E1AC 26   46                 bne    10f
                     *
                     * do actual Read Track here
                     *
  E1AE C6   04                 ldb    #4
  E1B0 F7   040E               stb    pstep
  E1B3 CE   0800               ldu    #trkbuf   do read into large buffer
  E1B6 86   E0                 lda    #FD_RTR
  E1B8 BD   E259               jsr    frdblk
  E1BB 4D                      tsta
  E1BC 27   05                 beq    20f
  E1BE 7D   0405               tst    diserr    if error and not set, abort
  E1C1 27   31                 beq    10f
                     *
                     * copy trkbuf data to DPR, first direct, next on INT's
                     *
  E1C3 BC   0004     20        cmpx   size      set size of result is smaller
  E1C6 24   03                 bhs    21f
  E1C8 BF   0004               stx    size
  E1CB C6   05       21        ldb    #5
  E1CD F7   040E               stb    pstep
  E1D0 8E   0800               ldx    #trkbuf   data source
  E1D3 FC   0006     03        ldd    xfer      is updated by kernel driver
  E1D6 10B3 0004               cmpd   size      did we enough?
  E1DA 24   17                 bhs    02f
                     *
  E1DC CE   0020               ldu    #flpdpr+flpfifo
  E1DF                         ldwi   BUFSIZ    immediate load
  E1DF 1086                    fdb    $1086
  E1E1 0200                    fdb    BUFSIZ
                               endm
  E1E3                         tfm1   X,U       data to main side
  E1E3 1138                    fdb    $1138
  E1E5 13                      fcb    X<<4|U
                               endm
  E1E6 4F                      clra
  E1E7 BD   E11C               jsr    flpack    tell him  I have it
                     *
  E1EA 0D   08       01        tst    <fo4sta   keep motor running
  E1EC BD   E12A               jsr    flpcmd    wait for him to grab it
  E1EF 27   F9                 beq    01b       postbox empty
  E1F1 20   E0                 bra    03b       loop until all
                     *
  E1F3 4F            02        clra             set no error
                     *
  E1F4 35   F0       10        puls   x,y,u,pc
                     
                     *
                     * We arrive here when the DPR contains the first BUFSIZ
                     * bytes of the track image
                     *
               E1F6  do_wrtk   equ    *
  E1F6 34   70                 pshs   x,y,u
  E1F8 8E   0800               ldx    #trkbuf
                     *
                     * copy DPR data to trkbuf
                     *
  E1FB 12            03        nop
  E1FC CE   0020               ldu    #flpdpr+flpfifo
  E1FF                         ldwi   BUFSIZ    immediate load
  E1FF 1086                    fdb    $1086
  E201 0200                    fdb    BUFSIZ
                               endm
  E203                         tfm1   U,X
  E203 1138                    fdb    $1138
  E205 31                      fcb    U<<4|X
                               endm
  E206 FC   0006               ldd    xfer      is updated by kernel driver
  E209 10B3 0004               cmpd   size      we have all
  E20D 24   0D                 bhs    02f
  E20F 4F                      clra
  E210 BD   E11C               jsr    flpack    tell hime I took it
                     *
  E213 0D   08       01        tst    <fo4sta   keep motor running
  E215 BD   E12A               jsr    flpcmd    wait for next data
  E218 27   F9                 beq    01b       postbox empty
  E21A 20   DF                 bra    03b       loop until all
                     *
                     * all data present
                     *
  E21C 12            02        nop              TRAP
  E21D 86   01                 lda    #1        no retry!
  E21F B7   0411               sta    retry
  E222 C6   03                 ldb    #3
  E224 F7   040E               stb    pstep
                     *
  E227 B6   0003               lda    addrl     track address << 1 + side bit
  E22A 5F                      clrb
  E22B 44                      lsra             strip side bit
  E22C 24   01                 bcc    08f
  E22E 5C                      incb
  E22F F7   0400     08        stb    lside     format track on other side
                     *
  E232 B7   0401               sta    track
  E235 26   03                 bne    18f       make sure we  start at track 00
  E237 BD   E3AE               jsr    restore   restore if target is 0
                     *
  E23A 86   01       18        lda    #1
  E23C B7   0402               sta    sector
                     *
  E23F C6   04                 ldb    #4
  E241 F7   040E               stb    pstep
  E244 BD   E30F               jsr    fseek
  E247 4D                      tsta
  E248 26   0D                 bne    10f
                     *
                     * restore the registers for the write
                     *
  E24A C6   05                 ldb    #5
  E24C F7   040E               stb    pstep
  E24F CE   0800               ldu    #trkbuf
  E252 86   F0                 lda    #FD_WTR
 >E254 BD   E295               jsr    fwrblk
                     *
  E257 35   F0       10        puls   x,y,u,pc
                     
                     *
                     * code routine, to read one dataset from FDC
                     * U = buffer address,
                     * Y = base address hardware
                     * A = command
                     *
                     * can read sector or track
                     * drive select, density and such alreay set up
                     * time out from INT fdc
                     *
               E259  frdblk    equ    *
  E259 34   70                 pshs   x,y,u
  E25B C6   1F                 ldb    #31       very long              create timeout
  E25D 8E   0000               ldx    #0        65536*2*25/4 cycles
                     *
  E260 97   00                 sta    <fo2cmd
                     *
  E262 1A   50       01        orcc   #$50      disable ints
  E264 20   04                 bra    03f
                     * loop here
  E266 96   03       02        lda    <fo2dat   get data
  E268 A7   C0                 sta    0,u+      transfer
                     * poll fdc for DRQ
  E26A 96   08       03        lda    <fo4sta
  E26C 48                      asla
  E26D 25   F7                 bcs    02b       DRQ
  E26F 2B   07                 bmi    90f
  E271 30   01                 leax   1,x       count up
  E273 26   F5                 bne    03b
  E275 5A                      decb             at zero dec B
  E276 26   F2                 bne    03b       if zero abort
                     * end of command
  E278 11A3 64       90        cmpu   4,s       nothing got?
  E27B 27   0D                 beq    98f       unexpected
                     * normal end of read
  E27D 96   00       97        lda    <fo2cmd   read status
  E27F EF   E4                 stu    0,s       preset X
                     *
  E281 7D   0405     95        tst    diserr
  E284 27   02                 beq    99f
  E286 84   E7                 anda   #%11100111 remove CRC/RNF error (if any)
                     *
  E288 35   F0       99        puls   x,y,u,pc  A = result status
                     
                     * timeout occurred
  E28A 86   D0       98        lda    #FD_FI0   force interrupt
  E28C 97   00                 sta    <fo2cmd
  E28E BD   E3C7               jsr    delay
  E291 86   10                 lda    #$10      not found
  E293 20   EC                 bra    95b
                     
                     *
                     * code routine, to write one dataset to the FDC
                     * U = buffer address
                     * Y = hardware base
                     * A = command
                     *
                     * drive select, density and such alreay set up
                     * time out from INT fdc
                     *
               E295  fwrblk    equ    *
  E295 34   70                 pshs   x,y,u
                     *
  E297 97   00                 sta    <fo2cmd
                     *
  E299 1A   50       01        orcc   #$50      disable ints
  E29B 20   04                 bra    03f
                     
  E29D A6   C0       02        lda    0,u+
  E29F 97   03                 sta    <fo2dat   put data
                     *
  E2A1 96   08       03        lda    <fo4sta
  E2A3 2B   F8                 bmi    02b
  E2A5 85   40                 bita   #ST_INT   INT
  E2A7 27   F8                 beq    03b
                     *
  E2A9 96   00                 lda    <fo2cmd   read status
                     *
  E2AB 35   F0       99        puls   x,y,u,pc
                     
                     *
                     * clcpos, transfer block# into track/sector/side
                     *
                     * Y = fdcbase
                     *
               E2AD  clcpos    equ    *
  E2AD 34   70                 pshs   x,y,u
  E2AF 7F   0400               clr    lside     result side of calc
  E2B2 FC   0002               ldd    addrm     block# M/L
                     *
  E2B5 BE   0004               ldx    size      check special addressing
  E2B8 8C   0100               cmpx   #256
  E2BB 27   05                 beq    21f
  E2BD 8C   0080               cmpx   #128
  E2C0 26   12                 bne    20f
                     *
                     *  absolute addressing
                     *
  E2C2 B7   0401     21        sta    track
  E2C5 F7   0402               stb    sector
  E2C8 B6   000B               lda    side      from ttyset
  E2CB 84   03                 anda   #%00000011 DS or Biased
  E2CD 27   39                 beq    88f
  E2CF 7C   0400               inc    lside     set side 1
  E2D2 20   34                 bra    88f
                     *
                     * regular 512 byte block to track/sector
                     *
  E2D4 BE   040F     20        ldx    wrkprm    fresh copy of drive params
                     *
  E2D7 7F   0401               clr    track     track = 0
                     *
  E2DA A3   03       02        subd   3,x       sec/trk
  E2DC 2B   05                 bmi    01f
                     *
  E2DE 7C   0401               inc    track     up track #
  E2E1 20   F7                 bra    02b
                     *
  E2E3 E3   03       01        addd   3,x       adjust
                     * sector in B, track# on stack
  E2E5 B6   000B               lda    side      is double sided?
  E2E8 85   03                 bita   #%00000011 DS or biased
  E2EA 27   11                 beq    05f       no
                     *
  E2EC 74   0401               lsr    track     track# / 2
  E2EF 24   0C                 bcc    05f       even track
                     * odd track, add bias
  E2F1 7C   0400               inc    lside
                     * TEST Biased here!
  E2F4 B6   000B               lda    side
  E2F7 85   02                 bita   #%00000010
  E2F9 26   02                 bne    05f       no
  E2FB EB   04                 addb   4,x       biased sector#
                     *
  E2FD 5C            05        incb             1 relative
  E2FE F7   0402               stb    sector    set sector#
                     *
  E301 B6   0401     08        lda    track
  E304 A1   02                 cmpa   2,x       test against max
  E306 22   03                 bhi    91f
                     * normal return
  E308 4F            88        clra             set OK
  E309 35   F0                 puls   x,y,u,pc
                     * errors
  E30B 86   10       91        lda    #FS_SKER  track > max
  E30D 35   F0                 puls   x,y,u,pc
                     
                     *
                     * fseek, move head to track#, set registers
                     * Y = hardware base
                     *
               E30F  fseek     equ    *
  E30F 34   70                 pshs   x,y,u
  E311 B6   0400               lda    lside
  E314 85   01                 bita   #SBDSID
  E316 27   06                 beq    lsk1
  E318                         oime   LA_SID,latch 1 = side 1
  E318 71                      fcb    $71
  E319 10                      fcb    LA_SID
  E31A 0403                    fdb    latch
                               endm
  E31C 20   04                 bra    lsk2
  E31E               lsk1      aime   !LA_SID,latch 0 = side 0
  E31E 72                      fcb    $72
  E31F EF                      fcb    !LA_SID
  E320 0403                    fdb    latch
                               endm
                     *
  E322 B6   000C     lsk2      lda    dens
  E325 85   01                 bita   #DBDDEN
  E327 26   06                 bne    lsk3
  E329                         oime   LA_SDN,latch
  E329 71                      fcb    $71
  E32A 20                      fcb    LA_SDN
  E32B 0403                    fdb    latch
                               endm
  E32D 20   04                 bra    lsk4
  E32F               lsk3      aime   !LA_SDN,latch
  E32F 72                      fcb    $72
  E330 DF                      fcb    !LA_SDN
  E331 0403                    fdb    latch
                               endm
                     *
  E333 B6   0403     lsk4      lda    latch
  E336 97   04                 sta    <fo4lat
                     *
  E338 B6   0402               lda    sector
  E33B 97   02                 sta    <fo2sec   set sector register
                     *
  E33D B6   0401               lda    track
  E340 91   01                 cmpa   <fo2trk
  E342 27   28                 beq    04f
                     *
                     * test double step function,
                     *
  E344 F6   000C               ldb    dens
  E347 C5   10                 bitb   #DBDSTP   double step
  E349 27   06                 beq    lsk10
                     * it is double step
  E34B D6   01                 ldb    <fo2trk   logical track#
  E34D 58                      aslb             *2
  E34E D7   01                 stb    <fo2trk   physical track#
  E350 48                      asla
                     *
                     * track is no the same, do SEEK
                     *
  E351 97   03       lsk10     sta    <fo2dat
  E353 86   18                 lda    #FD_SEK
  E355 BA   0412               ora    steprt    update steprate
  E358 97   00                 sta    <fo2cmd
                     *
  E35A 96   08       01        lda    <fo4sta
  E35C 85   40                 bita   #ST_INT
  E35E 27   FA                 beq    01b
                     *
                     *
                     *
  E360 F6   000C               ldb    dens
  E363 C5   10                 bitb   #%00010000 double step
  E365 27   05                 beq    04f
                     *
  E367 D6   01                 ldb    <fo2trk   physical track#
  E369 57                      asrb             /2
  E36A D7   01                 stb    <fo2trk   logical track#
                     *
                     *
                     *
  E36C 96   00       04        lda    <fo2cmd
                     
  E36E 84   D9                 anda   #!(FS_TRK0|FS_IDX|FS_HLD) remove these from status
                     * check if we need to pass write protect
  E370 F6   0000               ldb    func
  E373 C5   10                 bitb   #%00010000 command is read
  E375 27   02                 beq    02f
  E377 84   BF                 anda   #!FS_WRP
                     *
  E379 35   F0       02        puls   x,y,u,pc
                     
                     *
                     * chkrdy, check if drive is ready
                     * Y = fdcbase
                     *
  E37B C6   07       chkrdy    ldb    #7        multiply
  E37D B6   0403               lda    latch
  E380 97   04                 sta    <fo4lat
 >E382 BD   E3C7               jsr    delay
                     *
  E385 8E   7FFF     10        ldx    #$7fff    long delay
                     *
  E388 B6   0403     11        lda    latch
  E38B 97   04                 sta    <fo4lat
  E38D 96   00                 lda    <fo2cmd
  E38F 2A   0A                 bpl    12f
                     *
  E391 30   1F                 leax   -1,x      decrement counter
  E393 26   F3                 bne    11b
                     *
  E395 5A                      decb             multiply
  E396 26   ED                 bne    10b
                     *
  E398 86   80                 lda    #FS_NRDY
  E39A 39                      rts
                     *
  E39B 4F            12        clra
  E39C 39                      rts
                     
                     *
                     * trigger headload delay from outside FDC
                     * like when drive select is changed
                     *
  E39D 34   02       trghlt    pshs   a
  E39F B6   0403               lda    latch
  E3A2 84   7F                 anda   #$7f      trigger headsettling delay
  E3A4 97   04                 sta    <fo4lat
  E3A6 1E   11                 exg    x,x
  E3A8 8A   80                 ora    #$80
  E3AA 97   04                 sta    <fo4lat
  E3AC 35   82                 puls   a,pc
                     
                     *
                     * restore, set drive at track 0
                     * Y = fdcbase
                     *
  E3AE 86   08       restore   lda    #FD_RST
  E3B0 BA   0412               ora    steprt    adjust
  E3B3 97   00                 sta    <fo2cmd
  E3B5 96   08       20        lda    <fo4sta
  E3B7 0D   04                 tst    <fo4lat   ??
  E3B9 85   40                 bita   #ST_INT
  E3BB 27   F8                 beq    20b
  E3BD 96   00                 lda    <fo2cmd
  E3BF 85   64                 bita   #00000100
  E3C1 26   03                 bne    21f
  E3C3 7F   0401               clr    track     update info
  E3C6 39            21        rts
                     
                     *
                     * delay, spend some time , no registers affected
                     *
  E3C7 8D   00       delay     bsr    del1
  E3C9 8D   00       del1      bsr    del2
  E3CB 34   76       del2      pshs   d,x,y,u
  E3CD 35   F6                 puls   d,x,y,u,pc
                     
                     *
                     * srchpm, search drive param table, used for track/sector calculations
                     * Y = fdcbase
                     *
  E3CF 34   70       srchpm    pshs   x,y,u
  E3D1 8E   E3EE               ldx    #fltabl   start table
  E3D4 FC   000B               ldd    side      get ttyset/ttyget bytes
  E3D7 84   40                 anda   #%01000000 side bits 5/8" flag
  E3D9 C4   C1                 andb   #%11000001 dens bits HD,10s,DD
  E3DB 10A3 84       31        cmpd   0,x
  E3DE 27   09                 beq    30f
  E3E0 30   06                 leax   6,x       size of entry
  E3E2 6D   02                 tst    2,x
  E3E4 26   F5                 bne    31b
  E3E6 8E   E3EE               ldx    #flpdfl
                     *
  E3E9 BF   040F     30        stx    wrkprm
  E3EC 35   F0                 puls   x,y,u,pc
                     
               E3EE  fltabl    equ    *
  E3EE 00 00 4C 00   flpdfl    fcb    $00,$00,76,0,8,0 FD-XS
  E3F4 00 01 4C 00             fcb    $00,$01,76,0,16,0 FD-DX
  E3FA 40 00 4F 00             fcb    $40,$00,79,0,5,0 F5-SX
  E400 40 01 4F 00             fcb    $40,$01,79,0,9,0 F5-XD
  E406 40 41 4F 00             fcb    $40,$41,79,0,10,0 F5-XDE
  E40C 00 81 4F 00             fcb    $00,$81,79,0,18,0 F3-XD
  E412 00 C1 4F 00             fcb    $00,$c1,79,0,20,0 F3-XH
  E418 00 00 00 00             fcb    0,0,0,0,0,0
                     
                     
                     * all process registers stacked
               E41E  nmihnd    equ    *
                     
                     *
                     * signal any interrupt at location in DPR
                     *
  E41E 86   55       rtiend    lda    #$55
  E420 B7   03F8               sta    flpdpr+$03f8 give warning in DPR
  E423 3B                      rti
                     
  FFF0                         org    VECTORS
                     
  FFF0 E41E                    fdb    rtiend
  FFF2 E41E                    fdb    rtiend
  FFF4 E41E                    fdb    rtiend
  FFF6 E41E                    fdb    rtiend
  FFF8 E41E                    fdb    rtiend
  FFFA E41E                    fdb    rtiend
  FFFC E41E                    fdb    nmihnd
  FFFE E019                    fdb    reset
                     
                               end

0 Error(s) detected     3 Excessive BRANCH/JUMP(S) detected


Symbol Table:


Absolute Symbols:

A        0008   ALARMS   000A   B        0009   BADBFD   0002   BARGS    0007   
BSPCH    007F   BUFFER   0800   BUFPR    0032   BUFSIZ   0200   CBIT     0001   
CC       000A   CDBLKS   0064   CFDN     0032   CMDMSK   0091   CMDRSC   0011   
CMDRTK   0091   CMDWSC   0001   CMDWTK   0081   CNCLC    0018   CR       000D   
D        0000   DBDDEN   0001   DBDSTP   0010   DBG      0000   DBGA     0000   
DIRSIZ   000E   DP       000B   DPLCNT   000A   DPLSIZ   0009   DRVPAG   0009   
DSKADS   0003   E        000E   EARGC    0013   EBADF    0007   EBARG    000C   
EBBIG    0016   EBDCL    001A   EBDEV    0012   EBIT     0080   EBSY     0010   
ECN      0000   EDFUL    0005   EDTOF    0003   EFAULT   0002   EFLX     000B   
EINTR    001B   EIO      0001   EISDR    0014   ELOCK    001F   EMSDR    0009   
EMT2S    0008   EMTS     0004   ENBLK    000F   ENCHD    0018   ENDR     0004   
ENMNT    0011   ENOFL    0008   ENOTB    0015   ENTSK    001C   ENTTY    001D   
EOTCH    0004   EPIPE    001E   EPRM     000A   ESEEK    000D   ESOCK    0020   
ESTOF    0017   ETMFL    0006   ETMTS    0019   EXCSIZ   0008   EXDEV    000E   
F        000F   FALTS    0007   FDC      0AE9   FDNPR    0064   FDSTP1   0015   
FDSTZR   0004   FD_ERR   0080   FD_FI0   00D0   FD_MRD   0090   FD_MWR   00B0   
FD_RST   0008   FD_RTR   00E0   FD_SEK   0018   FD_SRD   0080   FD_SWR   00A0   
FD_WTR   00F0   FF       0040   FLP      0000   FS_BUSY  0001   FS_CRC   0008   
FS_DRQ   0002   FS_HLD   0020   FS_IDX   0002   FS_LOST  0004   FS_NRDY  0080   
FS_RNF   0010   FS_RWOK  00D8   FS_SKER  0010   FS_TRK0  0004   FS_WRP   0040   
GPPDBG   0001   HANGS    0001   HOLDC    001B   IDE      0001   IF       0010   
INTRC    0003   INTS     0002   IOP      0000   KILLS    0005   LA_8_5   0040   
LA_DS0   0005   LA_DS1   000A   LA_HLT   0080   LA_MOT   0008   LA_SDN   0020   
LA_SEL0  0005   LA_SEL1  000A   LA_SID   0010   LOOP     0001   MAPSIZ   000D   
MAXDRV   0001   MAXPAG   0100   MAXPAGES 0010   MAXPIP   1000   MXDMSK   0001   
MXSTPM   0003   NET      0001   NFDNPR   0050   NL       000A   NOACIA   0000   
NODEV    FFFF   NONRAM   00F8   PAGSIZ   1000   PC       0005   PIPEPR   FFFB   
PRCSIZ   0100   QUITC    001C   QUITS    0003   RAMBASE  0400   RAMDSK   0001   
RAMEND   0457   RDYWAIT  9C40   REGSIZ   0008   RESTM    0009   ROMBASE  E000   
ROMDBG   0000   S        0004   SBDCRC   0080   SBDSID   0001   SBUF     000C   
SBUFFR   C000   SIGCNT   000C   SLEPPR   FFB0   SMAPSZ   0100   SPACE    0020   
SPI      0000   STABPG   0001   STACKSZ  0040   STKOFS   0F38   ST_DRQ   0080   
ST_INT   0040   SWAPPR   0078   SYSBLK   000F   SYSLOC   0000   SYSPAG   0000   
SYSSTK   BF38   SYSTXT   0005   TABCH    0009   TERMS    000B   TIMES    0009   
TRACS    0008   TTYIPR   FFF6   TTYOPR   FFEC   U        0003   UA       0001   
UB       0002   UCC      0000   UD       0001   UIO      0000   UNFILS   0010   
UPB      0007   UPC      0005   USERBL   BF38   USERPR   FFA6   USERS    000C   
USRLOC   000B   USTKO    0E00   UX       0003   V        0007   VECTORS  FFF0   
VID      0000   W        0006   WAITPR   FFD8   WBUFPR   001E   WD2791   0000   
WMEMPR   FFFB   WPIPES   0006   X        0001   XBUF     000D   XBUFFR   D000   
XOFFC    0013   XONC     0011   Y        0002   addrh    0001   addrl    0003   
addrm    0002   chkrdy   E37B   clcpos   E2AD   curdrv   0404   ddens    0415   
del1     E3C9   del2     E3CB   delay    E3C7   dens     000C   diserr   0405   
do_rdsc  E12E   do_rdtk  E176   do_wrsc  E152   do_wrtk  E1F6   driv     0009   
drvsel   E001   drvtab   0413   dtrack   0413   fcp2io   03FD   fdbasp   0080   
fdcbas   8000   fend     E0FC   fend1    E10B   fio2cp   03FC   fiop     03FE   
flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flerr    E0F9   
flnwop   000A   flpack   E11C   flpcmd   E12A   flpdfl   E3EE   flpdpr   0000   
flpfifo  0020   flpint   03FE   flpstp   03F0   flptel   03FF   flrflg   0000   
flstat   0008   fltabl   E3EE   fltden   000C   fltsid   000B   fltsiz   0004   
fltxfr   0006   fo2cmd   8000   fo2dat   8003   fo2sec   8002   fo2trg   800C   
fo2trk   8001   fo4lat   8004   fo4sta   8008   frdblk   E259   frder    E151   
fseek    E30F   func     0000   fwder    E175   fwrblk   E295   latch    0403   
lside    0400   lsk1     E31E   lsk10    E351   lsk2     E322   lsk3     E32F   
lsk4     E333   ltctab   040A   nmihnd   E41E   open     000A   parstab  E005   
pstep    040E   reset    E019   restore  E3AE   retry    0411   romstck  0457   
rretry   E000   rtiend   E41E   sector   0402   seldrv   E111   setd2    E09E   
setd3    E0A0   side     000B   size     0004   skretry  E0BB   srchpm   E3CF   
stat     0008   step     03F0   steprt   0412   tiop     03FF   track    0401   
trghlt   E39D   trkbuf   0800   trktab   0406   warm     E042   wrkprm   040F   
xfer     0006   
