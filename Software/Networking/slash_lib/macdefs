 sttl Macro Definitions pag** This file contains all the standard macro definitions* used in the system.*FF equ %01000000  FIRQ interrupt maskIF equ %00010000  IRQ interrupt mask* register referencesD equ 0X equ 1Y equ 2U equ 3S equ 4PC equ 5W equ 6V equ 7A equ 8B equ 9CC equ 10DP equ 11E equ 14F equ 15* indexed addressing in macro'sIX equ 0IY equ 1IU equ 2IS equ 3** Set interrupt flags (I and F)*seti macro orcc #FF|IF endm** Clear interrupt flags (I and F)*clri macro andcc #!(FF|IF) endm pag** debug macro**dbugm macro output_character* lda #'&1* lbsr syspch* endm** HD6309 MACRO's*ldmd    macro        fdb     $113d        fcb     &1        endm* load W immediateldwi    macro        fdb     $1086        fdb     &1        endm* load W direct*ldwd    macro*        fdb     $1096*        fcb     &1&0xff*        endm* load W indexedldwx    macro        fdb     $10A6        doindx  &1,&2        endm* load W extended*ldwe    macro*        fdb     $10b6*        fdb     &1*        endm* load E indexedldex    macro        fdb     $11a6        doindx  &1        endmordx    macro        fdb     $10aa        doindx  &1,&2        endmdoindx  macro        if      (&1=0)        fcb     $84+(&2<<5)        else        if      (&1<16)        fcb     (&2<<5)+(&1&$0f)        else        if      (&1>-16)        fcb     (&2<<5)+($10)+(&1&$0f)        else        if      (&1<128)        fcb     $88+(&2<<5),(&1&$7f)        endif        endif        endif        endif        endm* push W on system stackpshsw   macro        fdb     $1038        endm* pull W from sytemstackpulsw   macro        fdb     $1039        endm* memory move ++,++tfm1    macro        fdb     $1138        fcb     &1<<4|&2        endm* move memory++ to locationtfm3   macro        fdb     $113a        fcb     &1<<4|&2        endm* move location to memory++tfm4   macro        fdb     $113b        fcb     &1<<4|&2        endm* logical shift left Dlsld    macro        fdb     $1048        endm* logical shift right Dlsrd    macro        fdb     $1044        endm* arithmetic shift right D*asrd    macro*        fdb     $1047*        endm* negate D*negd    macro*        fdb     $1040*        endm* ex-or registerseorr    macro        fdb     $1036        fcb     &1<<4|&2        endm* add with carry D immediateadcdi   macro        fdb     $1089        fdb     &1        endm* increment Dincd    macro        fdb     $104c        endm* decrement Ddecd    macro        fdb     $104a        endm* clear Dclrd    macro        fdb     $104f        endm* complement Dcomd    macro        fdb     $1043        endm* and D immediateanddi   macro        fdb     $1084        fdb     &1        endm* bit D immediatebitdi   macro        fdb     $1085        fdb     &1        endm** trfr, transfer registers, allow ALL registers*trfr    macro        fcb     $1f        fcb     &1<<4|&2        endm* exchange, allow ALL registersexcg    macro        fcb     $1e        fcb     &1<<4|&2        endm* add registers** addr, add reg0 + reg1 => reg1*addr    macro        fdb     $1030        fcb     &1<<4|&2        endm* subtract registerssubr    macro        fdb     $1032        fcb     &1<<4|&2        endm* extended addressing modeaime    macro        fcb     $72        fcb     &1        fdb     &2        endm* extended addressing modeoime    macro        fcb     $71        fcb     &1        fdb     &2        endm* extended addressing modeeime    macro        fcb     $75        fcb     &1        fdb     &2        endm* test immediate memory*timex   macro*        fcb     $7b*        fcb     &1*        fdb     &2*        endm* put a LED in LIGHTS onLEDON   macro        fcb     $71        fcb     &1        fdb     LIGHTS        endm* put a LED in LIGHTS offLEDOFF  macro        fcb     $72        fcb     255-&1        fdb     LIGHTS        endm