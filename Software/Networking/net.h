/* all the info for a network application */#include    <stdint.h>#define AF_UNSPEC 0#define AF_UNIX   1#define AF_INET   2#define SOCK_STREAM 1#define SOCK_DGRAM  2#define SOCK_MACRAW 3#define SOCK_IPRAW  4#define SOCK_NONBLOCK  0x0100#define SOCK_SIGPIPECLS 0x0200#define PROT_XLTEOL    0x8000  /* translate EOL, only for SOCK_STREAM */#define PROT_ICMP       1#define PROT_IGMP       2#define PROT_EGP        8#define sockaddrlen sizeof (struct sockaddr_in)/* luckily the byte order is already Big Endian */#define nothl(x) (uint32_t)(x)#define htonl(x) (uint32_t)(x)#define htons(x) (uint16_t)(x)#define ntohs(x) (uint16_t)(x)struct in_addr {uint32_t s_addr;};struct sockaddr_in {    int16_t       sin_family;    uint16_t      sin_port;    uint32_t      sin_addr;};int     socket();       /* socket(fam, type, prot) */int     connect();      /* connect(sfd, *sockaddr, sockaddlen) */int     bind();int     listen();int     accept();/* note, the flags field is absent!  */int     recvfrom();    /* recvfrom(sfdn,*buf,len,*server,*servlen); */int     sendto();      /* sendto(sfdn,*buf,len,*server,servlen);    *//* read(), write() and close() are identical as for files *//* read(sfd, *buff, len) *//* write(sfd, *buff, len) *//* close(sfd) *//* translate 4 dotted numbers into IP address */uint32_t inet_addr();/* get host from /etc/hosts */uint32_t getIPbyname();/* raw IP checksum calculation checksum(buf, len) */uint16_t checksum();void set6809(); /* set process into 68X09 CPU mode */#define INETADDR_ANY "0.0.0.0"/* for RAW sockets, only for socket 0 */#define IPPROTO_IP   0#define IPPROTO_ICMP 1#define IPPROTO_IGMP 2#define IPPROTO_GGP  3#define IPPROTO_TCP  6#define IPPROTO_PUP  12#define IPPROTO_UDP  17#define IPPROTO_IDP  22#define IPPROTO_ND   77#define IPPROTO_RAW  255struct hostent {char    *h_name;char   **h_aliases;int      h_addrtype;int      h_length;char   **h_addr_list;};