                     *                     * GPPFLPDRV, ROM code for CPU09GPP with 09FLP add-on                     *                     * 2021-03-05: write track, no retry. return error if drive/diskette absent                     *                     * 2021-04-30: minor bug fixes, different approach for WD2791                     *                     * 2021-08-31: correction in fseek, ready test now OK                     *                     * 2021-11-12: added double step, 40 track disk in 80 track drive                     *                     * 2021-12-04: implemented read track, flpdrvr.t is already done                     *                     * 2021-12-07: buffer clear read-track, ttyset to disable error check                     *                     *                     * supports:  read block 128,256,512 byte size                     *            write block 128,256,512 byte size                     *            read track 125kBit, 250kBit, 500 kBit rate                     *            write track 125kBit, 250 kBit, 500 kBit rate                     *                     *            supports 8", 5.25" and 3.5" in single /                     *            double side and single / double / high density                     *                     *            runs with Interrupts disabled                     *            almost no 63X09 code                     *                     *                     * compatibillity with FLEX improved                     *                     *                     *                     *                     *                     *                     *                     *                     *                               opt    lis,exp   |                               opt    nop                                          *                     *  for DEBUG program is RAM based                     *               E000  ROMBASE   equ    $E000                                    FFF0  VECTORS   equ    $FFF0                                                         0400  RAMBASE   equ    $0400     just above Dual Port Ram               0800  BUFFER    equ    $0800     track buffer                                    0040  STACKSZ   equ    64        enough?                                    9C40  RDYWAIT   equ    40000     delay count                                          * hardware dependent values               0005  LA_DS0    equ    LA_SEL0   drive select 0               000A  LA_DS1    equ    LA_SEL1   drive select 1                                          *                     * DPR, command exchange withe kernel                     *               0091  CMDMSK    equ    %10010001 command mask               0011  CMDRSC    equ    %00010001 read sector               0001  CMDWSC    equ    %00000001 write sector               0091  CMDRTK    equ    %10010001 read track               0081  CMDWTK    equ    %10000001 write track                     *                     *                                                               * for a WD2793 (default) leave this at 0                     * for a WD2791 set it to 1               0000  WD2791    set    0                                    0001  MXDMSK    equ    %00000001 max drive mask 0,1               0003  MXSTPM    equ    %00000011 max step rate mask                     *               0080  SBDCRC    equ    %10000000 side info, disable CRC               0001  SBDSID    equ    %00000001 side infi, double (other) side               0010  DBDSTP    equ    %00010000 dens info, double step               0001  DBDDEN    equ    %00000001 dens info, doubel dens                     *               0015  FDSTP1    equ    %00010101 FDC TYPE 1 status mask               0004  FDSTZR    equ    %00000100 FDC TYPE 1, track zero                                                                                                           0400                         org    RAMBASE                       0400               lside     rmb    1         actual latch side  0401               track     rmb    1  0402               sector    rmb    1  0403               latch     rmb    1         latch backup  0404               curdrv    rmb    1         last selected drive  0405               diserr    rmb    1         disable (read) error check  0406               trktab    rmb    4         track numbers / drive  040A               ltctab    rmb    4         latch settings /drive                     *  040E               pstep     rmb    1         debug for progress  040F               wrkprm    rmb    2         pointer to drive info table entry  0411               retry     rmb    1         retry count  0412               steprt    rmb    1         step rate modifier                     *               0413  drvtab    equ    *  0413               dtrack    rmb    2  0415               ddens     rmb    2                       0417                         rmb    STACKSZ               0457  romstck   equ    *                                    0457  RAMEND    equ    *                       0800                         org    BUFFER  0800               trkbuf    rmb    12500     track buffer                       E000                         org    ROMBASE                                          *                     * configuration constants                     *  E000 02            rretry    fcb    2  E001 05 0A         drvsel    fcb    LA_DS0,LA_DS1 driver select bytes                     *  E003 11 00         parstab   fcb    CMDRSC,0  E005 E12C                    fdb    do_rdsc  E007 01 00                   fcb    CMDWSC,0  E009 E150                    fdb    do_wrsc  E00B 91 00                   fcb    CMDRTK,0  E00D E174                    fdb    do_rdtk  E00F 81 00                   fcb    CMDWTK,0  E011 E1EC                    fdb    do_wrtk  E013 0000 0000               fdb    0,0       end of table                                    000C  dens      equ    flpdpr+fltden               000B  side      equ    flpdpr+fltsid               0004  size      equ    flpdpr+fltsiz               0009  driv      equ    flpdpr+fldriv               03F0  step      equ    flpdpr+flpstp               0008  stat      equ    flpdpr+flstat               000A  open      equ    flpdpr+flnwop               0000  func      equ    flpdpr+flrflg               0001  addrh     equ    flpdpr+flblkh               0002  addrm     equ    flpdpr+flblkm               0003  addrl     equ    flpdpr+flblkl               03FF  tiop      equ    flpdpr+flptel               03FE  fiop      equ    flpdpr+flpint                                          *                     * cold start                     *               E017  reset     equ    *  E017 1A   50                 orcc   #$50  E019 10CE 0457               lds    #romstck  E01D 86   80                 lda    #fdbasp  E01F 1F   8B                 tfr    a,dp               0080            setdp  fdbasp                     * NATIVE 63X09 !!  E021 11 3D 03                fcb    $11,$3d,$03 6309                     *  E024 8E   0000               ldx    #flpdpr   go clear the Dual Port Ram  E027 4F                      clra  E028 5F                      clrb  E029 ED   81       01        std    0,x++  E02B 8C   03FF               cmpx   #flpdpr+flptel  E02E 25   F9                 blo    01b                     *  E030 8E   0400               ldx    #RAMBASE  E033 ED   81       02        std    0,x++  E035 8C   0457               cmpx   #RAMEND  E038 25   F9                 blo    02b                     * set default disk type  E03A 8E   E3E2               ldx    #flpdfl  E03D BF   040F               stx    wrkprm    set pointer                     ****************************************************************                     *                     * normally the driver loops here                     *                     ****************************************************************               E040  warm      equ    *  E040 1A   50                 orcc   #$50  E042 10CE 0457               lds    #romstck                     *  E046 BD   E128     01        jsr    flpcmd    new message from main CPU  E049 27   FB                 beq    01b       wait                     * load system set values  E04B F6   03F0               ldb    step  E04E C4   03                 andb   #MXSTPM   step bits  E050 F7   0412               stb    steprt                     * save previous settings for track register and latch  E053 BD   E10F               jsr    seldrv    save old setttings  E056 D6   01                 ldb    <fo2trk  E058 E7   84                 stb    0,x  E05A F6   0403               ldb    latch  E05D E7   04                 stb    4,x                     * restore the correct setting for the current drive  E05F F6   0009               ldb    driv      get drive  0,1  E062 C4   01                 andb   #MXDMSK  E064 F7   0404               stb    curdrv  E067 BD   E10F               jsr    seldrv  E06A E6   84                 ldb    0,x  E06C D7   01                 stb    <fo2trk  E06E E6   04                 ldb    4,x  E070 F7   0403               stb    latch                     * set drive select bits  E073 F6   0404               ldb    curdrv  E076 8E   E001               ldx    #drvsel  E079 3A                      abx  E07A F6   0403               ldb    latch  E07D C4   F8                 andb   #$f8      leave these intact  E07F 34   04                 pshs   b  E081 E6   84                 ldb    0,x  E083 EA   E0                 orb    0,s+  E085 F7   0403               stb    latch     clean higher bits                     *                     * update other settings                     *  E088 B6   E000               lda    rretry    rom setting  E08B B7   0411               sta    retry                     * test 5"/8"  E08E F6   0403               ldb    latch  E091 B6   000B               lda    side  E094 85   40                 bita   #LA_8_5   5/8" select  E096 27   04                 beq    setd2  E098 CA   40                 orb    #LA_8_5  E09A 20   02                 bra    setd3                     *  E09C C4   BF       setd2     andb   #255-LA_8_5  E09E CA   80       setd3     orb    #$80  E0A0 F7   0403               stb    latch  E0A3 D7   04                 stb    <fo4lat   set latch                     *  E0A5 84   80                 anda   #SBDCRC   disable read error check  E0A7 B7   0405               sta    diserr                     *                     * everything is set                     *  E0AA BD   E36F               jsr    chkrdy    see if drive is on-line  E0AD B7   0008               sta    stat  E0B0 27   02                 beq    03f  E0B2 20   55                 bra    fend1                     * if new open force restore  E0B4 B6   000A     03        lda    open      new open?  E0B7 27   09                 beq    04f       yes, skip forced restore                     *                     * retry loops here                     *  E0B9 BD   E3A2     skretry   jsr    restore   restore drive  E0BC 84   15                 anda   #FDSTP1  E0BE 81   04                 cmpa   #FDSTZR   should be there  E0C0 26   35                 bne    flerr                     *  E0C2 7F   000A     04        clr    open      remove flag                     *  E0C5 C6   01                 ldb    #1        set progress  E0C7 F7   040E               stb    pstep                     *  E0CA 7F   0008               clr    stat      initialize return status                     *  E0CD BD   E36F               jsr    chkrdy    drive still ready?  E0D0 4D                      tsta  E0D1 26   24                 bne    flerr                     *  E0D3 BD   E3C3     06        jsr    srchpm    scan drive table                     *  E0D6 C6   02                 ldb    #2  E0D8 F7   040E               stb    pstep  E0DB B6   0000               lda    func      check command for valid  E0DE 84   91                 anda   #CMDMSK  E0E0 8E   E003               ldx    #parstab  search function  E0E3 A1   84       21        cmpa   0,x  E0E5 27   0D                 beq    20f  E0E7 30   04                 leax   4,x  E0E9 6D   84                 tst    0,x  E0EB 26   F6                 bne    21b                     *  E0ED 86   BF                 lda    #FD_ERR+63  E0EF B7   0008               sta    stat  E0F2 20   15                 bra    fend1                     *  E0F4 AD   98 02    20        jsr    [2,x]                     *  E0F7 B7   0008     flerr     sta    stat                     *  E0FA C6   07       fend      ldb    #7  E0FC F7   040E               stb    pstep  E0FF 4D                      tsta             error  E100 27   07                 beq    fend1  E102 7A   0411               dec    retry >E105 1026 FFB0               lbne   skretry  E109 12            fend1     nop  E10A 8D   0E                 bsr    flpack    tell main CPU about it                     *  E10C 7E   E040               jmp    warm                                          *                     * seldrv                     *  E10F 34   04       seldrv    pshs   b  E111 8E   0413               ldx    #drvtab  E114 F6   0404               ldb    curdrv  E117 3A                      abx  E118 35   84                 puls   b,pc                                          *                     *  write POSTBOX to other CPU I'm done                     *  E11A C6   08       flpack    ldb    #8  E11C F7   040E               stb    pstep  E11F 7F   03FF               clr    tiop      acknowledge main CPU  E122 86   FF                 lda    #$ff  E124 B7   03FE               sta    fiop      tell him I'am done  E127 39                      rts                                          *                     * flpcmd, test INTBOX for new data from main CPU                     *  E128 B6   03FF     flpcmd    lda    tiop      command present?  E12B 39                      rts                                          *                     * Y = fdcbase                     *               E12C  do_rdsc   equ    *  E12C C6   03                 ldb    #3  E12E F7   040E               stb    pstep                     *  E131 BD   E2A1               jsr    clcpos    block# -> trk/sec/sid  E134 4D                      tsta  E135 26   18                 bne    frder     error                     *  E137 C6   04                 ldb    #4  E139 F7   040E               stb    pstep  E13C BD   E303               jsr    fseek  E13F 4D                      tsta  E140 26   0D                 bne    frder                     *  E142 C6   05                 ldb    #5  E144 F7   040E               stb    pstep  E147 CE   0020               ldu    #flpdpr+flpfifo where data is to land  E14A 86   80                 lda    #FD_SRD  E14C BD   E24F               jsr    frdblk                     *  E14F 39            frder     rts                                          *                     * Y = fdcbase                     *               E150  do_wrsc   equ    *  E150 C6   03                 ldb    #3  E152 F7   040E               stb    pstep                     *  E155 BD   E2A1               jsr    clcpos    block# -> trk/sec/sid  E158 4D                      tsta  E159 26   18                 bne    fwder     error                     *  E15B C6   04                 ldb    #4  E15D F7   040E               stb    pstep  E160 BD   E303               jsr    fseek  E163 4D                      tsta  E164 26   0D                 bne    fwder                     *  E166 C6   05                 ldb    #5  E168 F7   040E               stb    pstep  E16B CE   0020               ldu    #flpdpr+flpfifo where data is present  E16E 86   A0                 lda    #FD_SWR  E170 BD   E289               jsr    fwrblk                     *  E173 39            fwder     rts                                          *                     * We read the designated track into buffer and transfer                     * that back to the System                     *               E174  do_rdtk   equ    *  E174 34   70                 pshs   x,y,u                     *  clear track buffer  E176                         ldwe   size  E176 10B6                    fdb    $10b6  E178 0004                    fdb    size                               endm  E17A 8E   0800               ldx    #trkbuf  E17D 6F   E2                 clr    0,-s  E17F                         tfm4   S,X  E17F 113B                    fdb    $113b  E181 41                      fcb    S<<4|X                               endm  E182 32   61                 leas   1,s                     *  E184 86   01                 lda    #1        no retry!  E186 B7   0411               sta    retry  E189 C6   03                 ldb    #3  E18B F7   040E               stb    pstep                     *  E18E B6   0003               lda    addrl     track address << 1 + side bit  E191 5F                      clrb  E192 44                      lsra             strip side bit  E193 24   01                 bcc    08f  E195 5C                      incb             set side select  E196 F7   0400     08        stb    lside     read  track on other side                     *  E199 B7   0401               sta    track  E19C 26   03                 bne    18f       make sure we  start at track 00  E19E BD   E3A2               jsr    restore   restore if target is 0                     *  E1A1 86   01       18        lda    #1        set sector register  E1A3 B7   0402               sta    sector                     *  E1A6 BD   E303               jsr    fseek     should set latch  E1A9 4D                      tsta  E1AA 26   3E                 bne    10f                     *                     * do actual Read Track here                     *  E1AC C6   04                 ldb    #4  E1AE F7   040E               stb    pstep  E1B1 CE   0800               ldu    #trkbuf   do read into large buffer  E1B4 86   E0                 lda    #FD_RTR  E1B6 BD   E24F               jsr    frdblk  E1B9 4D                      tsta  E1BA 27   05                 beq    20f  E1BC 7D   0405               tst    diserr    if error and not set, abort  E1BF 27   29                 beq    10f                     *                     * copy trkbuf data to DPR, first direct, next on INT's                     *  E1C1 C6   05       20        ldb    #5  E1C3 F7   040E               stb    pstep  E1C6 8E   0800               ldx    #trkbuf   data source  E1C9 FC   0006     03        ldd    flpdpr+fltxfr  E1CC 10B3 0004               cmpd   size      flpdpr+fltsiz   did we enough?  E1D0 24   17                 bhs    02f                     *  E1D2 CE   0020               ldu    #flpdpr+flpfifo  E1D5                         ldwi   BUFSIZ    immediate load  E1D5 1086                    fdb    $1086  E1D7 0200                    fdb    BUFSIZ                               endm  E1D9                         tfm1   X,U       data to main side  E1D9 1138                    fdb    $1138  E1DB 13                      fcb    X<<4|U                               endm  E1DC 4F                      clra  E1DD BD   E11A               jsr    flpack    tell him  I have it                     *  E1E0 0D   08       01        tst    <fo4sta   keep motor running  E1E2 BD   E128               jsr    flpcmd    wait for him to grab it  E1E5 27   F9                 beq    01b       postbox empty  E1E7 20   E0                 bra    03b       loop until all                     *  E1E9 4F            02        clra             set no error                     *  E1EA 35   F0       10        puls   x,y,u,pc                                          *                     * We arrive here when the DPR contains the first BUFSIZ                     * bytes of the track image                     *               E1EC  do_wrtk   equ    *  E1EC 34   70                 pshs   x,y,u  E1EE 8E   0800               ldx    #trkbuf                     *                     * copy DPR data to trkbuf                     *  E1F1 12            03        nop  E1F2 CE   0020               ldu    #flpdpr+flpfifo  E1F5                         ldwi   BUFSIZ    immediate load  E1F5 1086                    fdb    $1086  E1F7 0200                    fdb    BUFSIZ                               endm  E1F9                         tfm1   U,X  E1F9 1138                    fdb    $1138  E1FB 31                      fcb    U<<4|X                               endm  E1FC FC   0006               ldd    flpdpr+fltxfr  E1FF 10B3 0004               cmpd   size      we have all  E203 24   0D                 bhs    02f  E205 4F                      clra  E206 BD   E11A               jsr    flpack    tell hime I took it                     *  E209 0D   08       01        tst    <fo4sta   keep motor running  E20B BD   E128               jsr    flpcmd    wait for next data  E20E 27   F9                 beq    01b       postbox empty  E210 20   DF                 bra    03b       loop until all                     *                     * all data present                     *  E212 12            02        nop              TRAP  E213 86   01                 lda    #1        no retry!  E215 B7   0411               sta    retry  E218 C6   03                 ldb    #3  E21A F7   040E               stb    pstep                     *  E21D B6   0003               lda    addrl     track address << 1 + side bit  E220 5F                      clrb  E221 44                      lsra             strip side bit  E222 24   01                 bcc    08f  E224 5C                      incb  E225 F7   0400     08        stb    lside     format track on other side                     *  E228 B7   0401               sta    track  E22B 26   03                 bne    18f       make sure we  start at track 00  E22D BD   E3A2               jsr    restore   restore if target is 0                     *  E230 86   01       18        lda    #1  E232 B7   0402               sta    sector                     *  E235 C6   04                 ldb    #4  E237 F7   040E               stb    pstep  E23A BD   E303               jsr    fseek  E23D 4D                      tsta  E23E 26   0D                 bne    10f                     *                     * restore the registers for the write                     *  E240 C6   05                 ldb    #5  E242 F7   040E               stb    pstep  E245 CE   0800               ldu    #trkbuf  E248 86   F0                 lda    #FD_WTR >E24A BD   E289               jsr    fwrblk                     *  E24D 35   F0       10        puls   x,y,u,pc                                          *                     * code routine, to read one dataset from FDC                     * U = buffer address,                     * Y = base address hardware                     * A = command                     *                     * can read sector or track                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E24F  frdblk    equ    *  E24F 34   70                 pshs   x,y,u  E251 C6   1F                 ldb    #31       very long              create timeout  E253 8E   0000               ldx    #0        65536*2*25/4 cycles                     *  E256 97   00                 sta    <fo2cmd                     *  E258 1A   50       01        orcc   #$50      disable ints  E25A 20   04                 bra    03f                     * loop here  E25C 96   03       02        lda    <fo2dat   get data  E25E A7   C0                 sta    0,u+      transfer                     * poll fdc for DRQ  E260 96   08       03        lda    <fo4sta  E262 48                      asla  E263 25   F7                 bcs    02b       DRQ  E265 2B   07                 bmi    90f  E267 30   01                 leax   1,x       count up  E269 26   F5                 bne    03b  E26B 5A                      decb             at zero dec B  E26C 26   F2                 bne    03b       if zero abort                     * end of command  E26E 11A3 64       90        cmpu   4,s       nothing got?  E271 27   0B                 beq    98f       unexpected                     * normal end of read  E273 96   00       97        lda    <fo2cmd   read status                     *  E275 7D   0405     95        tst    diserr  E278 27   02                 beq    99f  E27A 84   E7                 anda   #%11100111 remove CRC/RNF error (if any)                     *  E27C 35   F0       99        puls   x,y,u,pc  A = result status                                          * timeout occurred  E27E 86   D0       98        lda    #FD_FI0   force interrupt  E280 97   00                 sta    <fo2cmd  E282 BD   E3BB               jsr    delay  E285 86   10                 lda    #$10      not found  E287 20   EC                 bra    95b                                          *                     * code routine, to write one dataset to the FDC                     * U = buffer address                     * Y = hardware base                     * A = command                     *                     * drive select, density and such alreay set up                     * time out from INT fdc                     *               E289  fwrblk    equ    *  E289 34   70                 pshs   x,y,u                     *  E28B 97   00                 sta    <fo2cmd                     *  E28D 1A   50       01        orcc   #$50      disable ints  E28F 20   04                 bra    03f                       E291 A6   C0       02        lda    0,u+  E293 97   03                 sta    <fo2dat   put data                     *  E295 96   08       03        lda    <fo4sta  E297 2B   F8                 bmi    02b  E299 85   40                 bita   #ST_INT   INT  E29B 27   F8                 beq    03b                     *  E29D 96   00                 lda    <fo2cmd   read status                     *  E29F 35   F0       99        puls   x,y,u,pc                                          *                     * clcpos, transfer block# into track/sector/side                     *                     * Y = fdcbase                     *               E2A1  clcpos    equ    *  E2A1 34   70                 pshs   x,y,u  E2A3 7F   0400               clr    lside     result side of calc  E2A6 FC   0002               ldd    addrm     block# M/L                     *  E2A9 BE   0004               ldx    size      check special addressing  E2AC 8C   0100               cmpx   #256  E2AF 27   05                 beq    21f  E2B1 8C   0080               cmpx   #128  E2B4 26   12                 bne    20f                     *                     *  absolute addressing                     *  E2B6 B7   0401     21        sta    track  E2B9 F7   0402               stb    sector  E2BC B6   000B               lda    side      from ttyset  E2BF 84   03                 anda   #%00000011 DS or Biased  E2C1 27   39                 beq    88f  E2C3 7C   0400               inc    lside     set side 1  E2C6 20   34                 bra    88f                     *                     * regular 512 byte block to track/sector                     *  E2C8 BE   040F     20        ldx    wrkprm    fresh copy of drive params                     *  E2CB 7F   0401               clr    track     track = 0                     *  E2CE A3   03       02        subd   3,x       sec/trk  E2D0 2B   05                 bmi    01f                     *  E2D2 7C   0401               inc    track     up track #  E2D5 20   F7                 bra    02b                     *  E2D7 E3   03       01        addd   3,x       adjust                     * sector in B, track# on stack  E2D9 B6   000B               lda    side      is double sided?  E2DC 85   03                 bita   #%00000011 DS or biased  E2DE 27   11                 beq    05f       no                     *  E2E0 74   0401               lsr    track     track# / 2  E2E3 24   0C                 bcc    05f       even track                     * odd track, add bias  E2E5 7C   0400               inc    lside                     * TEST Biased here!  E2E8 B6   000B               lda    side  E2EB 85   02                 bita   #%00000010  E2ED 26   02                 bne    05f       no  E2EF EB   04                 addb   4,x       biased sector#                     *  E2F1 5C            05        incb             1 relative  E2F2 F7   0402               stb    sector    set sector#                     *  E2F5 B6   0401     08        lda    track  E2F8 A1   02                 cmpa   2,x       test against max  E2FA 22   03                 bhi    91f                     * normal return  E2FC 4F            88        clra             set OK  E2FD 35   F0                 puls   x,y,u,pc                     * errors  E2FF 86   10       91        lda    #FS_SKER  track > max  E301 35   F0                 puls   x,y,u,pc                                          *                     * fseek, move head to track#, set registers                     * Y = hardware base                     *               E303  fseek     equ    *  E303 34   70                 pshs   x,y,u  E305 B6   0400               lda    lside  E308 85   01                 bita   #SBDSID  E30A 27   06                 beq    lsk1  E30C                         oime   LA_SID,latch 1 = side 1  E30C 71                      fcb    $71  E30D 10                      fcb    LA_SID  E30E 0403                    fdb    latch                               endm  E310 20   04                 bra    lsk2  E312               lsk1      aime   !LA_SID,latch 0 = side 0  E312 72                      fcb    $72  E313 EF                      fcb    !LA_SID  E314 0403                    fdb    latch                               endm                     *  E316 B6   000C     lsk2      lda    dens  E319 85   01                 bita   #DBDDEN  E31B 26   06                 bne    lsk3  E31D                         oime   LA_SDN,latch  E31D 71                      fcb    $71  E31E 20                      fcb    LA_SDN  E31F 0403                    fdb    latch                               endm  E321 20   04                 bra    lsk4  E323               lsk3      aime   !LA_SDN,latch  E323 72                      fcb    $72  E324 DF                      fcb    !LA_SDN  E325 0403                    fdb    latch                               endm                     *  E327 B6   0403     lsk4      lda    latch  E32A 97   04                 sta    <fo4lat                     *  E32C B6   0402               lda    sector  E32F 97   02                 sta    <fo2sec   set sector register                     *  E331 B6   0401               lda    track  E334 91   01                 cmpa   <fo2trk  E336 27   28                 beq    04f                     *                     * test double step function,                     *  E338 F6   000C               ldb    dens  E33B C5   10                 bitb   #DBDSTP   double step  E33D 27   06                 beq    lsk10                     * it is double step  E33F D6   01                 ldb    <fo2trk   logical track#  E341 58                      aslb             *2  E342 D7   01                 stb    <fo2trk   physical track#  E344 48                      asla                     *                     * track is no the same, do SEEK                     *  E345 97   03       lsk10     sta    <fo2dat  E347 86   18                 lda    #FD_SEK  E349 BA   0412               ora    steprt    update steprate  E34C 97   00                 sta    <fo2cmd                     *  E34E 96   08       01        lda    <fo4sta  E350 85   40                 bita   #ST_INT  E352 27   FA                 beq    01b                     *                     *                     *  E354 F6   000C               ldb    dens  E357 C5   10                 bitb   #%00010000 double step  E359 27   05                 beq    04f                     *  E35B D6   01                 ldb    <fo2trk   physical track#  E35D 57                      asrb             /2  E35E D7   01                 stb    <fo2trk   logical track#                     *                     *                     *  E360 96   00       04        lda    <fo2cmd                       E362 84   D9                 anda   #!(FS_TRK0|FS_IDX|FS_HLD) remove these from status                     * check if we need to pass write protect  E364 F6   0000               ldb    func  E367 C5   10                 bitb   #%00010000 command is read  E369 27   02                 beq    02f  E36B 84   BF                 anda   #!FS_WRP                     *  E36D 35   F0       02        puls   x,y,u,pc                                          *                     * chkrdy, check if drive is ready                     * Y = fdcbase                     *  E36F C6   07       chkrdy    ldb    #7        multiply  E371 B6   0403               lda    latch  E374 97   04                 sta    <fo4lat >E376 BD   E3BB               jsr    delay                     *  E379 8E   7FFF     10        ldx    #$7fff    long delay                     *  E37C B6   0403     11        lda    latch  E37F 97   04                 sta    <fo4lat  E381 96   00                 lda    <fo2cmd  E383 2A   0A                 bpl    12f                     *  E385 30   1F                 leax   -1,x      decrement counter  E387 26   F3                 bne    11b                     *  E389 5A                      decb             multiply  E38A 26   ED                 bne    10b                     *  E38C 86   80                 lda    #FS_NRDY  E38E 39                      rts                     *  E38F 4F            12        clra  E390 39                      rts                                          *                     * trigger headload delay from outside FDC                     * like when drive select is changed                     *  E391 34   02       trghlt    pshs   a  E393 B6   0403               lda    latch  E396 84   7F                 anda   #$7f      trigger headsettling delay  E398 97   04                 sta    <fo4lat  E39A 1E   11                 exg    x,x  E39C 8A   80                 ora    #$80  E39E 97   04                 sta    <fo4lat  E3A0 35   82                 puls   a,pc                                          *                     * restore, set drive at track 0                     * Y = fdcbase                     *  E3A2 86   08       restore   lda    #FD_RST  E3A4 BA   0412               ora    steprt    adjust  E3A7 97   00                 sta    <fo2cmd  E3A9 96   08       20        lda    <fo4sta  E3AB 0D   04                 tst    <fo4lat   ??  E3AD 85   40                 bita   #ST_INT  E3AF 27   F8                 beq    20b  E3B1 96   00                 lda    <fo2cmd  E3B3 85   64                 bita   #00000100  E3B5 26   03                 bne    21f  E3B7 7F   0401               clr    track     update info  E3BA 39            21        rts                                          *                     * delay, spend some time , no registers affected                     *  E3BB 8D   00       delay     bsr    del1  E3BD 8D   00       del1      bsr    del2  E3BF 34   76       del2      pshs   d,x,y,u  E3C1 35   F6                 puls   d,x,y,u,pc                                          *                     * srchpm, search drive param table, used for track/sector calculations                     * Y = fdcbase                     *  E3C3 34   70       srchpm    pshs   x,y,u  E3C5 8E   E3E2               ldx    #fltabl   start table  E3C8 FC   000B               ldd    side      get ttyset/ttyget bytes  E3CB 84   40                 anda   #%01000000 side bits 5/8" flag  E3CD C4   C1                 andb   #%11000001 dens bits HD,10s,DD  E3CF 10A3 84       31        cmpd   0,x  E3D2 27   09                 beq    30f  E3D4 30   06                 leax   6,x       size of entry  E3D6 6D   02                 tst    2,x  E3D8 26   F5                 bne    31b  E3DA 8E   E3E2               ldx    #flpdfl                     *  E3DD BF   040F     30        stx    wrkprm  E3E0 35   F0                 puls   x,y,u,pc                                    E3E2  fltabl    equ    *  E3E2 00 00 4C 00   flpdfl    fcb    $00,$00,76,0,8,0 FD-XS  E3E8 00 01 4C 00             fcb    $00,$01,76,0,16,0 FD-DX  E3EE 40 00 4F 00             fcb    $40,$00,79,0,5,0 F5-SX  E3F4 40 01 4F 00             fcb    $40,$01,79,0,9,0 F5-XD  E3FA 40 41 4F 00             fcb    $40,$41,79,0,10,0 F5-XDE  E400 00 81 4F 00             fcb    $00,$81,79,0,18,0 F3-XD  E406 00 C1 4F 00             fcb    $00,$c1,79,0,20,0 F3-XH  E40C 00 00 00 00             fcb    0,0,0,0,0,0                                                                                    * all process registers stacked               E412  nmihnd    equ    *                                          *                     * signal any interrupt at location in DPR                     *  E412 86   55       rtiend    lda    #$55  E414 B7   03F8               sta    flpdpr+$03f8 give warning in DPR  E417 3B                      rti                       FFF0                         org    VECTORS                       FFF0 E412                    fdb    rtiend  FFF2 E412                    fdb    rtiend  FFF4 E412                    fdb    rtiend  FFF6 E412                    fdb    rtiend  FFF8 E412                    fdb    rtiend  FFFA E412                    fdb    rtiend  FFFC E412                    fdb    nmihnd  FFFE E017                    fdb    reset                                                    end0 Error(s) detected     3 Excessive BRANCH/JUMP(S) detectedSymbol Table:Absolute Symbols:A        0008   ALARMS   000A   B        0009   BARGS    0007   BSPCH    007F   BUFFER   0800   BUFPR    0032   BUFSIZ   0200   CBIT     0001   CC       000A   CDBLKS   0064   CFDN     0032   CMDMSK   0091   CMDRSC   0011   CMDRTK   0091   CMDWSC   0001   CMDWTK   0081   CNCLC    0018   CR       000D   D        0000   DBDDEN   0001   DBDSTP   0010   DBG      0000   DBGA     0000   DIRSIZ   000E   DP       000B   DPLCNT   000A   DPLSIZ   0009   DRVPAG   0009   DSKADS   0003   E        000E   EARGC    0013   EBADF    0007   EBARG    000C   EBBIG    0016   EBDCL    001A   EBDEV    0012   EBIT     0080   EBSY     0010   ECN      0000   EDFUL    0005   EDTOF    0003   EFAULT   0002   EFLX     000B   EINTR    001B   EIO      0001   EISDR    0014   ELOCK    001F   EMSDR    0009   EMT2S    0008   EMTS     0004   ENBLK    000F   ENCHD    0018   ENDR     0004   ENMNT    0011   ENOFL    0008   ENOTB    0015   ENTSK    001C   ENTTY    001D   EOTCH    0004   EPIPE    001E   EPRM     000A   ESEEK    000D   ESTOF    0017   ETMFL    0006   ETMTS    0019   EXCSIZ   0008   EXDEV    000E   F        000F   FALTS    0007   FDC      0AE9   FDNPR    0064   FDSTP1   0015   FDSTZR   0004   FD_ERR   0080   FD_FI0   00D0   FD_MRD   0090   FD_MWR   00B0   FD_RST   0008   FD_RTR   00E0   FD_SEK   0018   FD_SRD   0080   FD_SWR   00A0   FD_WTR   00F0   FF       0040   FLP      0000   FS_BUSY  0001   FS_CRC   0008   FS_DRQ   0002   FS_HLD   0020   FS_IDX   0002   FS_LOST  0004   FS_NRDY  0080   FS_RNF   0010   FS_RWOK  00D8   FS_SKER  0010   FS_TRK0  0004   FS_WRP   0040   GPP      0000   GPPDBG   0000   HANGS    0001   HOLDC    001B   IDE      0001   IF       0010   INTRC    0003   INTS     0002   IOP      0000   KILLS    0005   LA_8_5   0040   LA_DS0   0005   LA_DS1   000A   LA_HLT   0080   LA_MOT   0008   LA_SDN   0020   LA_SEL0  0005   LA_SEL1  000A   LA_SID   0010   LOOP     0000   MAPSIZ   000D   MAXDRV   0001   MAXPAG   0100   MAXPAGES 0010   MAXPIP   1000   MXDMSK   0001   MXSTPM   0003   NET      0000   NFDNPR   0050   NL       000A   NOACIA   0000   NODEV    FFFF   NONRAM   00F8   PAGSIZ   1000   PC       0005   PIPEPR   FFFB   PRCSIZ   0100   QUITC    001C   QUITS    0003   RAMBASE  0400   RAMEND   0457   RDYWAIT  9C40   REGSIZ   0008   RESTM    0009   ROMBASE  E000   ROMDBG   0000   S        0004   SBDCRC   0080   SBDSID   0001   SBUF     000C   SBUFFR   C000   SIGCNT   000C   SLEPPR   FFB0   SMAPSZ   0100   SPACE    0020   SPI      0000   STABPG   0001   STACKSZ  0040   STKOFS   0F38   ST_DRQ   0080   ST_INT   0040   SWAPPR   0078   SYSBLK   000F   SYSLOC   0000   SYSPAG   0000   SYSSTK   BF38   SYSTXT   0005   TABCH    0009   TIMES    0009   TRACS    0008   TTYIPR   FFF6   TTYOPR   FFEC   U        0003   UA       0001   UB       0002   UCC      0000   UD       0001   UIO      0000   UNFILS   0010   UPB      0007   UPC      0005   USERBL   BF38   USERPR   FFA6   USRLOC   000B   USTKO    0E00   UX       0003   V        0007   VECTORS  FFF0   W        0006   WAITPR   FFD8   WBUFPR   001E   WD2791   0000   WMEMPR   FFFB   WPIPES   0006   X        0001   XBUF     000D   XBUFFR   D000   XOFFC    0013   XONC     0011   Y        0002   addrh    0001   addrl    0003   addrm    0002   chkrdy   E36F   clcpos   E2A1   curdrv   0404   ddens    0415   del1     E3BD   del2     E3BF   delay    E3BB   dens     000C   diserr   0405   do_rdsc  E12C   do_rdtk  E174   do_wrsc  E150   do_wrtk  E1EC   driv     0009   drvsel   E001   drvtab   0413   dtrack   0413   fcp2io   03FD   fdbasp   0080   fdcbas   8000   fend     E0FA   fend1    E109   fio2cp   03FC   fiop     03FE   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flerr    E0F7   flnwop   000A   flpack   E11A   flpcmd   E128   flpdfl   E3E2   flpdpr   0000   flpfifo  0020   flpint   03FE   flpstp   03F0   flptel   03FF   flrflg   0000   flstat   0008   fltabl   E3E2   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   fo2cmd   8000   fo2dat   8003   fo2sec   8002   fo2trg   800C   fo2trk   8001   fo4lat   8004   fo4sta   8008   frdblk   E24F   frder    E14F   fseek    E303   func     0000   fwder    E173   fwrblk   E289   latch    0403   lside    0400   lsk1     E312   lsk10    E345   lsk2     E316   lsk3     E323   lsk4     E327   ltctab   040A   nmihnd   E412   open     000A   parstab  E003   pstep    040E   reset    E017   restore  E3A2   retry    0411   romstck  0457   rretry   E000   rtiend   E412   sector   0402   seldrv   E10F   setd2    E09C   setd3    E09E   side     000B   size     0004   skretry  E0B9   srchpm   E3C3   stat     0008   step     03F0   steprt   0412   tiop     03FF   track    0401   trghlt   E391   trkbuf   0800   trktab   0406   warm     E040   wrkprm   040F   