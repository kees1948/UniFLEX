          lib     ../mach_ecn/environment.h          if      (ECN=1)          opt     nol          lib     ../include/macdefs.h          lib     ../include/sysdefs.h          lib     ../include/fio.h          lib     ../include/fio_codes.h          lib     ../include/ecn_dev.h          lib     ../include/bfhdr.h        data          opt     lis          sttl    ECN        Interface          pag          data          global  ecn_open,ecn_close,ecn_write,ecn_read,ecn_spclecnrdb  rzb     HDRSIZecnwrb  rzb     HDRSIZ*** ecn_open - Open a network connection*   D = Device #*ecn_open  pshs    d,x,y,u          jsr     ecn_fdv          pshs    d,y,u   IOP parms          bcs     14f*05        ldb     #O_OPEN    send "open device" request          jsr     ecn_msg          cmpb    #E_SYSBSY  if ECN saturated, try again          bne     10f*          jsr     p_ecnbsy  print message          bra     05b*10        tstb          bpl     15f*14        lda     #EBDEV          sta     uerror*15        puls    d,y,u*          puls    d,x,y,u,pc** ecn_close - Close a network connection*ecn_close pshs    d,x,y,u          jsr     ecn_fdv          bcs     99f          pshs    d,u,y*00        ldb     #O_CLOSE   send "close device" request          jsr     ecn_msg          cmpb    #E_SYSBSY  if IOP saturated, try again          bne     10f*          jsr     p_ecnbsy  print message          bra     00b*90        puls    d,u,y*99        puls    d,x,y,u,pc** ecn_write - Write data to the network*ecn_write pshs    d,x,y,u*          jsr     ecn_fdv          bcs     99f          pshs    d,y,u     dev, ECN0, dev*          ldy     #ecnrdb    buffer header          jsr     blkgtb     get device buffer          ldd     6,s          jsr     ecncn      configure buffer , check things          tfr     y,x        save bufhdr          ldy     2,s        ECN0          tst     uerror          beq     00f*          jsr     blkfrb     release buffer          bra     80f        error exit*00        ldb     #O_RQWR    send "request write data" request          jsr     ecn_msg    all registers preserved          cmpb    #E_IOERR   I/O Error?          beq     80f*05        jsr     get_F_S    allocate FIFO and a transaction slot*10        pshs    a,x,y,u    save registers          ldd     bfxfc,x    transfer          trfr    D,W          jsr     mapbpt     user data from user mem to          ldu     fio_dba,y  fifo          leau    fifo,u          tfm1    X,U          puls    a,x,y,u    restore registers*25        ldb     #O_WRITE          jsr     ecn_msg          cmpb    #E_SYSBSY          beq     25b*          jsr     FIFO_unlock release interlock          bra     90f        continue*80        lda     #EIO       some sort of I/O error          sta     uerror*90        puls    d,u,y*99        puls    d,x,y,u,pc** ecn_read, read data from the network*ecn_read  pshs    d,x,y,u*          jsr     ecn_fdv          bcs     99f          pshs    d,y,u      ECN parameters*          ldy     #ecnrdb    buffer header          jsr     blkgtb     get device buffer          ldd     6,s          jsr     ecncn      configure buffer , check things          tfr     y,x        save bufhdr          ldy     2,s        ECN0          tst     uerror          beq     00f*          jsr     blkfrb     release buffer          bra     80f        error wexit*00        ldb     #O_RQRD    inform IOP we need data          jsr     ecn_msg*          jsr     get_F_S    allocate FIFO          ldb     #O_SEND          jsr     ecn_msg*10        pshs    a,x,y,u    save registers          ldd     bfxfc,x    transfer count          trfr    D,W          jsr     mapbpt     user data from user mem to          ldu     fio_dba,y  fifo          leau    fifo,u          tfm1    U,X          puls    a,x,y,u    restore registers*          jsr     FIFO_unlock & release it to world          bra     90f*80        lda     #EIO          sta     uerror*90        puls    d,y,u      clean up stack*99        puls    d,x,y,u,pc** the transfer 6 bytes are used for ttyset/ttyget* iop_spcl - Perform TTYSET/TTYGET for an ECN* D = maj/min* X - =0 if doing ttyset*    <>0 if ttyget*ecn_spcl  pshs    d,x,y,u          lbsr    ecn_fdv    # on return Y=IOP0, U=mami, d=mami 0 rel          bcs     99f        jump if error00        pshs    d,y,u      save registers  D has 0 relative device          jsr     get_F_S    allocate FIFO and a transaction slot*          ldx     6+2,s      get ttyset/get parameter          cmpx    #0         ttyset?          bne     50f        no - do ttyget* SET          lda     #6         move ttyset data into FIFO          ldx     #usarg0*10        ldb     ,x+        move data          jsr     FIFO_put   into FIFO          deca          bne     10b*10        ldb     #O_TTYS    send "ttyset" request          jsr     ecn_msg          bra     90f        exit* GET50        ldb     #O_TTYG    send "ttyget" request          jsr     ecn_msg*          lda     #660        jsr     FIFO_get          stb     0,x+          deca          bne     60b*90        jsr     FIFO_unlock release FIFO buffer          puls    d,u,y      clean up stack*99        puls    d,x,y,u,pc** ecniop_fdv - Find device info for ECN*    D - device #*    jsr iop_fdv*    B - device # (0..N)*    U - Sequence #/Terminal #*    Y - FIO interlock*    <Carry> if illegal device #*ecn_fdv   pshs    d          save device #          ldy     #ECN0          cmpb    #MAXECN          bhs     98f          stb     1,s        put corrected value 0 relative!          ldu     0,s        get device code          clc     no         error99        puls    d,pc       return*98        sec                error          puls    d,pc** ecn, configure buffers header*ecncn   equ     *        std     bfdvn,y        ldd     uicnt        beq     ecnce1        pshs    y        ldy     #ECN0        cmpd    fio_fsz,y        puls    y*!!*    cmpd    #ECNFSZ      max allowed        bhs     ecnce1        std     bfxfc,y        ldd     uistrt        std     bfadr,y        jsr     mapupg        std     bfxadr,y* check if whole buffer remains within one page* whether the buffer is big or small        ldd     bfadr,y        anda    #%00001111      round to 4K        addd    uicnt        bita    #%11110000      overflow        bne     ecnce1        rts*ecnce1  lda     #EBARG        sta     uerror        rts*p_ecnbsy equ    *        nop        rts*        else        data        nop         endif         end