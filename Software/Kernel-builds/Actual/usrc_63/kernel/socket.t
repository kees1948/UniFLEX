                lib     environment.h                opt     nol                if      (NET=1)                lib     ../include/wzsock.h                lib     ../include/sockerr.h                opt     lis                data                sttl    "socket interface"                name    sockets***                global  skopen,skbind,skacpt,skrecv,sksend,sklist,skconn                global  sockerr***************************************************************** TCP and UDP* open a socket, socket(fam, type, proto)*skopen          equ     *                jsr     getfil          allocate a file                stx     -2,s            cmpx #0                beq     11f             none?* X holds file struct                lbsr    wzsock          find a free wz socket                tst     uerror                bne     22f             Y=wzsock array* U holds address of corresponding wzsock                ldd     usarg0                std     wzfaml,u        AF_                ldd     usarg1                std     wztype,u        SOCK_                ldd     usarg2                std     wzprot,u        IPPROTO_                lda     #%00001011      OFSOCK + OFREAD + OFWRITE                sta     ofmode,x                stu     ofnodp,x        pointer to socket data* now open the wz socket*****************************************************                jsr     wskop          open the socket*****************************************************                bra     21f             D = socket file#14              ldb     #SESKNTF        all sockets in use/not found                bra     21f12              ldb     #SESKOPT                bra     21f11              ldb     #SESKNUM***************************************************************** sockerr, places B as hibyte in error return and lowbyte* is SOCKET ERROR (uerror)*21skerxt          jsr     sockerr22              rts***************************************************************** TCP* connect, connect(sk, *servaddr, addrlen)*skconn          equ     *                ldd     urglst+UD       is reference                jsr     sockval         validate                beq     11b* U=wzsock arry, X = file                ldd     usarg1          length                clra                rorb                cmpd    #4              fam +port +address (words)                bne     12b                ldd     usarg0          pointer to sockaddr* set DESTINATION port                jsr     skgadr          check arguments                bne     skerxt                ldd     wzuprt,u        from temp                std     wzdprt,u        dev receiving* and do the connect*****************************************************                jsr     wskcn           connect*****************************************************                rts***************************************************************** TCP and UDP* bind a socket to an address, bind(sk, *address, addrlen)*skbind          equ     *                ldd     urglst+UD       is reference                jsr     sockval         validate                lbeq     11b* U=wzsock arry, X = file                ldd     usarg1          length                clra                rorb                cmpd    #4              fam + port + address                bne     12b                ldd     usarg0          pointer to sockaddr* set SOURCE (server) DESTINATION (client) port                jsr     skgadr          check arguments                bne     skerxt                ldd     wzuprt,u        temp port                std     wzsprt,u        dev sending******************************************************                jsr     wskbi           check bind conditions*****************************************************                ldd     #0                std     urglst+UA       set return                rts***************************************************************** skgadr, get and check address info* U=wzsock*skgadr          pshx                tfr     d,x             pointer to struct                jsr     gtuwrd                anda    #$0f            strip flag bits                cmpd    wzfaml,u                bne     01f             not open in right mode*                leax    2,x                jsr     gtuwrd                cmpd    #1023           system ports?                bhi     02f                pshs    d                jsr     tstsu           super user?                puls    d                bne     03f02              std     wzuprt,u        temp port*                leax    2,x                jsr     gtuwrd                std     wzipad,u        destination IP                leax    2,x                jsr     gtuwrd                std     wzipad+2,u                clrb05              puls    x,pc*01              ldb     #SESKMOD                bra     05b03              ldb     #SESKARG                bra     05b***************************************************************** TCP* listen to a socket, listen(sk, backlog)*sklist          equ     *                ldd     urglst+UD       is reference                jsr     sockval         validate                lbeq     11b* U=wzsock arry, X = file*****************************************************                jsr     wskli           set listen, backlog is always 1*****************************************************                std     urglst+UA       set return                rts***************************************************************** TCP* accept a connction, accept(sk, *peer, *addrlen)* on return new socket descriptor in D*skacpt          equ     *                ldd     urglst+UD       is reference                jsr     sockval         validate                lbeq    11b* U=wzsock arry, X = file* TODO: deliver peer connect data back*****************************************************                jsr     wskac*****************************************************                std     urglst+UA       set return                ldd     usarg0                jsr     skapra          return address                ldx     usarg1                ldd     #8                jsr     ptuwrd                rts***************************************************************** UDP* rcvfrom data from socket, recv(sk, buff, len, *sockaddr, *sockadlen)*skrecv          equ     *                ldd     urglst+UD       reference                jsr     sockval         U = wzsock                lbeq    11b* U=wzsock array, X = file                ldd     usarg2          pointer to sockaddr                jsr     skgadr* set SOURCE port here                ldd     usarg0                std     uistrt          set IO                ldd     usarg1                std     uicnt          set IO*                addd    uistrt                cmpd    #$FE00          max mem                bhs     01f*****************************************************                jsr     wskrecv         do call****************************************************** check for struct for return address                ldd     usarg2          pointer for address                jsr     skupra                ldx     usarg3          set *addrlen                ldd     #8                jsr     ptuwrd*                ldd     usarg1                subd    uicnt                std     urglst+UD       set return value                rts01              lda     #EBARG                sta     uerror                rts***************************************************************** UDP* sendto data to socket, send(sk, buff, len, *sockaddr, sockadlen)*sksend          equ     *                ldd     urglst+UD        pointer                jsr     sockval         U = wzsock                lbeq    11b* U=wzsock array, X = file                ldd     usarg2* set DESTINATION port here                jsr     skgadr                lbne    skerxt                ldd     usarg3                cmpd    #8                lbne    skerxt*                ldd     wzuprt,u        temp port                std     wzdprt,u        dev sending*                ldd     usarg0                std     uistrt          set IO                ldd     usarg1                std     uicnt          set IO*                addd    uistrt                cmpd    #$FE00          max mem                bhs     01f******************************************************                jsr     wsksnd          do call******************************************************                ldd     usarg1          TODO: implement second address struct                subd    uicnt                std     urglst+UD       set return value                rts01              lda     #EBARG                sta     uerror                rts** update return address sockaddr  ACCEPT*skapra          pshs    x                tfr     d,x             pointer*                leax    2,x             senders port                ldd     wzdprt,u        dev sending                jsr     ptuwrd                leax    2,x                ldd     wzipad,u                jsr     ptuwrd                leax    2,x                ldd     wzipad+2,u                jsr     ptuwrd02              puls    x,pc** update return address sockaddr UDP*skupra          pshs    x                tfr     d,x             pointer*                leax    2,x             senders port                ldd     wzuprt,u                jsr     ptuwrd                leax    2,x                ldd     wzuipa,u                jsr     ptuwrd                leax    2,x                ldd     wzuipa+2,u                jsr     ptuwrd02              puls    x,pc***************************************************************** sockval, validate socket, NZ if valid* on return U is wzsock*sockval         jsr     getdes          get file                ldb     #OFSOCK                ldu     ofnodp,x        'fdn'  here wzsock                bitb    ofmode,x                rts***************************************************************** sockerr, post socket error, only if A # 0*sockerr         tstb                beq     01f                stb     uskerr                ldb     #ESOCK                stb     uerror01              rts                endif