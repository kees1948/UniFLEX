SWTPc      Intelligent I/O Proce     06:13:44  Jan 29, 2023   Page    1Hardware   Definitions                                                                  0001  IOP       set    1               0000  UIO       set    0               0000  NET       set    0                                          *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100               0F3F  DEBUG_CONTROL set %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism               0000  DO_IXON   set    0         Include Input XON/XOFF Handshaking                                          * Character Constants                                    0003  INTRC     equ    $03       DEL character               0004  EOTCH     equ    $04       EOT character               007F  BSPCH     equ    $7f       back space character               0009  TABCH     equ    $09       tab character               000A  NL        equ    $0A       Line Feed               000D  CR        equ    $0D       Carriage Return               0010  DLE       equ    $10       Data Link Escape (DLE)               0013  XOFFC     equ    $13       XOFF character               0011  XONC      equ    $11       XON character               0018  CNCLC     equ    $18       line cancel char               001B  HOLDC     equ    $1B       ESC - suspend output               001C  QUITC     equ    $1C       FS character               0020  SPACE     equ    $20       space character                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFF6  TTYIPR    equ    -10       Waiting for terminal input               FFEC  TTYOPR    equ    -20       Waiting for terminal output - in ttywrtSWTPc      Intelligent I/O Proce     06:13:45  Jan 29, 2023   Page    2Hardware   Definitions                                             FFE2  TTYSPR    equ    -30       Waiting for space in output Q - in req_write               FFDD  TTYLOCK   equ    -35       Waiting for access to TTY table               FFD8  TIQPRI    equ    -40       Waiting for a terminal interrupt to process                     *FIOPRI    equ     -50        Waiting for the FIO               FFC4  CLOCKPR   equ    -60       Waiting for a clock tick                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)                                          * -- Configuration constants                                    000A  MAX_TI    equ    10        # Queued terminal interrupts               000C  MAX_TTY   equ    12        # terminal devices (3 CPU09SR$ boards)               0000  MAX_PPR   equ    0         # printer devices               0000  MAX_NEC   equ    0         # NEC printers               007C  MAX_CL    equ    124       upper limit on # CLISTS               0400  MAX_OB    equ    8*128     upper limit on output buffer size               0120  MIN_OB    equ    (2*128)+32 lower limit on output buffer size               0028  MAX_TSK   equ    40        52 upper limit on # of tasks               0020  MIN_TSK   equ    32        lower limit on # of tasks                     *               000D  MAX_DEV   equ    MAX_TTY+MAX_PPR+MAX_NEC+1 (Includes TOD clock)                     *               0100  PRCSIZ    equ    256               00FE  CHRLIM    equ    PRCSIZ-2  max chars in buffer                     SWTPc      Intelligent I/O Proce     06:13:45  Jan 29, 2023   Page    3Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     06:13:45  Jan 29, 2023   Page    4Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     06:13:45  Jan 29, 2023   Page    5Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     06:13:46  Jan 29, 2023   Page    6Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     *negd    macro                     *        fdb     $1040                     *        endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     06:13:46  Jan 29, 2023   Page    7Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     06:13:46  Jan 29, 2023   Page    8Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     06:13:46  Jan 29, 2023   Page    9Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device                     *                       0000                         org    $0000  0000                         rmb    2         0  0002               D_OPEN    rmb    2         1  0004               D_CLOSE   rmb    2         2  0006               D_RQWR    rmb    2         3  0008               D_WRITE   rmb    2         4  000A               D_RQRD    rmb    2         5  000C               D_SEND    rmb    2         6  000E               D_INTRPT  rmb    2         7  0010                         rmb    2  0012                         rmb    2  0014               D_GETD    rmb    2         A  0016               D_SETD    rmb    2         B  0018                         rmb    2         C  001A               D_TTYS    rmb    2         D  001C               D_TTYG    rmb    2         E  001E               D_WRC     rmb    2         F  0020               D_inthan  rmb    2         10 Interrupt poller/handler  0022               D_init    rmb    2         11 Device initialization  0024               D_test    rmb    2         12 Test for device present                     *  0026               D_END     rmb    0         End of common handlers                                          *                     * TTY Specific device routinesSWTPc      Intelligent I/O Proce     06:13:47  Jan 29, 2023   Page   10Device     Table Structure                                               *  0026                         org    D_END  0026               D_ttconf  rmb    2  0028               D_ttputc  rmb    2  002A               D_ttgetc  rmb    2  002C               D_ttenxr  rmb    2  002E               D_ttdisx  rmb    2  0030               D_ttenr   rmb    2  0032               D_ttenx   rmb    2  0034               D_ttenno  rmb    2  0036               D_ttxbsy  rmb    2  0038               D_tttstx  rmb    2  003A               D_ttiscts rmb    2  003C               D_tttstr  rmb    2  003E               D_tttstb  rmb    2  0040               D_tttsts  rmb    2  0042               D_tttstc  rmb    2  0044               D_tttstd  rmb    2  0046               D_tttste  rmb    2  0048               D_ttend   rmb    2  004A               D_ttwcts  rmb    2  004C               D_ttwdcd  rmb    2                     SWTPc      Intelligent I/O Proce     06:13:47  Jan 29, 2023   Page   11History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     06:13:47  Jan 29, 2023   Page   12IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0100  RAMorg    equ    $0100     28K of RAM - Thru $6FFF               6FFF  RAMend    equ    $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7F00  RAMscrend equ    $7F00               7FFF  ROMstack  equ    $7FFF     High end of ROM Stack               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, up to 6 IO boards                     *               8000  SYS_ACIA  equ    $8000     first ACIA in first slot               0003  SR4_SLOTS equ    3         Number of Physical CPU09SR4 I/O slots               8000  BASE_SLOT equ    $8000     Base address for I/O slots               0010  NEXT_SLOT equ    $0010     Offest between slots                                          * clock hardware               8070  CLOCK     equ    $8070     hardware clock, status and control               8071  CLOCKI    equ    $8071     interrupt resetSWTPc      Intelligent I/O Proce     06:13:47  Jan 29, 2023   Page   13IOP        Memory Layout                                                                      *                     * Clist Structure                     *                     * The clist structure is the head of a linked list of                     * characters used for i/o.  A head and tail pointer                     * are kept, as well as a character count of active                     * characters on the queue.                     *                                          * struct clist                       0000                         org    0                       0000               clcnt     rmb    1         character count  0001               clfst     rmb    2         head character pointer  0003               cllst     rmb    2         tail character pointer                     *               0005  QH_SIZE   equ    *         Size of Queue Header                                                               *                     * Clist Buffer                     *                     * The characters for i/o are placed in buffers as                     * needed.  Each buffer contains 32 bytes, the first                     * two contain a chain pointer, the next 30 hold                     * the actual characters.                     *                       0000                         org    0                                    0020  CBSIZE    equ    32  0000               cbstrt    rmb    2  0002               cbchrs    rmb    CBSIZE-2SWTPc      Intelligent I/O Proce     06:13:47  Jan 29, 2023   Page   14Output     Queue Structure                                                                    *                     * This is the definition of the output queue used                     * to buffer characters going to a terminal.  It is                     * different from the "clist" mechanism for efficiency                     * concerns.                     *                       0000                         org    0  0000               oq_count  rmb    2         Number of characters in Q  0002               oq_buf    rmb    2         Start of Q buffer  0004               oq_put    rmb    2         Address of next character to insert  0006               oq_get    rmb    2         Address of next character to consume  0008               oq_end    rmb    2         Limiting address of Q                     *  000A               OQH_SIZE  rmb    0         Size of output Queue headerTask       Structure                 06:13:47  Jan 29, 2023   Page   15Output     Queue Structure                                               *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    008A  USTSIZ    equ    138       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Terminal task is servicing                     *  000F               usp       rmb    2         Saved User Stack Pointer  0011               umark0    rmb    2         Stack Frame Markers  0013               umark1    rmb    2  0015                         rmb    USTSIZ    space for per/process stack                                    009F  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system taskTask       Structure                 06:13:48  Jan 29, 2023   Page   16TTY        Structure                                                                          *                     * TTY Structure                     *                     * A tty structure is required for each character type                     * i/o device used for standard terminal i/o.                     *                                          * struct tty                       0000                         org    0                       0000               tqin      rmb    2         pointer to in q clist str  0002               tqproc    rmb    2         pointer to proccessed q clist str  0004               tqout     rmb    2         pointer to out q clist str  0006               taddr     rmb    2         device address  0008               tflags    rmb    1         mode flags  0009               tdelay    rmb    1         time out definitions  000A               tdevic    rmb    2         device name  000C               ttask     rmb    2         task ID  000E               tdel      rmb    1         raw delimiter count  000F               tcolm     rmb    1         printing column  0010               tbksp     rmb    1         back space character  0011               tcncl     rmb    1         line cancel character  0012               tbaud     rmb    1         device baud rates  0013               tbaud2    rmb    1         actual baud rate (for baud rate generator)  0014               tstate    rmb    1         internal state  0015               tstate2   rmb    1         additional states  0016               tstate3   rmb    1         states of CTS,DCD  0017               tlock     rmb    1         structure lock  0018               tsold     rmb    2         amount of output queue already "sold"  001A               tregs     rmb    8         copy of device registers (for 8274)                                    0022  TTYSIZ    equ    *                                                               * modes                                    0001  RAW       equ    %00000001 raw or cooked mode               0002  ECHO      equ    %00000010 echo characters               0004  XTABS     equ    %00000100 expand tabs               0008  LCASE     equ    %00001000 map to lower case               0010  CRMOD     equ    %00010000 map NL to CR & LF               0020  BSECH     equ    %00100000 backspace echo flag               0040  SCHR      equ    %01000000 single character input               0080  CNTRL     equ    %10000000 ignore control characters                                          * internal states                                    0001  TIMOUT    equ    %00000001 timeout in progress               0002  HOLD      equ    %00000010 output suspended               0004  TOPEN     equ    %00000100 terminal has been openedTask       Structure                 06:13:48  Jan 29, 2023   Page   17TTY        Structure                                               0008  TRANSPNT  equ    %00001000 Transparent mode               0010  IXONXOF   equ    %00010000 Use XON/XOFF to control input               0010  TOPWOC    equ    %00010000 Device opened without carrier present               0020  XANY      equ    %00100000 Allow any character to break HOLD               0040  XONXOF    equ    %01000000 XON/XOFF protocol               0080  ESCOFF    equ    %10000000 Disable ESC as HOLD character                     *               00F8  PROTOCOL  equ    ESCOFF|XANY|XONXOF|IXONXOF|TRANSPNT                                    0001  DSR_OK    equ    %00000001 OK to send               0002  SEND_XON  equ    %00000010 Send XON next               0004  SEND_XOF  equ    %00000100 Send XOFF next               0008  SEND_DLE  equ    %00001000 Send DLE next               0010  XOF_SENT  equ    %00010000 We shut the other guy down               0020  DLE_SENT  equ    %00100000 DLE sequence started               0040  DLE_GOT   equ    %01000000 DLE sequence receivedTask       Structure                 06:13:48  Jan 29, 2023   Page   18Variable   Space                                                           0100                         org    RAMorg                       0100               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"  0100               OBUF_SIZE rmb    2         Size of TTY Output Queues  0102               OQHI      rmb    2         Output Queue High-water mark  0104               OQLO      rmb    2         Output Queue Low-water mark  0106               slot_tbl  rmb    2*SR4_SLOTS slot configuration                       010C               DB_iflg   rmb    1         Debug terminal initialized  010D               DB_cntrl  rmb    2         Debug control flags                     *  010F               runlst    rmb    2         Pointer to active tasks  0111               slplst    rmb    4         Pointer to waiting tasks  0115               utask     rmb    2         Currently executing task  0117               jobpri    rmb    1         Current job priority (for scheduling)  0118               chproc    rmb    1         Set if must switch users of CPU (reschedule)  0119               cfreel    rmb    2         Pointer to first free Clist buffer  011B               cbufct    rmb    1         Count of Clist buffers in use  011C               lcbuf     rmb    1         Limit on Clist buffers  011D               idle      rmb    1         idle loop flag for scheduler  011E               TI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  015A               TI_Q_ptr  rmb    2         current Q pointer  015C               FIO_lock  rmb    1         FIO in use lock  015D               int_buf   rmb    12        Current Message in  0169               int_ptr   rmb    2         Message in pointer  016B               clock_tick rmb   1         Clock tick counter  016C               prcbuf    rmb    PRCSIZ    buffer for erase and kill                       026C               hstbuf    rmb    HRECSIZ*MAXHIST  02AC               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  02AE               CLISTS    rmb    2         Space for Clists  02B0               TTYTABS   rmb    2         Terminal tables  02B2               TTYQS     rmb    2         TTY Input Queue Headers  02B4               OBUFRS    rmb    2         TTY Output Queues  02B6               tsktab    rmb    2         Task Control Tables  02B8               tskend    rmb    2         End of task table  02BA               PPstr     rmb    2         Pointer to parallel device tables  02BC               NECstr    rmb    2         Pointer to NEC device tables  02BE               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table  030C               NEC_IQ    rmb    2         Pointer to NEC input queue  030E               NECADR    rmb    2         Address of NEC printer                     *  0310               brbutb    rmb    MAX_TTY/2 baudrate latch backup table                     *  0316               SYS_TABS  rmb    0         Start of dynamic system tables                                    6FFF  end_vars  equ    RAMend    End of System VariablesTask       Structure                 06:13:48  Jan 29, 2023   Page   19Variable   Space                                    Task       Structure                 06:13:48  Jan 29, 2023   Page   20Variable   Space                                                         *                     * ACIA Structure                     *                                          * struct acia                       0000                         org    0                                            0000               csr       rmb    1         control - status  0001               dbuf      rmb    1         data buffer  0002               brr       rmb    1         baudrate latch                                          *                     * status codes                     *               0001  AS_RDRF   equ    %00000001 receive data register full               0002  AS_TDRE   equ    %00000010 transmit data register empty               0004  AS_NDCD   equ    %00000100 DCD status bit, 1 is inactive               0008  AS_NCTS   equ    %00001000 CTS bit, 1 is inactive TX IRQ off               0010  AS_FRME   equ    %00010000 receive framing error               0020  AS_OVRN   equ    %00100000 receive overrun               0040  AS_PERR   equ    %01000000 receive parity error               0080  AS_IRQ    equ    %10000000 INT flag, 1 is active                     *                     * control codes                     *               0001  AC_DIV0   equ    %00000001 counter divide bit 0 :1/:16/:64/reset               0002  AC_DIV1   equ    %00000010 counter divide bit 1               0004  AC_WS0    equ    %00000100 word select 0 7E2/7O2/7E1/7O1               0008  AC_WS1    equ    %00001000 word select 1 8N2/8N1/8E1/8O1               0010  AC_WS2    equ    %00010000 word select 2               0020  AC_TEIN   equ    %00100000 transmit control 0  NRTS/NINT,NRTS/INTE               0040  AC_DRTS   equ    %01000000 transmit control 1  RTS/NINT,NRTS/SBRK/NINT               0080  AC_REIN   equ    %10000000 receive enable IRQ                     *               0001  AC_DV16   equ    %00000001 setting for clk/16               0003  AC_MRES   equ    AC_DIV1+AC_DIV0 master reset               0014  AC_8N1    equ    AC_WS2+AC_WS0 select for 8N1               0015  AC_SET    equ    AC_8N1+AC_DV16 ACIA default setup                     *                     * starting device minor for IOP serial devices                     *                     * on the CPU side, serila devices may take up                     * from tty00 up to tty08                     *               0009  IOPTDMIN  equ    9         IOP tty lowest minor                       0000                         org    $0  0000               NUM_TSK   rmb    1  0001               NUM_CL    rmb    1  0002               NUM_TRM   rmb    1Task       Structure                 06:13:49  Jan 29, 2023   Page   21Variable   Space                                      0003               NUM_PPR   rmb    1  0004               NUM_NEC   rmb    1FIO Simulation Structure             06:13:49  Jan 29, 2023   Page   22Variable   Space                                                                              *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             06:13:49  Jan 29, 2023   Page   23Variable   Space                                      0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************                     *                     * IOP ROM Version #                     *               0020  ROM_VERSION equ  $20       Major/Minor Version of IOP ROM                                          *                     * generic and specific transaction codes for use with fio_han                     * these are for IOP                     *                                          *                     * Error codes                     *               0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)               0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   equ    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     *               0010  O_OPEN    equ    $10       Open device               0020  O_CLOSE   equ    $20       Close device               0030  O_RQWR    equ    $30       Request write               0040  O_WRITE   equ    $40       Write data via fifo to IOP               0050  O_RQRD    equ    $50       Request read data               0060  O_READ    equ    $60       Read data for via fifo from IOP               0070  O_INTRPT  equ    $70       Interrupt all tasks on a terminal               0080  O_WR1C    equ    $80       Write single character               0090  O_TTYS    equ    $90       TTY Set               00A0  O_TTYG    equ    $A0       TTY Get                                    00D0  O_PGETD   equ    $D0       Read baudrate settings               00E0  O_PSETD   equ    $E0       Write baudrate settings                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               000F  R_RESET   equ    $0F       System reset & functioning               0001  R_OPEN    equ    $01       Device open successfulFIO Simulation Structure             06:13:49  Jan 29, 2023   Page   24Variable   Space                                                   0002  R_CLOSE   equ    $02       Device close successful               0003  R_REQOK   equ    $03       Write request now granted               0004  R_WRITE   equ    $04       Write data complete               0005  R_RDOK    equ    $05       Read data now available               0006  R_READ    equ    $06       Read data in FIFO & no more data is available               0007  R_INTRPT  equ    $07       Interrupt complete               0008  R_WR1C    equ    $08       Write single character               0009  R_RD1C    equ    $09       Single character available               000B  R_PDATA   equ    $0B       port data transaction succes               000C  R_READM   equ    $0C       Read data in fifo, more data waiting               000D  R_TTY     equ    $0D       TTYSET/GET complete               000E  R_CLOCK   equ    $0E       Interval Timer Tick                                          *                     * FIO Task Priority                     *   -- Set to make task uninterruptable while                     *   -- actually using the FIO                     *               000F  FIOPRI    set    15                                          *                     * FIO Control structures                     *                                          * Transaction slots                                                                                                         FIO Simulation Structure             06:13:50  Jan 29, 2023   Page   25CPU        Vectors                                                         0025                         abs                       FFF0                         org    CPUtraps                       FFF0 E0B1                    fdb    rom_trap  Unused  FFF2 E0AA                    fdb    rom_swi3  SWI3  FFF4 E0A3                    fdb    rom_swi2  SWI2  FFF6 E096                    fdb    rom_firq  FIRQ  FFF8 E05F                    fdb    irq_han   IRQ  FFFA E09D                    fdb    rom_swi   SWI  FFFC E090                    fdb    rom_nmi   NMI  FFFE E06B                    fdb    rom_init  Reset                     FIO Simulation Structure             06:13:50  Jan 29, 2023   Page   26System     RESET Code                                                      E000                         org    ROMLOorg                       E000 0D 49 4F 50   DBmsg00   fcc    $d,'IOP ROM',0  E009 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E029 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E03D 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                                         E05A  fio_fsz   equ    *               E05C  fio_dsz   equ    *+2               E05E  max_trn   equ    *+4                     *                     * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and IOP CPU                     *  E05A 0080                    fdb    128       fio_fsz FIFO SIZE  E05C 0100                    fdb    256       fio_dsz DEVICE SIZE  E05E 18                      fcb    24        fio_mxtrn MAX_TRANSACTIONS                                    00E0  CFGDAT    equ    $00e0     offset in FIO where config data is stored                                          *                     * IRQ handler                     *               E05F  irq_han   equ    *  E05F BD   E4CC               jsr    IRQ_han   do actual handler                     *                     * common return for all interrupts                     *  E062 7D   0118     intret    tst    chproc    change process?  E065 27   03                 beq    01f  E067 BD   E669               jsr    change    change process  E06A 3B            01        rti                                                               *                     * System RESET code, interrupts disabled                     *  E06B 10CE 7FFF     rom_init  lds    #ROMstack initialize stack pointer  E06F                         ldmd   3                       E072 8E   0000               ldx    #0        clear all of RAM, including FIFO  E075 CC   0000               ldd    #0  E078 ED   81       10        std    ,x++  E07A 8C   6FFF               cmpx   #end_vars  E07D 25   F9                 blo    10b                                           >E07F 17   0050     20        lbsr   stbinit   go initialize system memory                                          FIO Simulation Structure             06:13:50  Jan 29, 2023   Page   27System     RESET Code                                 E082 10FE 02B6     30        lds    tsktab  E086 32   E9 009F            leas   TSKSIZ,s  Task 0 Stack  E08A 17   02F8               lbsr   fio_reset                                          *                     * Initialization complete - Start executing commands                     *  E08D               fio_start                     *         ldb     #ROM_VERSION                     *         stb     fio_cpu1                     *         ldb     #R_RESET   send "system reset & running" message                     *         lbsr    fio_msg                                            E08D 7E   E66F     10        jmp    rsched                     FIO Simulation Structure             06:13:50  Jan 29, 2023   Page   28ROM        Interrupt Fielders                                              E090 8D   26       rom_nmi   bsr    rom_int  E092 4E 4D 49 00             fcc    'NMI',0  E096 8D   20       rom_firq  bsr    rom_int  E098 46 49 52 51             fcc    'FIRQ',0  E09D 8D   19       rom_swi   bsr    rom_int  E09F 53 57 49 00             fcc    'SWI',0  E0A3 8D   13       rom_swi2  bsr    rom_int  E0A5 53 57 49 32             fcc    'SWI2',0  E0AA 8D   0C       rom_swi3  bsr    rom_int  E0AC 53 57 49 33             fcc    'SWI3',0  E0B1 8D   05       rom_trap  bsr    rom_int  E0B3 54 52 41 50             fcc    'TRAP',0                       E0B8 8E   E0C5     rom_int   ldx    #ROM_ERR  E0BB BD   F0DB               jsr    DB_pdata  E0BE 35   10                 puls   x  E0C0 BD   F0DB               jsr    DB_pdata  E0C3 20   FE       rom_bad   bra    *                     *  E0C5 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             06:13:50  Jan 29, 2023   Page   29Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0D2 8E   0100     stbinit   ldx    #sys_vars clear all variables  E0D5 CC   0000               ldd    #0  E0D8 ED   81       10        std    ,x++  E0DA 8C   6FFF               cmpx   #end_vars done yet?  E0DD 25   F9                 blo    10b  E0DF CC   0D04               ldd    #DEBUG  E0E2 FD   010D               std    DB_cntrl                     * >E0E5 17   0019               lbsr   set_tables go figure out configuration, tables, etc                     * Initialize Terminal Interrupt Queue  E0E8 8E   011E     15        ldx    #TI_Q     set queue empty  E0EB BF   015A               stx    TI_Q_ptr  E0EE 8E   015D               ldx    #int_buf  reset message in pointer  E0F1 BF   0169               stx    int_ptr  E0F4 17   019F               lbsr   clinit    initialize Clists  E0F7 17   01CA     16        lbsr   ttyinit   initialize TTY tables  E0FA 17   021D     17        lbsr   tskinit   initialize tasks  E0FD 17   0FF9     18        lbsr   DB_config display configuration  E100 39                      rts                                                               *                     * Set up system tables                     *  E101               set_tables                     * -- Force in the on-board PIA                     *09        ldd     #PIA_SLOT                     *          jsr     [D_test+DEV_L2]                     * -- Force in the TOD interface                     *          ldy     #dev_tab+((MAX_DEV-1)*DEV_SIZE)                     *          ldx     #DEV_TOD                     *          stx     dev_type,y                                                               * Compute configuration  E101 86   03                 lda    #SR4_SLOTS  E103 34   02                 pshs   a  E105 CC   8000               ldd    #BASE_SLOT set port address  E108 8E   0106               ldx    #slot_tbl  E10B 34   10                 pshs   x  E10D CE   E281     10        ldu    #no_dev  E110 EF   84                 stu    0,x  E112 CE   E376               ldu    #mod_tbl  tables with module refs  E115 AE   C4       12        ldx    mod_type,u  E117 27   0D                 beq    20f       jump if end of module table  E119 AD   98 24              jsr    [D_test,x] check for deviceFIO Simulation Structure             06:13:51  Jan 29, 2023   Page   30Table      Initialization                             E11C 25   04                 bcs    15f       jump if found  E11E 33   44                 leau   MOD_SIZE,u  E120 20   F3                 bra    12b  E122 AE   42       15        ldx    mod_name,u  E124 AF   F4                 stx    [0,s]  E126 C3   0010     20        addd   #NEXT_SLOT advance address  E129 AE   E4                 ldx    0,s       update slot table pointer  E12B 30   02                 leax   2,x  E12D AF   E4                 stx    0,s  E12F 6A   62                 dec    2,s       any more slots  E131 26   DA                 bne    10b  E133 35   12                 puls   a,x                     * -- All done setting up configuration                     * Set up constants based on configuration  E135 86   7C       22        lda    #MAX_CL  E137 34   10                 pshs   x  E139 8E   00E0               ldx    #CFGDAT  E13C 9F   18                 stx    fifo_us0  initialize config data pointer  E13E A7   01                 sta    NUM_CL,x  E140 35   10                 puls   x                     *                     *         lda     #MAX_TSK  E142 B6   E05E               lda    max_trn   reserve for system tasks  E145 8B   04                 adda   #4  E147 34   10                 pshs   x  E149 9E   18                 ldx    fifo_us0  E14B A7   84                 sta    NUM_TSK,x  E14D 35   10                 puls   x                     *  E14F CC   0400               ldd    #MAX_OB  E152 FD   0100               std    OBUF_SIZE                     * Now figure out where system tables go, based on configuration  E155 FC   0100     30        ldd    OBUF_SIZE  E158 83   000A               subd   #10  E15B FD   0102               std    OQHI  E15E B3   E05A               subd   fio_fsz  E161 83   0005               subd   #5  E164 FD   0104               std    OQLO  E167 CC   0316               ldd    #SYS_TABS start of system tables                     * -- Round up to CBSIZE boundary  E16A C3   001F               addd   #CBSIZE-1  E16D C4   E0                 andb   #!(CBSIZE-1)  E16F 1F   03                 tfr    d,u                     * -- CLISTS  E171 86   20                 lda    #CBSIZE  E173 34   10                 pshs   x  E175 9E   18                 ldx    fifo_us0  pointer  E177 E6   01                 ldb    NUM_CL,x  E179 35   10                 puls   x  E17B 3D                      mul  E17C FF   02AE               stu    CLISTS  E17F 17   0106               lbsr   sto_chk   check for system table space overflowFIO Simulation Structure             06:13:51  Jan 29, 2023   Page   31Table      Initialization                            >E182 1025 006B               lbcs   40f       jump if it happens                     * -- TTY Control tables  E186 86   22                 lda    #TTYSIZ  E188 34   10                 pshs   x  E18A 9E   18                 ldx    fifo_us0  pointer  E18C E6   02                 ldb    NUM_TRM,x  E18E 35   10                 puls   x  E190 3D                      mul  E191 FF   02B0               stu    TTYTABS   point to tty table  E194 17   00F1               lbsr   sto_chk   check for system table space overflow  E197 25   58                 bcs    40f       jump if it happens                     * -- TTY Queue headers  E199 86   0A                 lda    #2*QH_SIZE  E19B 34   10                 pshs   x  E19D 9E   18                 ldx    fifo_us0  pointer  E19F E6   02                 ldb    NUM_TRM,x  E1A1 35   10                 puls   x  E1A3 3D                      mul  E1A4 FF   02B2               stu    TTYQS  E1A7 17   00DE               lbsr   sto_chk   check for system table space overflow  E1AA 25   45                 bcs    40f       jump if it happens  E1AC 86   0A                 lda    #OQH_SIZE  E1AE 34   10                 pshs   x  E1B0 9E   18                 ldx    fifo_us0  pointer  E1B2 E6   02                 ldb    NUM_TRM,x  E1B4 35   10                 puls   x  E1B6 3D                      mul  E1B7 17   00CE               lbsr   sto_chk   check for system table space overflow  E1BA 25   35                 bcs    40f       jump if it happens                     * -- TTY Output Queues  E1BC 4F                      clra  E1BD 34   10                 pshs   x  E1BF 9E   18                 ldx    fifo_us0  pointer  E1C1 E6   02                 ldb    NUM_TRM,x  E1C3 35   10                 puls   x  E1C5 1F   01                 tfr    d,x  E1C7 CC   0000               ldd    #0  E1CA F3   0100     10        addd   OBUF_SIZE  E1CD 30   1F                 leax   -1,x  E1CF 26   F9                 bne    10b  E1D1 FF   02B4               stu    OBUFRS  E1D4 17   00B1               lbsr   sto_chk   check for system table space overflow  E1D7 25   18                 bcs    40f       jump if it happens                     * -- Task table  E1D9 86   9F                 lda    #TSKSIZ  E1DB 34   10                 pshs   x  E1DD 9E   18                 ldx    fifo_us0  pointer  E1DF E6   84                 ldb    NUM_TSK,x  E1E1 35   10                 puls   x  E1E3 3D                      mul  E1E4 FF   02B6               stu    tsktab  E1E7 17   009E               lbsr   sto_chk   check for system table space overflowFIO Simulation Structure             06:13:51  Jan 29, 2023   Page   32Table      Initialization                             E1EA 25   05                 bcs    40f       jump if it happens  E1EC FF   02B8               stu    tskend                     *  E1EF 20   5F                 bra    60f                     * -- System table space has overflowed!                     * -- Try adjusting some parameters to get it under control  E1F1 FC   0100     40        ldd    OBUF_SIZE first step, reduce output buffer size  E1F4 83   0020               subd   #32  E1F7 FD   0100               std    OBUF_SIZE  E1FA 1083 0120               cmpd   #MIN_OB  E1FE 2C   4D                 bge    50f       jump if still something left  E200 CC   0400               ldd    #MAX_OB   start over & try something else  E203 FD   0100               std    OBUF_SIZE  E206 34   10                 pshs   x  E208 9E   18                 ldx    fifo_us0  pointer  E20A A6   84                 lda    NUM_TSK,x try reducing # tasks  E20C 80   01                 suba   #1  E20E A7   84                 sta    NUM_TSK,x  E210 E6   02                 ldb    NUM_TRM,x  E212 EB   03                 addb   NUM_PPR,x  E214 EB   04                 addb   NUM_NEC,x  E216 35   10                 puls   x  E218 CB   03                 addb   #3  E21A 34   04                 pshs   b  E21C A1   E0                 cmpa   ,s+  E21E 2C   2D                 bge    50f  E220 86   28                 lda    #MAX_TSK  E222 34   10                 pshs   x  E224 9E   18                 ldx    fifo_us0  pointer  E226 A7   84                 sta    NUM_TSK,x  E228 A6   01                 lda    NUM_CL,x  crank back on # clists  E22A 80   01                 suba   #1  E22C A7   01                 sta    NUM_CL,x  E22E A1   02                 cmpa   NUM_TRM,x  E230 35   10                 puls   x  E232 2C   19                 bge    50f  E234 C6   7C                 ldb    #MAX_CL  E236 34   10                 pshs   x  E238 9E   18                 ldx    fifo_us0  pointer  E23A E7   01                 stb    NUM_CL,x  E23C 35   10                 puls   x  E23E 8E   E26A               ldx    #00f  E241 BD   F0DB               jsr    DB_pdata  E244 BD   F0F9               jsr    DB_config  E247 BD   F0D5               jsr    DB_main  E24A 7E   E06B               jmp    rom_init  ... what else can I do???  E24D 16   FF05     50        lbra   30b       go try it all again                     *-- Initialize devices  E250 CE   02BE     60        ldu    #dev_tab  E253 5F            62        clrb  E254 34   04       70        pshs   b  E256 AE   C4                 ldx    dev_addr,u get device addressFIO Simulation Structure             06:13:52  Jan 29, 2023   Page   33Table      Initialization                             E258 27   06                 beq    75f       jump if none there  E25A 10AE 42                 ldy    dev_type,u get device kind  E25D AD   B8 22              jsr    [D_init,y] go initialize device  E260 33   46       75        leau   DEV_SIZE,u  E262 35   04                 puls   b  E264 5C                      incb  E265 C1   0C                 cmpb   #MAX_DEV-1  E267 26   EB                 bne    70b                     * -- All done  E269 39            90        rts                     *  E26A 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E281 2E 2E 4E 6F   no_dev    fcc    '..None',0                                          *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E288 33   CB       sto_chk   leau   d,u       compute new end pointer  E28A 1183 6FFF               cmpu   #end_vars overflow?  E28E 22   03                 bhi    10f       yes - return error  E290 1C   FE                 clc              no         - return OK  E292 39                      rts  E293 1A   01       10        sec              ..         bad owies  E295 39                      rts                                          *                     * clinit                     *                     * Initialize character buffer lists.  This routine                     * is only called once at startup time.                     *                       E296 BE   02AE     clinit    ldx    CLISTS    point to clist  E299 34   10                 pshs   x  E29B 9E   18                 ldx    fifo_us0  E29D E6   01                 ldb    NUM_CL,x  set count  E29F 35   10                 puls   x  E2A1 BF   0119               stx    cfreel    set head pointer  E2A4 31   88 20    clini2    leay   CBSIZE,x  E2A7 10AF 84                 sty    0,x       set fwd link  E2AA 1F   21                 tfr    y,x       advance to next  E2AC 5A                      decb  E2AD 26   F5                 bne    clini2  E2AF 34   10                 pshs   x  E2B1 9E   18                 ldx    fifo_us0  E2B3 A6   01                 lda    NUM_CL,x  get buffer count  E2B5 35   10                 puls   xFIO Simulation Structure             06:13:52  Jan 29, 2023   Page   34Table      Initialization                             E2B7 80   02                 suba   #2  E2B9 B7   011C               sta    lcbuf     set max count  E2BC 4F                      clra             make       d=0  E2BD ED   88 E0              std    -CBSIZE,x clear last link  E2C0 7F   011B               clr    cbufct  E2C3 39                      rts              all        done!                                          *                     * ttyinit                     *                     * Init the tty tables and queues.                     *                       E2C4 10BE 02B2     ttyinit   ldy    TTYQS     point to q tables  E2C8 6F   E2                 clr    ,-s       terminal # counter  E2CA 34   10                 pshs   x  E2CC 9E   18                 ldx    fifo_us0  E2CE E6   02                 ldb    NUM_TRM,x get terminal count  E2D0 35   10                 puls   x  E2D2 34   04                 pshs   b  E2D4 FE   02B4               ldu    OBUFRS    output buffer  E2D7 BE   02B0               ldx    TTYTABS   point to TTY Tables  E2DA 10AF 84       10        sty    tqin,x    set input q  E2DD 31   25                 leay   QH_SIZE,y get next q  E2DF 10AF 02                 sty    tqproc,x  set pr q  E2E2 31   25                 leay   QH_SIZE,y set next q  E2E4 10AF 04                 sty    tqout,x   set output q  E2E7 EF   22                 stu    oq_buf,y  ** Init output Q **  E2E9 EF   26                 stu    oq_get,y  E2EB EF   24                 stu    oq_put,y  E2ED FC   0100               ldd    OBUF_SIZE  E2F0 33   CB                 leau   d,u  E2F2 EF   28                 stu    oq_end,y  E2F4 31   2A                 leay   OQH_SIZE,y get next q  E2F6 86   15                 lda    #AC_SET   #%101<<2   8 bits, no parity, 1 stop bit  E2F8 A7   88 12              sta    tbaud,x   set conf word  E2FB A6   61                 lda    1,s       get terminal #  E2FD A7   0B                 sta    tdevic+1,x set in table  E2FF 34   46                 pshs   d,u  E301 C6   06                 ldb    #DEV_SIZE  E303 3D                      mul  E304 CE   02BE               ldu    #dev_tab  E307 33   CB                 leau   d,u  E309 EC   C4                 ldd    dev_addr,u -- device address  E30B ED   06                 std    taddr,x  E30D 35   46                 puls   d,u  E30F 6C   61                 inc    1,s       bump terminal #  E311 30   88 22              leax   TTYSIZ,x  next tty entry  E314 6A   E4                 dec    0,s       dec the count  E316 26   C2                 bne    10b       repeat?  E318 35   86                 puls   d,pc      clean up stack & return                     FIO Simulation Structure             06:13:52  Jan 29, 2023   Page   35Table      Initialization                                                *                     * tskinit - Initialize all tasks                     *  E31A BE   02B6     tskinit   ldx    tsktab  E31D BF   0115               stx    utask  E320 34   10                 pshs   x  E322 9E   18                 ldx    fifo_us0  get pointer  E324 E6   84                 ldb    NUM_TSK,x # tasks in system  E326 35   10                 puls   x  E328 34   04                 pshs   b  E32A 10BE 02B6               ldy    tsktab    task 1  E32E 31   A9 009F            leay   TSKSIZ,y  E332               10  E332 86   04       11        lda    #TFREE    mark all tasks free  E334 BC   02B6               cmpx   tsktab    is this the system task?  E337 26   02                 bne    15f  E339 86   05                 lda    #TSYS     the system task is never free  E33B A7   04       15        sta    tsstat,x  E33D 86   FF                 lda    #$FF      not associated with a terminal  E33F A7   0D                 sta    tsdev,x  E341 A7   0E                 sta    tsdev+1,x  E343 33   89 009F            leau   TSKSIZ,x  initialize stack  E347 CC   E450               ldd    #IO_han  E34A 34   20                 pshs   y  E34C AC   E1                 cmpx   ,s++      task 1?  E34E 26   03                 bne    20f       no - normal I/O handling task  E350 CC   E5B4               ldd    #TI_HAN   yes - special terminal interrupt handling task  E353 36   06       20        pshu   d  E355 EF   0F                 stu    usp,x  E357 EF   88 11              stu    umark0,x  E35A 30   89 009F            leax   TSKSIZ,x  E35E 6A   E4                 dec    0,s       done?  E360 26   D0                 bne    10b  E362 32   61                 leas   1,s       clean up stack  E364 CC   0000               ldd    #0        nothing running or sleeping  E367 FD   010F               std    runlst  E36A FD   0111               std    slplst  E36D FD   0113               std    slplst+tsslnk  E370 30   A4                 leax   0,y       start interrupt handling task  E372 BD   E715               jsr    makrdy  E375 39                      rtsFIO Simulation Structure             06:13:53  Jan 29, 2023   Page   36IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E376  mod_tbl   equ    *  E376 EF29 E37C               fdb    DEV_6850,SR4_name  E37A 0000                    fdb    0                     *  E37C 43 50 55 30   SR4_name  fcc    'CPU09SR4',0FIO Simulation Structure             06:13:53  Jan 29, 2023   Page   37FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     *  E385               fio_reset                     * when here, all storage locations have been erased already                     *  E385 8E   0000               ldx    #0  E388 9F   14                 stx    fifo_get  set Q pointers  E38A 9F   16                 stx    fifo_put  E38C 8E   00E0               ldx    #CFGDAT  E38F 9F   18                 stx    fifo_us0  so that kernel CPU can see it  E391 BE   E05C               ldx    fio_dsz  E394 30   1E                 leax   -2,x      one from top                     *#        lda     #$99       tell CPU I'm ready                     *#        sta     0,x        fio_cpuF  E396 CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E399 C6   FF       fio_wait  ldb    #255      Spin counter                     *  E39B               00  E39B 6D   84                 tst    0,x       fio_cpuF  E39D 27   0D                 beq    10f                     *  E39F 5A                      decb  E3A0 26   F9                 bne    00b       jump back if not ready                     *  E3A2 33   5F                 leau   -1,u  E3A4 1183 0000               cmpu   #0  E3A8 26   EF                 bne    fio_wait                     *          ldx     #CPU_down                     *          lbsr    DB_pdata                     *          lbsr    DB_main  E3AA 20   D9                 bra    fio_reset                     * reset OK  E3AC 39            10        rts                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *  E3AD 34   54       fio_msg   pshs   b,x,u     save register  E3AF FE   E05C               ldu    fio_dsz  E3B2 33   5E                 leau   -2,u      one off top  E3B4 D7   09                 stb    fio_cpu   set up mailbox value                       E3B6 86   FF       5         lda    #$FF      tell CPU mailbox full  E3B8 A7   C4                 sta    0,u       fio_cpuF  E3BA 8E   FFFF     05        ldx    #$FFFF    time-out counterFIO Simulation Structure             06:13:53  Jan 29, 2023   Page   38FIO        Simulation Routines                                           *  E3BD A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E3BF 27   06                 beq    20f       jump if consumed                     *  E3C1 30   1F                 leax   -1,x      time-out yet?  E3C3 26   F8                 bne    10b                     *  E3C5 20   F3                 bra    05b       try again                     *  E3C7 35   D4       20        puls   b,x,u,pc                     *                                          *                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *  E3C9 34   16       fio_response pshs d,x  E3CB 8D   18                 bsr    FIO_get   access FIO  E3CD BE   0115               ldx    utask     task ID  E3D0 EC   0A                 ldd    tsseq,x  E3D2 DD   0A                 std    fio_cpu1  E3D4 EC   0D                 ldd    tsdev,x   device info  E3D6 DD   0D                 std    fio_cpu3  E3D8 A6   E4                 lda    0,s       get transaction specific value  E3DA 97   0C                 sta    fio_cpu2  E3DC E6   61                 ldb    1,s       is RESPONSE code >E3DE BD   E3AD               jsr    fio_msg  E3E1 8D   17                 bsr    FIO_rel   release FIO  E3E3 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E3E5 34   76       FIO_get   pshs   d,x,y,u   save registers  E3E7 108E 015C     10        ldy    #FIO_lock is the device locked  E3EB 6D   A4                 tst    0,y  E3ED 27   07                 beq    20f       no - go get it                     *  E3EF C6   0F                 ldb    #FIOPRI   waiting for the FIO  E3F1 BD   E74F               jsr    sleep  E3F4 20   F1                 bra    10b       try again                     *  E3F6 6C   A4       20        inc    0,y       mark in use  E3F8 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *FIO Simulation Structure             06:13:53  Jan 29, 2023   Page   39FIO        Simulation Routines                        E3FA 34   76       FIO_rel   pshs   d,x,y,u  E3FC 108E 015C               ldy    #FIO_lock  E400 6F   A4                 clr    0,y  E402 BD   E72B               jsr    wakeup  E405 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E407 34   04       FIFOgeta  pshs   b  E409 8D   05                 bsr    FIFO_get  E40B 35   02                 puls   a  E40D 1E   89                 exg    a,b  E40F 39                      rts                     *  E410 34   12       FIFO_get  pshs   a,x  E412 DC   12                 ldd    fifo_cnt  any data?  E414 27   15                 beq    99f       no - exit                     *  E416                         decd   yes       - adjust count  E418 DD   12                 std    fifo_cnt  E41A 9E   14                 ldx    fifo_get  get consumer pointer  E41C E6   88 20              ldb    fifo,x    fetch byte  E41F 30   01                 leax   1,x       bump pointer  E421 BC   E05A               cmpx   fio_fsz   end of fifo?  E424 26   03                 bne    10f                     *  E426 8E   0000               ldx    #0        reset pointer                     *  E429 9F   14       10        stx    fifo_get                     *  E42B 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E42D 34   04       FIFOputa  pshs   b  E42F 1F   89                 tfr    a,b  E431 8D   02                 bsr    FIFO_put  E433 35   84                 puls   b,pc                     *  E435 34   16       FIFO_put  pshs   d,x  E437 9E   16                 ldx    fifo_put  get consumer pointer  E439 E7   88 20              stb    fifo,x    store byte  E43C 30   01                 leax   1,x       bump pointer  E43E BC   E05A               cmpx   fio_fsz   end of FIFO?  E441 26   03                 bne    10f                     *  E443 8E   0000               ldx    #0        reset pointer  E446 9F   16       10        stx    fifo_putFIO Simulation Structure             06:13:54  Jan 29, 2023   Page   40FIO        Simulation Routines                                           *  E448 DC   12                 ldd    fifo_cnt  E44A                         incd  E44C DD   12                 std    fifo_cnt  E44E 35   96       99        puls   d,x,pcFIO Simulation Structure             06:13:54  Jan 29, 2023   Page   41IO         Command Handler                                                                    *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E450               IO_han    clri   allow     interrupts  E452 BE   0115               ldx    utask     get task control block address  E455 A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E457 44            10        lsra             isolate    command  E458 44                      lsra  E459 44                      lsra  E45A 44                      lsra  E45B E6   0E                 ldb    tsdev+1,x get device #  E45D C1   0D                 cmpb   #MAX_DEV  check for legal device #  E45F 25   04                 blo    10f       jump if OK                     *  E461 C6   84                 ldb    #E_BADDEV return illegal device error  E463 20   23                 bra    20f       exit                     *  E465 48            10        lsla             --   word index on command  E466 8E   02BE               ldx    #dev_tab  E469 34   06                 pshs   d  E46B 86   06                 lda    #DEV_SIZE  E46D 3D                      mul  E46E 30   8B                 leax   d,x  E470 AE   02                 ldx    dev_type,x get handler table address  E472 35   06                 puls   d  E474 10AE 86                 ldy    a,x       get processor address  E477 4F                      clra                     *  E478 8E   E48B     10        ldx    #IO_end   interrupt handler address  E47B 34   10                 pshs   x  E47D BE   0115               ldx    utask  E480 10EF 88 13              sts    umark1,x                     *                     * CALL HANDLER: X=utask, Y=handler address, U=                     *  E484 AD   A4                 jsr    0,y       perform operation & return status  E486 32   62                 leas   2,s       clean up stack                     *  E488 BD   E3C9     20        jsr    fio_response                     *  E48B               IO_end    seti   mask      interruptsFIO Simulation Structure             06:13:54  Jan 29, 2023   Page   42IO         Command Handler                            E48D BE   0115               ldx    utask     restore task control block address  E490 A7   0C                 sta    tstval,x  remember transaction value sent  E492 E7   09                 stb    tscmd,x   and command response  E494 86   04                 lda    #TFREE    mark task "terminated & free"  E496 A7   04                 sta    tsstat,x  E498 86   FF                 lda    #$FF      disassociate from any terminal  E49A A7   0D                 sta    tsdev,x  E49C A7   0E                 sta    tsdev+1,x  E49E 6F   08                 clr    tssgnl,x  no waiting signals  E4A0 BD   E66F               jsr    rsched    run other tasks >E4A3 16   FFAA               lbra   IO_han                                          *                     * Illegal command                     *  E4A6               bad_cmd  E4A6 C6   81                 ldb    #E_BADCMD error code  E4A8 39                      rtsFIO Simulation Structure             06:13:54  Jan 29, 2023   Page   43Device     Table for Illegal Device                                        E4A9               DEV_BAD     E4A9 E4C9                    fdb    bad_dev   0  E4AB E4C9                    fdb    bad_dev   1  E4AD E4C9                    fdb    bad_dev   2  E4AF E4C9                    fdb    bad_dev   3  E4B1 E4C9                    fdb    bad_dev   4  E4B3 E4C9                    fdb    bad_dev   5  E4B5 E4C9                    fdb    bad_dev   6  E4B7 E4C9                    fdb    bad_dev   7  E4B9 E4C9                    fdb    bad_dev   8  E4BB E4C9                    fdb    bad_dev   9  E4BD E4C9                    fdb    bad_dev   A  E4BF E4C9                    fdb    bad_dev   B  E4C1 E4C9                    fdb    bad_dev   C  E4C3 E4C9                    fdb    bad_dev   D  E4C5 E4C9                    fdb    bad_dev   E  E4C7 E4C9                    fdb    bad_dev   F                                          *  E4C9 C6   84       bad_dev   ldb    #E_BADDEV  E4CB 39                      rtsFIO Simulation Structure             06:13:54  Jan 29, 2023   Page   44Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *  E4CC               IRQ_han                     *-- Check for clock interrupt                     *          lda     #%10000000 get clock mask                     *          bita    CLOCK      check clock int                     *          beq     00f        no - try something else                     *                     *          sta     CLOCKI     reset interrupt                     *          jsr     clkint     go process interrupt                     *          lbra    99f        exit                     *  E4CC CE   02BE     00        ldu    #dev_tab  scan devices  E4CF CC   0000               ldd    #0        start with device 0                     *  E4D2 AE   C4       10        ldx    dev_addr,u get device address  E4D4 27   0A                 beq    20f       jump if none there                     *  E4D6 10AE 42                 ldy    dev_type,u get device type  E4D9 AD   B8 20    15        jsr    [D_inthan,y] call interrupt poller/handler  E4DC 1025 008B               lbcs   99f       exit if interrupt serviced                     *  E4E0 C3   0001     20        addd   #1        next device  E4E3 33   46                 leau   DEV_SIZE,u  E4E5 1083 000D               cmpd   #MAX_DEV  any more devices?  E4E9 25   E7                 blo    10b                                          *                     * Check for FIO Mailbox interrupt                     *  E4EB FE   E05C               ldu    fio_dsz  E4EE 33   5F                 leau   -1,u      top location  E4F0 A6   C4                 lda    0,u       cpu_fioF   see if mailbox interrupt  E4F2 27   6F                 beq    50f       no - move on                     *  E4F4 BE   0169     25        ldx    int_ptr   input message pointer  E4F7 96   00                 lda    cpu_fio   move REQUEST  E4F9 A7   80                 sta    ,x+  E4FB DC   01                 ldd    cpu_fio1  sequence # TASK ID  E4FD ED   81                 std    ,x++  E4FF 96   03                 lda    cpu_fio2  specific DATA  E501 A7   80                 sta    ,x+  E503 DC   04                 ldd    cpu_fio3  device major/minor  E505 ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E507 6F   C4                 clr    0,u       cpu_fioF   indicate message consumed                     *FIO Simulation Structure             06:13:55  Jan 29, 2023   Page   45Interrupt  Processing                                 E509 BF   0169               stx    int_ptr   update pointer  E50C 108E 015D               ldy    #int_buf  get message from buffer  E510 A6   A4                 lda    0,y       -- Send interrupt command?  E512 81   70                 cmpa   #O_INTRPT  E514 26   11                 bne    30f                     *  E516 10BF 0169               sty    int_ptr   reset pointer  E51A E6   25                 ldb    5,y       get terminal #  E51C 9E   18                 ldx    fifo_us0  E51E E1   02                 cmpb   NUM_TRM,x is this a TTY device?  E520 24   49                 bhs    99f       no - ignore message                     *  E522 BD   EF0E               jsr    send_int  E525 20   44                 bra    99f       exit                     *                     * normal command                     * acquire free task slot                     *  E527 BE   02B6     30        ldx    tsktab    search for an available task  E52A 34   10                 pshs   x  E52C 9E   18                 ldx    fifo_us0  E52E E6   84                 ldb    NUM_TSK,x Number of tasks in system  E530 35   10                 puls   x                     *  E532 A6   04       32        lda    tsstat,x  E534 81   04                 cmpa   #TFREE    looking for a "free" task  E536 27   0E                 beq    40f                     *  E538 30   89 009F            leax   TSKSIZ,x  E53C 5A                      decb  E53D 26   F3                 bne    32b                     *  E53F C6   82                 ldb    #E_SYSBSY can't process - IOP saturated!  E541 BD   E3AD               jsr    fio_msg  E544 20   25                 bra    99f       exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E546 108E 015D     40        ldy    #int_buf  get message from buffer  E54A 10BF 0169               sty    int_ptr   reset pointer  E54E E6   A0                 ldb    ,y+       command byte  REQUEST  E550 E7   09                 stb    tscmd,x   save for task  E552 EC   A1                 ldd    ,y++      sequence #    task ID  E554 ED   0A                 std    tsseq,x  E556 E6   A0                 ldb    ,y+       command specific DATA  E558 E7   0C                 stb    tstval,x  E55A EC   A1                 ldd    ,y++      associate with terminal major/minor  E55C ED   0D                 std    tsdev,x                     ** -- Removed 2/21/85                     ** lda #RUNPRI make highest possible priority                     ** sta tsprir,x  E55E BD   E715               jsr    makrdy    make task ready to runFIO Simulation Structure             06:13:55  Jan 29, 2023   Page   46Interrupt  Processing                                                    ** ldx utask don't switch if this was the system running                     ** cmpx tsktab                     ** beq 99f                     ** jsr change -- whatever I was doing can wait...  E561 20   08                 bra    99f       exit                     *  E563 17   0B8D     50        lbsr   DB_check  enter debugger?  E566 24   03                 bcc    99f                     *  E568 17   0B6A               lbsr   DB_main                     *  E56B 39            99        rts              return from interrupt                     *  E56C 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E577 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             06:13:55  Jan 29, 2023   Page   47Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E584 34   36       int_all   pshs   d,x,y  E586 9E   18                 ldx    fifo_us0  pointer  E588 E6   84                 ldb    NUM_TSK,x  E58A C0   02                 subb   #2  E58C 34   04                 pshs   b  E58E BE   02B6               ldx    tsktab  E591 30   89 013E            leax   2*TSKSIZ,x                     *  E595 EC   61       10        ldd    1,s  E597 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E59A 26   0C                 bne    20f                     *  E59C BC   0115               cmpx   utask     make sure I don't get blown away  E59F 27   07                 beq    20f                     *  E5A1 34   16                 pshs   d,x  E5A3 BD   E784               jsr    xmtint    interrupt task  E5A6 35   16                 puls   d,x                     *  E5A8 30   89 009F  20        leax   TSKSIZ,x  next task  E5AC 6A   E4                 dec    0,s       more tasks?  E5AE 26   E5                 bne    10b  E5B0 32   61                 leas   1,s                     *  E5B2 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             06:13:55  Jan 29, 2023   Page   48Terminal   Interrupt Handling Task                                                            *                     * TI_HAN Terminal interrupt handler                     *  E5B4 108E 011E     TI_HAN    ldy    #TI_Q     Terminal Interrupt Queue  E5B8                         seti  E5BA FE   015A               ldu    TI_Q_ptr  get current Q ptr  E5BD 1183 011E               cmpu   #TI_Q     anything in Q?  E5C1 26   07                 bne    20f       yes - go process it                     *  E5C3 C6   D8                 ldb    #TIQPRI   wait for something to do  E5C5 BD   E74F               jsr    sleep  E5C8 20   EA                 bra    TI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E5CA E6   C2       20        ldb    0,-u      B = Interrupt #  E5CC 34   04                 pshs   b  E5CE EC   C3                 ldd    0,--u     A = Device #  E5D0 34   06                 pshs   d  E5D2 EC   C3                 ldd    0,--u     task ID  E5D4 34   06                 pshs   d         save registers  E5D6 FF   015A               stu    TI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E5D9 E6   63                 ldb    3,s       set up to flush all input for this terminal  E5DB BD   E903               jsr    ttftab    X=ttytab, U=device table  E5DE BD   ECEE               jsr    flushi  E5E1                         clri   allow     interrupts                     *  E5E3 BD   E3E5               jsr    FIO_get   get access to FIO  E5E6 EC   E1                 ldd    0,s++     task ID  E5E8 DD   0A                 std    fio_cpu1  E5EA EC   E1                 ldd    ,s++      terminal #  E5EC DD   0D                 std    fio_cpu3  terminal  E5EE E6   E0                 ldb    ,s+       interrupt #  E5F0 D7   0C                 stb    fio_cpu2  signal  E5F2 C6   07                 ldb    #R_INTRPT  E5F4 BD   E3AD               jsr    fio_msg   send interrupt message  E5F7 BD   E3FA               jsr    FIO_rel   release access to FIO  E5FA 20   B8                 bra    TI_HAN    process more if needed                                          *                     * Send_TI - Send a terminal interrupt                     *   B = Interrupt #                     *   X = TTY Table                     *   jsr send_TI                     *  E5FC 34   76       send_TI   pshs   d,x,y,u   save registers  E5FE FE   015A               ldu    TI_Q_ptr  get Q head  E601 1183 015A               cmpu   #TI_Q_ptr check for overflowFIO Simulation Structure             06:13:56  Jan 29, 2023   Page   49Terminal   Interrupt Handling Task                    E605 24   11                 bhs    90f       exit if so - sorry                     *  E607 34   04                 pshs   b  E609 EC   0C                 ldd    ttask,x   task id  E60B ED   C1                 std    0,u++  E60D EC   0A                 ldd    tdevic,x  get terminal #  E60F ED   C1                 std    0,u++     place value in Queue  E611 35   04                 puls   b  E613 E7   C0                 stb    0,u+  E615 FF   015A               stu    TI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E618 108E 011E     90        ldy    #TI_Q     wake up Queue server  E61C BD   E72B               jsr    wakeup  E61F 35   F6                 puls   d,x,y,u,pc return                     FIO Simulation Structure             06:13:56  Jan 29, 2023   Page   50History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E621 34   16       H_cpu     pshs   d,x  E623 BE   02AC               ldx    hstptr    get history queue pointer  E626 96   00                 lda    cpu_fio  E628 A7   84                 sta    hst_cmd,x  E62A 96   01                 lda    cpu_fio1  E62C A7   01                 sta    hst_seq,x  E62E 96   04                 lda    cpu_fio3  E630 A7   02                 sta    hst_tty,x  E632 96   03                 lda    cpu_fio2  E634 A7   03                 sta    hst_val,x  E636 30   04                 leax   HRECSIZ,x  E638 8C   02AC               cmpx   #hstptr   end of Queue?  E63B 25   03                 blo    10f  E63D 8E   026C               ldx    #hstbuf  E640 BF   02AC     10        stx    hstptr  E643 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E645 34   16       H_fio     pshs   d,x  E647 BE   02AC               ldx    hstptr    get history queue pointer  E64A 96   09                 lda    fio_cpu  E64C A7   84                 sta    hst_cmd,x  E64E 96   0A                 lda    fio_cpu1  E650 A7   01                 sta    hst_seq,x  E652 96   0D                 lda    fio_cpu3  E654 A7   02                 sta    hst_tty,x  E656 96   0C                 lda    fio_cpu2  E658 A7   03                 sta    hst_val,x  E65A 30   04                 leax   HRECSIZ,x  E65C 8C   02AC               cmpx   #hstptr   end of Queue?  E65F 25   03                 blo    10f  E661 8E   026C               ldx    #hstbuf  E664 BF   02AC     10        stx    hstptr  E667 35   96                 puls   d,x,pcFIO Simulation Structure             06:13:56  Jan 29, 2023   Page   51Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E669 BE   0115     change    ldx    utask     point to task table entry >E66C 17   006D               lbsr   putrun    put on ready list                     *  E66F               rsched    seti   mask      interrupts  E671 BE   0115               ldx    utask     point to current task  E674 10EF 88 11              sts    umark0,x  save stack pointers  E678 BE   02B6               ldx    tsktab    point to task table  E67B 8D   23                 bsr    swtchu    switch users  E67D 7F   011D               clr    idle      reset idle/running flag                     *  E680 7F   0118     rsche2    clr    chproc    reset change flag >E683 17   0025               lbsr   getjob    get a new task  E686 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E688 86   7F       05        lda    #127      set higheset priority  E68A B7   0117               sta    jobpri    set as current  E68D                         clri   clear     interrupts                     * idle work could go on here  E68F 12                      nop  E690                         seti  E692 20   EC                 bra    rsche2    loop til find a ready one                     *  E694 F7   0117     rsche3    stb    jobpri    set new priority  E697 8D   07                 bsr    swtchu    switch users top page  E699 BE   0115               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E69C CC   0001               ldd    #1        return 1 to new task  E69F 39                      rts              return    FIO Simulation Structure             06:13:56  Jan 29, 2023   Page   52Scheduler  routines                                                                           *                     * Switch users                     *   X - Task entry for new task                     *  E6A0 35   20       swtchu    puls   y         get return address  E6A2 BF   0115               stx    utask     set up new running task  E6A5 10EE 88 11              lds    umark0,x  reset stack                                          ***+++                     ***---                       E6A9 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             06:13:57  Jan 29, 2023   Page   53Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E6AB 5F            getjob    clrb             clear      flag  E6AC BE   010F               ldx    runlst    point to head of list  E6AF 27   1F                 beq    getjo6    empty list?                     *  E6B1 A6   04       getjo1    lda    tsstat,x  get status byte  E6B3 81   01                 cmpa   #TRUN     is it in run state?  E6B5 26   1B                 bne    getjo8                     *  E6B7 5D                      tstb             first      in list?  E6B8 27   06                 beq    getjo2                     *  E6BA EC   84                 ldd    tslink,x  remove from list  E6BC ED   A4                 std    tslink,y  E6BE 20   07                 bra    getjo4                     *  E6C0 10AE 84       getjo2    ldy    tslink,x  remove from list head  E6C3 10BF 010F               sty    runlst    set new head                     *  E6C7 E6   05       getjo4    ldb    tsprir,x  get priority  E6C9 6F   84                 clr    tslink,x  zero out link  E6CB 6F   01                 clr    tslink+1,x so not run list  E6CD 86   FF                 lda    #$ff      set ne status  E6CF 39                      rts              return                         *  E6D0 4F            getjo6    clra             set        eq status  E6D1 39                      rts                     *  E6D2 1F   12       getjo8    tfr    x,y       save old pos  E6D4 AE   84                 ldx    tslink,x  follow link  E6D6 27   F8                 beq    getjo6                     *  E6D8 C6   01                 ldb    #1        set flag  E6DA 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             06:13:57  Jan 29, 2023   Page   54Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E6DC 34   01       putrun    pshs   cc        save status  E6DE                         seti   mask      interrupts  E6E0 10BE 010F               ldy    runlst    point to head  E6E4 26   0A                 bne    putru2  E6E6 BF   010F               stx    runlst    set new head                     *  E6E9 CC   0000     putru1    ldd    #0        set last link  E6EC ED   84                 std    tslink,x  E6EE 35   81                 puls   cc,pc     return                     *  E6F0 E6   05       putru2    ldb    tsprir,x  get priority  E6F2 E1   25                 cmpb   tsprir,y  look for correct prior slot  E6F4 2F   08                 ble    putru4                     *  E6F6 FC   010F               ldd    runlst  E6F9 BF   010F               stx    runlst    set new head  E6FC 20   0F                 bra    putru5    link in rest                     *  E6FE 1F   23       putru4    tfr    y,u       save last look  E700 10AE A4                 ldy    tslink,y  follow link  E703 27   0C                 beq    putru6                     *  E705 E1   25                 cmpb   tsprir,y  check priority  E707 2F   F5                 ble    putru4                     *  E709 EC   C4                 ldd    tslink,u  link into list here  E70B AF   C4                 stx    tslink,u                     *  E70D ED   84       putru5    std    tslink,x  E70F 35   81                 puls   cc,pc     return                     *  E711 AF   C4       putru6    stx    tslink,u  E713 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             06:13:57  Jan 29, 2023   Page   55Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E715 86   01       makrdy    lda    #TRUN     set status  E717 A7   04                 sta    tsstat,x  E719 CC   0000               ldd    #0        clear events flag  E71C ED   06                 std    tsevnt,x  E71E 8D   BC                 bsr    putrun    put on ready list  E720 E6   05                 ldb    tsprir,x  get priority  E722 F1   0117               cmpb   jobpri    higher than current?  E725 2F   03                 ble    makrd6                     *  E727 7C   0118               inc    chproc    set change flag                     *  E72A 39            makrd6    rts              return    FIO Simulation Structure             06:13:57  Jan 29, 2023   Page   56Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E72B 34   57       wakeup    pshs   cc,d,x,u  save registers  E72D                         seti   mask      interupts  E72F CE   0111               ldu    #slplst  E732 AE   42                 ldx    tsslnk,u  point to sleep list  E734 27   0B                 beq    wakeu4                     *  E736 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E739 27   08                 beq    wakeu5  E73B 33   84                 leau   0,x       mark this entry                     *  E73D AE   02       wakeu3    ldx    tsslnk,x  follow chain  E73F 26   F5                 bne    wakeu2    end of list?                     *  E741 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E743 34   70       wakeu5    pshs   x,y,u     save registers  E745 EC   02                 ldd    tsslnk,x  remove from list  E747 ED   42                 std    tsslnk,u  E749 8D   CA                 bsr    makrdy    put on ready list  E74B 35   70                 puls   u,x,y  E74D 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             06:13:58  Jan 29, 2023   Page   57Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E74F 34   51       sleep     pshs   cc,x,u    save registers  E751 BE   0115               ldx    utask     point to task  E754 6D   08                 tst    tssgnl,x  any signals waiting?  E756 26   1F                 bne    sleep7                     *  E758                         seti   mask      ints  E75A E7   05                 stb    tsprir,x  set priority  E75C 10AF 06                 sty    tsevnt,x  set event  E75F 86   02                 lda    #TSLEEP   set status  E761 A7   04                 sta    tsstat,x  E763 FC   0113               ldd    slplst+tsslnk get head of list  E766 ED   02                 std    tsslnk,x  set new link  E768 BF   0113               stx    slplst+tsslnk set new head  E76B 17   FF01               lbsr   rsched    reschedule cpu                       E76E BE   0115     20        ldx    utask     get task entry  E771 6D   08                 tst    tssgnl,x  any signals waiting?  E773 26   02                 bne    sleep7                     *  E775 35   D1                 puls   cc,x,u,pc return                     *  E777 BE   0115     sleep7    ldx    utask     reset signal  E77A 6F   08                 clr    tssgnl,x  E77C EC   88 13              ldd    umark1,x  stack reset point  E77F 35   51                 puls   cc,x,u    reset cc and registers  E781 1F   04                 tfr    d,s       change stacks  E783 39                      rts              returnFIO Simulation Structure             06:13:58  Jan 29, 2023   Page   58Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E784 34   76       xmtint    pshs   d,x,y,u   save registers  E786 A6   04                 lda    tsstat,x  get task state  E788 81   01                 cmpa   #TRUN     running?  E78A 26   06                 bne    10f       no - try something else                     *  E78C 86   01                 lda    #1        set signal  E78E A7   08                 sta    tssgnl,x  E790 20   0E                 bra    99f       exit                     *  E792 81   02       10        cmpa   #TSLEEP   task sleeping?  E794 26   0A                 bne    99f       no - can't send interrupt                     *  E796 86   01                 lda    #1        set signal  E798 A7   08                 sta    tssgnl,x  E79A 10AE 06                 ldy    tsevnt,x  wake task up >E79D 17   FF8B               lbsr   wakeup                     *  E7A0 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             06:13:58  Jan 29, 2023   Page   59Clist      - Get & Put Char Code                                                              *                     * getc                     *                     * Get a character from a specified character q.                     * The q is pointed to by y upon entry.  The char                     * is returned in b.                     *                       E7A2 34   15       getc      pshs   x,b,cc    save x  E7A4                         seti  E7A6 AE   21                 ldx    clfst,y   get first pointer  E7A8 27   3A                 beq    getc4  E7AA E6   80                 ldb    0,x+      get character  E7AC E7   61                 stb    1,s  E7AE AF   21                 stx    clfst,y   save new ptr  E7B0 6A   A4                 dec    clcnt,y   dec the count  E7B2 26   09                 bne    getc1  E7B4 CC   0000               ldd    #0        zero pointers  E7B7 ED   21                 std    clfst,y  E7B9 ED   23                 std    cllst,y  E7BB 20   0E                 bra    getc2  E7BD 1F   10       getc1     tfr    x,d  E7BF C5   1F                 bitb   #CBSIZE-1 check pointer  E7C1 26   1C                 bne    getc3  E7C3 EC   88 E0              ldd    -CBSIZE,x  E7C6 C3   0002               addd   #2  E7C9 ED   21                 std    clfst,y   set new first  E7CB 1F   10       getc2     tfr    x,d  E7CD 83   0001               subd   #1  E7D0 C4   E0                 andb   #!(CBSIZE-1) check pointer  E7D2 1F   01                 tfr    d,x       reset  E7D4 FC   0119               ldd    cfreel    get free block  E7D7 ED   84                 std    0,x       set link  E7D9 BF   0119               stx    cfreel  E7DC 7A   011B               dec    cbufct    dec the buffer count  E7DF 35   01       getc3     puls   cc  E7E1 4F                      clra  E7E2 35   94                 puls   b,x,pc  E7E4 35   01       getc4     puls   cc  E7E6 86   FF                 lda    #$ff      set -1  E7E8 35   94                 puls   b,x,pc                     FIO Simulation Structure             06:13:58  Jan 29, 2023   Page   60Clist      - Get & Put Char Code                                                              *                     * putc                     *                     * Put a character on the specified q.  The q is                     * pointed to by y upon entry and the character                     * should be in b.                     *                       E7EA 34   15       putc      pshs   x,b,cc  E7EC                         seti  E7EE AE   23                 ldx    cllst,y   get tail pointer  E7F0 26   16                 bne    putc1  E7F2 BE   0119               ldx    cfreel    get free list  E7F5 27   43                 beq    putc4  E7F7 EC   84                 ldd    0,x       pickup pointer  E7F9 FD   0119               std    cfreel  E7FC 7C   011B               inc    cbufct    update buffer count  E7FF CC   0000               ldd    #0        zero fwd link  E802 ED   81                 std    0,x++  E804 AF   21                 stx    clfst,y   set first  E806 20   23                 bra    putc2  E808 1F   10       putc1     tfr    x,d       mask pointer  E80A C5   1F                 bitb   #CBSIZE-1  E80C 26   1D                 bne    putc2  E80E 34   20                 pshs   y  E810 10BE 0119               ldy    cfreel    get free list  E814 27   22                 beq    putc3  E816 EC   A4                 ldd    0,y       get pointer  E818 FD   0119               std    cfreel    save new head  E81B 7C   011B               inc    cbufct    update buffer count  E81E 10AF 88 E0              sty    -CBSIZE,x  E822 1F   21                 tfr    y,x  E824 35   20                 puls   y  E826 CC   0000               ldd    #0        clear fwd link  E829 ED   81                 std    0,x++  E82B E6   61       putc2     ldb    1,s       get character  E82D E7   80                 stb    0,x+      put in q  E82F AF   23                 stx    cllst,y   save last ptr  E831 6C   A4                 inc    clcnt,y   update character count  E833 35   01                 puls   cc  E835 4F                      clra  E836 35   94                 puls   b,x,pc    return  E838 35   20       putc3     puls   y  E83A 35   01       putc4     puls   cc  E83C 86   FF                 lda    #$ff      set error  E83E 35   94                 puls   b,x,pc                     FIO Simulation Structure             06:13:59  Jan 29, 2023   Page   61Output     Q Handling                                                                         *                     * get_oq                     *                     * Fetch the next character from the output Q                     *   Y - Output Queue Header                     *   jsr get_oq                     *   B - Character                     *   <EQ> if Queue was not empty                     *  E840 34   13       get_oq    pshs   cc,a,x    save registers  E842                         seti   no        interrupts allowed!  E844 EC   A4                 ldd    oq_count,y  E846 27   16                 beq    20f       Queue empty  E848 83   0001               subd   #1  E84B ED   A4                 std    oq_count,y update counter  E84D AE   26                 ldx    oq_get,y  source pointer  E84F E6   80                 ldb    ,x+       get data  E851 AC   28                 cmpx   oq_end,y  buffer overflow?  E853 25   02                 blo    10f       no - continue  E855 AE   22                 ldx    oq_buf,y  yes - reset pointer  E857 AF   26       10        stx    oq_get,y  update pointer  E859 35   01                 puls   cc  E85B 4F                      clra             Queue not empty  E85C 35   92                 puls   a,x,pc    return  E85E 35   01       20        puls   cc  E860 86   FF                 lda    #$FF      Queue empty  E862 35   92                 puls   a,x,pc                     FIO Simulation Structure             06:13:59  Jan 29, 2023   Page   62Output     Q Handling                                                                         *                     * put_oq                     *                     * Put a character into an output Q                     *    Y - Output Q header                     *    B - Character to insert                     *    jsr put_oq                     *  E864 34   17       put_oq    pshs   cc,d,x    save registers  E866                         seti   no        interrupts  E868 AE   24                 ldx    oq_put,y  get pointer  E86A E7   80                 stb    ,x+       put data into Q  E86C AC   28                 cmpx   oq_end,y  buffer overflow?  E86E 25   02                 blo    10f       no - continue  E870 AE   22                 ldx    oq_buf,y  yes - reset pointer  E872 AF   24       10        stx    oq_put,y  save new pointer  E874 EC   A4                 ldd    oq_count,y update count  E876 C3   0001               addd   #1  E879 ED   A4                 std    oq_count,y  E87B 35   97                 puls   cc,d,x,pc returnFIO Simulation Structure             06:13:59  Jan 29, 2023   Page   63Terminal   Drivers                                                                            *                     * The routines in this file make up the main system                     * terminal drivers.  Most of the work is actually                     * performed by other internal routines.                     *                                          *                     * ttopn                     *                     * Open a terminal for use.  On entry, D has                     * the device number.                     *                       E87D 34   06       ttopn     pshs   d         save device number  E87F BD   E903               jsr    ttftab    get table address  E882 A6   88 14              lda    tstate,x  get states  E885 85   04                 bita   #TOPEN    is it already open?  E887 26   02                 bne    ttopn8  E889 8D   08                 bsr    ttdopn    do actual open  E88B 10AE 06       ttopn8    ldy    taddr,x   point to device  E88E AD   D8 30              jsr    [D_ttenr,u] enable rcv interrupts  E891 35   86                 puls   d,pc      return                                                               *                     * ttdopn                     *                     * Do actual terminal open.  X points to tty entry.                     *                       E893 10AE 06       ttdopn    ldy    taddr,x   get device address  E896 6F   88 16              clr    tstate3,x  E899 34   10                 pshs   x  E89B BE   0115               ldx    utask  E89E EC   0A                 ldd    tsseq,x  E8A0 35   10                 puls   x  E8A2 ED   0C                 std    ttask,x  E8A4 AD   D8 26    10        jsr    [D_ttconf,u] configure the port                     * response of NE implies open OK                                          * if EQ then blocked by CTS if Carry is 0  E8A7 26   18                 bne    ttdop6    is it ready?  E8A9 25   0B                 bcs    ttdop5    branch if blocked by DCD  E8AB 34   31                 pshs   cc,x,y    save regs  E8AD                         seti   mask      ints  E8AF AD   D8 4A              jsr    [D_ttwcts,u] wait for CTS  E8B2 35   31                 puls   cc,x,y    reset regs  E8B4 20   DD                 bra    ttdopn    repeat open  E8B6 34   31       ttdop5    pshs   cc,x,y    save regs  E8B8                         seti   mask      ints  E8BA AD   D8 4C              jsr    [D_ttwdcd,u] wait for DCDFIO Simulation Structure             06:13:59  Jan 29, 2023   Page   64Terminal   Drivers                                    E8BD 35   31                 puls   cc,x,y    reset regs  E8BF 20   D2                 bra    ttdopn    repeat open  E8C1 86   36       ttdop6    lda    #ECHO|XTABS|CRMOD|BSECH  E8C3 A7   08                 sta    tflags,x  setup initial mode  E8C5 86   7F                 lda    #BSPCH    get backspace char  E8C7 A7   88 10              sta    tbksp,x   save in table  E8CA 86   18                 lda    #CNCLC    get cancel character  E8CC A7   88 11              sta    tcncl,x   save in table  E8CF A6   88 14              lda    tstate,x  set OPEN flag  E8D2 8A   04                 ora    #TOPEN    set open status  E8D4 A7   88 14              sta    tstate,x  save in table  E8D7 86   01                 lda    #DSR_OK   allow transmitting  E8D9 A7   88 15              sta    tstate2,x  E8DC 39                      rts              return                     FIO Simulation Structure             06:13:59  Jan 29, 2023   Page   65Terminal   Drivers                                                                            *                     * ttcls                     *                     * Close the terminal whode device number is in D.                     *                       E8DD 8D   24       ttcls     bsr    ttftab    find table entry  E8DF A6   88 14              lda    tstate,x  was the port actually open?  E8E2 85   04                 bita   #TOPEN  E8E4 27   0E                 beq    10f       no - skip flush  E8E6 84   FB                 anda   #!TOPEN   yes - clear bit  E8E8 A7   88 14              sta    tstate,x  ... so we don't get hung up ...  E8EB 17   03D5               lbsr   flusho    flush out buffers  E8EE 10AE 06                 ldy    taddr,x   get device address  E8F1 AD   D8 34              jsr    [D_ttenno,u] close down the port  E8F4 A6   88 14    10        lda    tstate,x  clear state bits  E8F7 84   F8                 anda   #PROTOCOL preserve protocol flags  E8F9 A7   88 14              sta    tstate,x  E8FC 6F   88 15              clr    tstate2,x  E8FF 6F   88 16              clr    tstate3,x  E902 39                      rts                                          *                     * ttftab                     *                     * Find tty table entry associated with device in D.                     * Exit with entry pointed at by X.                     * exit with Y point to devtab entry                     * Also compute device handler table in U.                     *                       E903 34   06       ttftab    pshs   d  E905 BE   02B0               ldx    TTYTABS   point to table  E908 86   22                 lda    #TTYSIZ   set size up  E90A 3D                      mul              calculate  offset  E90B 30   8B                 leax   d,x       point to entry  E90D 35   06                 puls   d  E90F 108E 02BE               ldy    #dev_tab  E913 86   06                 lda    #DEV_SIZE  E915 3D                      mul  E916 31   AB                 leay   d,y  E918 EE   22                 ldu    dev_type,y get handler table address  E91A 39                      rts              return                                          FIO Simulation Structure             06:14:00  Jan 29, 2023   Page   66Terminal   Drivers                                                                            *                     * tintr                     *                     * TTY interrupt handler.  Determine if the interrupt                     * is a receive or transmit one and take appropriate                     * actions.                     *                       E91B 8D   E6       tintr     bsr    ttftab    calculate table addresses  E91D 10AE 06                 ldy    taddr,x   get device address  E920 34   20       01        pshs   y         save port address  E922 EC   64                 ldd    4,s       fetch device status (if present)                       E924 AD   D8 3C              jsr    [D_tttstr,u] test for rcv int  E927 26   20                 bne    tintr2                       E929 AD   D8 3E              jsr    [D_tttstb,u] test for break interrupt  E92C 26   39                 bne    tintr5                       E92E AD   D8 42              jsr    [D_tttstc,u] test drop carrier int  E931 26   3C                 bne    tintr6                       E933 AD   D8 40              jsr    [D_tttsts,u] test CTS change interrupt  E936 26   5F                 bne    tintr9                       E938 AD   D8 44              jsr    [D_tttstd,u] test dsr change  E93B 26   41                 bne    tintr8                       E93D AD   D8 38              jsr    [D_tttstx,u] test for xmit int  E940 26   0F                 bne    tintr3                       E942 AD   D8 46              jsr    [D_tttste,u] test error int  E945 26   30                 bne    tintr7    ** should be 7? **                       E947 20   4E                 bra    tintr9  E949 AD   D8 2A    tintr2    jsr    [D_ttgetc,u] get character from port  E94C BD   EB9F               jsr    ttyin     go buffer char  E94F 20   46                 bra    tintr9  E951 BD   EA9B     tintr3    jsr    ttyst     go output another char  E954 EC   98 04              ldd    [tqout,x] check queue count  E957 27   06                 beq    tintr4  E959 10B3 0104               cmpd   OQLO      low water mark?  E95D 26   38                 bne    tintr9  E95F 10AE 04       tintr4    ldy    tqout,x   get output queue  E962 BD   E72B               jsr    wakeup  E965 20   30                 bra    tintr9  E967 CC   0002     tintr5    ldd    #INTS     set INT interrupt  E96A BD   E5FC               jsr    send_TI   send interrupt  E96D 20   28                 bra    tintr9  E96F CC   0001     tintr6    ldd    #HANGS    set hangup unt  E972 BD   E5FC               jsr    send_TI   send interruptFIO Simulation Structure             06:14:00  Jan 29, 2023   Page   67Terminal   Drivers                                    E975 20   20                 bra    tintr9  E977 C6   07       tintr7    ldb    #$07      set bell char  E979 BD   EB9F               jsr    ttyin     go buffer it  E97C 20   19                 bra    tintr9    exit  E97E A6   88 15    tintr8    lda    tstate2,x get state  E981 85   01                 bita   #DSR_OK   was it OK to send before?  E983 27   0A                 beq    85f       no - must be now  E985 84   FE                 anda   #!DSR_OK  don't allow any sending  E987 A7   88 15              sta    tstate2,x  E98A AD   D8 2E              jsr    [D_ttdisx,u] disable transmitter  E98D 20   08                 bra    tintr9    exit  E98F 8A   01       85        ora    #DSR_OK   allow transmitting  E991 A7   88 15              sta    tstate2,x  E994 BD   EA83               jsr    ttyren    restart transmission  E997 35   20       tintr9    puls   y         restore port address  E999 6E   D8 48              jmp    [D_ttend,u] clean up the port & return                     FIO Simulation Structure             06:14:00  Jan 29, 2023   Page   68Terminal   Drivers                                                                            *                     * ttyset/ttyget                     *                     * Handle the actual get or put of data for ttyset                     * and ttyget.                     *                       E99C 17   FF64     ttyset    lbsr   ttftab    get tty table address  E99F 17   FA65               lbsr   FIFOgeta  move data from FIFO  E9A2 E6   08                 ldb    tflags,x  save current flags  E9A4 A7   08                 sta    tflags,x  set flags  E9A6 C5   41                 bitb   #RAW|SCHR currently in RAW or Single Character mode?  E9A8 26   21                 bne    10f       yes - no change  E9AA 85   41                 bita   #RAW|SCHR going to one of those modes?  E9AC 27   1D                 beq    10f       no - continue  E9AE 6D   94                 tst    [tqin,x]  any unsolicited input?  E9B0 27   06                 beq    00f       no - continue  E9B2 6D   0E                 tst    tdel,x    any delimiters?  E9B4 27   02                 beq    00f  E9B6 6C   0E                 inc    tdel,x    force a delimiter  E9B8 85   01       00        bita   #RAW      going into RAW mode?  E9BA 27   0F                 beq    10f       no  E9BC A6   88 14              lda    tstate,x  yes - no HOLD processing in RAW mode  E9BF 85   02                 bita   #HOLD     currently holding?  E9C1 27   08                 beq    10f       no - continue  E9C3 84   FD                 anda   #!HOLD  E9C5 A7   88 14              sta    tstate,x  E9C8 17   00B8               lbsr   ttyren    kick output  E9CB 17   FA39     10        lbsr   FIFOgeta  move data from FIFO  E9CE A7   09                 sta    tdelay,x  set delays  E9D0 17   FA34               lbsr   FIFOgeta  move data from FIFO  E9D3 A7   88 11              sta    tcncl,x   set cancel char  E9D6 17   FA2E               lbsr   FIFOgeta  move data from FIFO  E9D9 A7   88 10              sta    tbksp,x   set back space char  E9DC 17   FA28               lbsr   FIFOgeta  move data from FIFO  E9DF 84   7F                 anda   #$7F  E9E1 A7   88 12              sta    tbaud,x   set bauds  E9E4 17   FA20               lbsr   FIFOgeta  move data from FIFO  E9E7 34   02                 pshs   a  E9E9 84   F8                 anda   #PROTOCOL save protocol bits  E9EB 34   02                 pshs   a  E9ED A6   88 14              lda    tstate,x  update state  E9F0 84   07                 anda   #(!PROTOCOL)&$FF clear current bits  E9F2 AA   E0                 ora    ,s+       set new bits  E9F4 A7   88 14              sta    tstate,x  E9F7 35   02                 puls   a  E9F9 84   0F                 anda   #$0F      get baud rate  E9FB 34   02                 pshs   a  E9FD A6   88 13              lda    tbaud2,x  update baud rate  EA00 84   F0                 anda   #$F0  EA02 AA   E0                 ora    ,s+FIO Simulation Structure             06:14:01  Jan 29, 2023   Page   69Terminal   Drivers                                    EA04 A7   88 13              sta    tbaud2,x                     *  EA07 C6   0D                 ldb    #R_TTY    return TTYSET OK  EA09 39                      rts              return                       EA0A 17   FEF6     ttyget    lbsr   ttftab    get table address  EA0D A6   08                 lda    tflags,x  get flags byte  EA0F 17   FA1B               lbsr   FIFOputa  put data into FIFO  EA12 A6   09                 lda    tdelay,x  get delays  EA14 17   FA16               lbsr   FIFOputa  put data into FIFO  EA17 A6   88 11              lda    tcncl,x   get cancel char  EA1A 17   FA10               lbsr   FIFOputa  put data into FIFO  EA1D A6   88 10              lda    tbksp,x   get b.s. char  EA20 17   FA0A               lbsr   FIFOputa  put data into FIFO  EA23 A6   88 12              lda    tbaud,x   get bauds  EA26 84   7F                 anda   #$7F  EA28 6D   0E                 tst    tdel,x    check delimiter count  EA2A 26   05                 bne    ttys45  EA2C 6D   98 02              tst    [tqproc,x] any chars in processed queue?  EA2F 27   02                 beq    ttysg5  EA31 8A   80       ttys45    ora    #%10000000 set del bit  EA33 17   F9F7     ttysg5    lbsr   FIFOputa  put data into FIFO  EA36 A6   88 14              lda    tstate,x  return protocol bits  EA39 84   F8                 anda   #PROTOCOL  EA3B 34   02                 pshs   a  EA3D A6   88 13              lda    tbaud2,x  get baud rate  EA40 84   0F                 anda   #$0F  EA42 AA   E0                 ora    ,s+  EA44 17   F9E6               lbsr   FIFOputa  put data into FIFO                     *  EA47 C6   0D                 ldb    #R_TTY    response = TTYGET = OK  EA49 39                      rts              return                                          *                     * get_pdat, get special port data                     *               EA4A  get_pdat  equ    *  EA4A 17   FEB6               lbsr   ttftab    get terminal base info                     * X=tty table, Y=devtab entry, U=devadd  EA4D 34   36                 pshs   d,x,y  EA4F AE   24                 ldx    dev_brbu,y baudrate backup  EA51 A6   84                 lda    0,x       get baud info  EA53 BD   E42D               jsr    FIFOputa  EA56 4F                      clra  EA57 BD   E42D               jsr    FIFOputa  EA5A BD   E42D               jsr    FIFOputa  EA5D BD   E42D               jsr    FIFOputa  EA60 35   36                 puls   d,x,y                     *  EA62 C6   0B                 ldb    #R_PDATA  EA64 39                      rts                     FIO Simulation Structure             06:14:01  Jan 29, 2023   Page   70Terminal   Drivers                                                 EA65  set_pdat  equ    *  EA65 17   FE9B               lbsr   ttftab    get terminal base info                     * X=tty table, Y=devtab entry, U=devadd  EA68 34   36                 pshs   d,x,y  EA6A BD   E407               jsr    FIFOgeta  EA6D AE   24                 ldx    dev_brbu,y  EA6F A7   84                 sta    0,x  EA71 AE   A4                 ldx    dev_addr,y  EA73 A7   02                 sta    brr,x     baudrate register  EA75 BD   E407               jsr    FIFOgeta  EA78 BD   E407               jsr    FIFOgeta  EA7B BD   E407               jsr    FIFOgeta  EA7E 35   36                 puls   d,x,y                     *  EA80 C6   0B                 ldb    #R_PDATA  EA82 39                      rtsFIO Simulation Structure             06:14:01  Jan 29, 2023   Page   71TTY        Handlers                                                                           *                     * All code in this section is the common tty handler                     * code.  The device dependent code resides with the                     * drivers.  This handler package requires an ACIA be used                     * for all character type devices.                     *                                                               *                     * ttyren                     *                     * Re-enable the tty output after a timeout operation.                     * Upon entry, x should point to the tty structure.                     *                       EA83               ttyren  EA83 A6   88 14              lda    tstate,x  check state  EA86 85   02                 bita   #HOLD >EA88 1026 0056               lbne   ttyst9                     *  EA8C 84   FE                 anda   #!TIMOUT  clear time out  EA8E A7   88 14              sta    tstate,x  reset state  EA91 10AE 06                 ldy    taddr,x >EA94 1027 0036               lbeq   ttys55                     *  EA98 AD   D8 2C              jsr    [D_ttenxr,u] enable xmit interrupts                                          FIO Simulation Structure             06:14:01  Jan 29, 2023   Page   72TTY        Handlers                                                                           *                     * ttyst                     *                     * TTY start will output a character to the terminal.                     * Upon entry, x should point to the tty structure in                     * use.  Getc is called for the character.                     *                       EA9B A6   88 15    ttyst     lda    tstate2,x is it ok to transmit?  EA9E 85   01                 bita   #DSR_OK >EAA0 1027 003E               lbeq   ttyst9    no - wait until it is                     *  EAA4 10AE 06                 ldy    taddr,x   get device address  EAA7 27   25                 beq    ttys55                     *  EAA9 AD   D8 36              jsr    [D_ttxbsy,u] test xmit busy?  EAAC 27   20                 beq    ttys55                     *  EAAE A6   88 14    ttyst1    lda    tstate,x  EAB1 85   01                 bita   #TIMOUT >EAB3 1026 002B               lbne   ttyst9                                          ***+++                     ***---                       EAB7               ttyst15  EAB7 10AE 04                 ldy    tqout,x   get out q  EABA 17   FD83               lbsr   get_oq    get character  EABD 26   23                 bne    ttyst9    exit if queue empty                                          ***+++                     ***---                       EABF A6   08                 lda    tflags,x  EAC1 85   01                 bita   #RAW      test raw mode  EAC3 26   03                 bne    ttyst2                     *  EAC5 5D                      tstb             char       negative?  EAC6 2B   07                 bmi    ttyst6                     *  EAC8 10AE 06       ttyst2    ldy    taddr,x   get device address  EACB 6E   D8 28              jmp    [D_ttputc,u] write characetr                     *  EACE 39            ttys55    rts                     *  EACF A6   88 14    ttyst6    lda    tstate,x  EAD2 85   60                 bita   #XANY|XONXOF HOLD processing enabled?  EAD4 26   04                 bne    ttyst65   yes                     *  EAD6 85   80                 bita   #ESCOFF   ESCape HOLD disabled?  EAD8 26   F4                 bne    ttys55    yes - ignore HOLD characterFIO Simulation Structure             06:14:02  Jan 29, 2023   Page   73TTY        Handlers                                                      *  EADA A6   88 14    ttyst65   lda    tstate,x  get states  EADD 8A   03                 ora    #TIMOUT|HOLD set hold mode  EADF A7   88 14              sta    tstate,x  reset states                     *  EAE2 10AE 06       ttyst9    ldy    taddr,x   get port  EAE5 6E   D8 2E              jmp    [D_ttdisx,u] disable xmit interrupts                     FIO Simulation Structure             06:14:02  Jan 29, 2023   Page   74TTY        Handlers                                                                           *                     * ttyout                     *                     * Put the character in b into the output q.  Upon                     * entry, x should point to the tty structure.  Tab                     * expansions, upper case mapping, and special character                     * handling are all done here.                     *                       EAE8 A6   08       ttyout    lda    tflags,x  get flags  EAEA 85   01                 bita   #RAW      raw mode?  EAEC 27   11                 beq    ttyo12                     *  EAEE A6   88 14              lda    tstate,x  no hold in RAW mode  EAF1 84   FD                 anda   #!HOLD  EAF3 A7   88 14              sta    tstate,x  EAF6 10AE 04                 ldy    tqout,x   point to out q  EAF9 17   FD68               lbsr   put_oq    put char in q  EAFC 16   0087               lbra   ttyoue    go finish                     *  EAFF C1   FF       ttyo12    cmpb   #$ff      special hold char?  EB01 27   53                 beq    ttyou6                     *  EB03 C4   7F                 andb   #$7f      mask parity bit  EB05 C1   09                 cmpb   #TABCH  EB07 26   11                 bne    ttyou2                     *  EB09 A6   08                 lda    tflags,x  check mode  EB0B 85   04                 bita   #XTABS    expand tabs?  EB0D 27   0B                 beq    ttyou2                     *  EB0F C6   20       ttyo14    ldb    #SPACE  EB11 8D   D5                 bsr    ttyout    output it  EB13 A6   0F                 lda    tcolm,x   check column  EB15 85   07                 bita   #7  EB17 26   F6                 bne    ttyo14                     *  EB19 39                      rts                     *  EB1A A6   08       ttyou2    lda    tflags,x  check mode  EB1C 85   08                 bita   #LCASE    lower case mode?  EB1E 27   25                 beq    ttyou4                     *  EB20 C1   61                 cmpb   #'a       lower case letter?  EB22 25   08                 blo    ttyo22                     *  EB24 C1   7A                 cmpb   #'z  EB26 22   04                 bhi    ttyo22                     *  EB28 C0   20                 subb   #$20      make upper  EB2A 20   19                 bra    ttyou4FIO Simulation Structure             06:14:02  Jan 29, 2023   Page   75TTY        Handlers                                                      *  EB2C 108E EB94     ttyo22    ldy    #lcht     point to map                     *  EB30 E1   A1       ttyo23    cmpb   0,y++  EB32 26   0D                 bne    ttyo24                     *  EB34 E6   3F                 ldb    -1,y      get mapped char  EB36 34   04                 pshs   b  EB38 C6   5C                 ldb    #'\       output escape >EB3A 17   FFAB               lbsr   ttyout  EB3D 35   04                 puls   b  EB3F 20   15                 bra    ttyou6                     *  EB41 6D   A4       ttyo24    tst    0,y       end of list?  EB43 26   EB                 bne    ttyo23                     *  EB45 C1   0D       ttyou4    cmpb   #CR  EB47 26   0D                 bne    ttyou6                     *  EB49 A6   08                 lda    tflags,x  check mode  EB4B 85   10                 bita   #CRMOD  EB4D 27   07                 beq    ttyou6                     *  EB4F C6   0A                 ldb    #NL       convert to NL >EB51 17   FF94               lbsr   ttyout    output it  EB54 C6   0D                 ldb    #CR       reset CR                     *  EB56 10AE 04       ttyou6    ldy    tqout,x   point to out q  EB59 17   FD08               lbsr   put_oq  EB5C C1   0D                 cmpb   #CR  EB5E 22   20                 bhi    ttyou8                     *  EB60 26   02                 bne    ttyo75    is it cr?                     *  EB62 6F   0F                 clr    tcolm,x   clear out column count!                     *  EB64 C1   09       ttyo75    cmpb   #9        is it tab character?  EB66 26   0A                 bne    ttyo77                     *  EB68 A6   0F                 lda    tcolm,x   get column count  EB6A 84   F8                 anda   #!7       mask low 3 bits  EB6C 8B   08                 adda   #8        add in tab  EB6E A7   0F                 sta    tcolm,x   save new column  EB70 20   14                 bra    ttyoue                     *  EB72 C1   08       ttyo77    cmpb   #$08      hardware backspace?  EB74 25   10                 blo    ttyoue  EB76 26   08                 bne    ttyou8  EB78 6D   0F                 tst    tcolm,x   column zero?  EB7A 27   0A                 beq    ttyoue  EB7C 6A   0F                 dec    tcolm,x  EB7E 20   06                 bra    ttyoueFIO Simulation Structure             06:14:02  Jan 29, 2023   Page   76TTY        Handlers                                                      *  EB80 C1   20       ttyou8    cmpb   #SPACE    is it control char?  EB82 25   02                 blo    ttyoue                     *  EB84 6C   0F                 inc    tcolm,x   bump column count                     *  EB86 A6   88 14    ttyoue    lda    tstate,x  ** kludge for ACIA **  EB89 85   02                 bita   #HOLD  EB8B 26   06                 bne    ttyoe1                     *  EB8D 10AE 06                 ldy    taddr,x   get device address  EB90 6E   D8 2C              jmp    [D_ttenxr,u] enable xmit interrupts                     *  EB93 39            ttyoe1    rts              return                       EB94 7E 5E 7C 21   lcht      fcc    "~^|!{(})`'"  EB9E 00                      fcb    0FIO Simulation Structure             06:14:02  Jan 29, 2023   Page   77TTY        Handlers                                                                           *                     * ttyin                     *                     * Place the character in b on the input q.                     * Upon entry, x should point to the tty structure.                     * Signal processing and character mapping are                     * performed in this roiutine.                     *                       EB9F               ttyin                                          ***+++                     ***---                       EB9F A6   08                 lda    tflags,x  raw mode?  EBA1 85   01                 bita   #RAW  EBA3 26   51                 bne    ttyi44                     *  EBA5 C4   7F                 andb   #$7f      mask par bit                     *  EBA7 C1   20       ttyin0    cmpb   #SPACE    control char?  EBA9 24   4B                 bhs    ttyi44    skip junk if so                     *  EBAB C1   1C       ttyin2    cmpb   #QUITC  EBAD 27   09                 beq    ttyi25                     *  EBAF C1   03                 cmpb   #INTRC  EBB1 26   0B                 bne    ttyin3                     *  EBB3 CC   0002               ldd    #INTS     set signal  EBB6 20   03                 bra    ttyi27                     *  EBB8 CC   0003     ttyi25    ldd    #QUITS    set signal                     *  EBBB 7E   E5FC     ttyi27    jmp    send_TI   send interrupt & get out                     *  EBBE A6   88 14    ttyin3    lda    tstate,x  get state  EBC1 C1   1B                 cmpb   #HOLDC    Escape?  EBC3 26   10                 bne    ttyi34                     *  EBC5 85   80                 bita   #ESCOFF   escape processing disabled?  EBC7 26   27                 bne    ttyin4    yes - ignore ESC as special character                     *  EBC9 85   02                 bita   #HOLD     holding??  EBCB 26   1B                 bne    ttyi36                     *  EBCD 8A   03       ttyi33    ora    #TIMOUT|HOLD set HOLDing  EBCF A7   88 14              sta    tstate,x  EBD2 7E   EA83               jmp    ttyren                     *  EBD5 85   40       ttyi34    bita   #XONXOF   doing XON/XOFF processing?FIO Simulation Structure             06:14:03  Jan 29, 2023   Page   78TTY        Handlers                                   EBD7 27   17                 beq    ttyin4    no - don't bother                     *  EBD9 C1   13                 cmpb   #XOFFC    XOFF character?  EBDB 26   07                 bne    ttyi35    no                     *  EBDD 85   02                 bita   #HOLD     already stopped?  EBDF 27   EC                 beq    ttyi33    no - stop output                     *  EBE1 16   00B6               lbra   ttyin9    ignore XOFF if already stopped!                     *  EBE4 C1   11       ttyi35    cmpb   #XONC     XON character  EBE6 26   08                 bne    ttyin4    no - continue                     * -- HOLD off  EBE8 84   FD       ttyi36    anda   #!HOLD    clear hold mode  EBEA A7   88 14              sta    tstate,x  EBED 7E   EA83               jmp    ttyren                     *  EBF0 C1   0D       ttyin4    cmpb   #CR       new line?  EBF2 26   02                 bne    ttyi44                     *  EBF4 6F   0F                 clr    tcolm,x   clear out column                     *  EBF6 A6   88 14    ttyi44    lda    tstate,x  get current state  EBF9 85   20                 bita   #XANY     allow any character to restart?  EBFB 27   04                 beq    ttyi46    no - continue on                     *  EBFD 85   02                 bita   #HOLD     currently stopped?  EBFF 26   E7                 bne    ttyi36    yes - go restart it                     *  EC01 10AE 84       ttyi46    ldy    tqin,x    input Q pointer  EC04 A6   A4                 lda    0,y       check q count                                          ***+++                     ***---                       EC06 81   FE                 cmpa   #CHRLIM   hit limit?  EC08 1024 008F               lbhs   flusht    flush this guy!                     *  EC0C B6   011B               lda    cbufct    check buffer count  EC0F B1   011C               cmpa   lcbuf  EC12 1022 0085               lbhi   flusht    if overflow, flush!                     *  EC16 A6   08       49        lda    tflags,x  check mode  EC18 85   01                 bita   #RAW      raw mode?  EC1A 27   10                 beq    ttyin5                     *  EC1C 17   FBCB               lbsr   putc      put char in q  EC1F 10AE 84                 ldy    tqin,x    get in q  EC22 34   04                 pshs   b         save char  EC24 17   FB04               lbsr   wakeup    awaken those waiting  EC27 35   04                 puls   b         get character  EC29 6C   0E                 inc    tdel,x    bump delimiter countFIO Simulation Structure             06:14:03  Jan 29, 2023   Page   79TTY        Handlers                                   EC2B 39                      rts              return                     *  EC2C 85   08       ttyin5    bita   #LCASE  EC2E 27   0A                 beq    ttyin6                     *  EC30 C1   41                 cmpb   #'A       capital letter?  EC32 25   06                 blo    ttyin6                     *  EC34 C1   5A                 cmpb   #'Z  EC36 22   02                 bhi    ttyin6                     *  EC38 CB   20                 addb   #$20      make lower case                     *  EC3A 10AE 84       ttyin6    ldy    tqin,x    point to input q  EC3D 17   FBAA               lbsr   putc  EC40 A6   08                 lda    tflags,x  check mode  EC42 85   40                 bita   #SCHR     single char mode?  EC44 26   0A                 bne    ttyi65                     *  EC46 C1   0D                 cmpb   #CR  EC48 22   12                 bhi    ttyin7                     *  EC4A 27   04                 beq    ttyi65                     *  EC4C C1   04                 cmpb   #EOTCH  EC4E 26   0C                 bne    ttyin7                     *  EC50 10AE 84       ttyi65    ldy    tqin,x    point to input q  EC53 34   04                 pshs   b  EC55 17   FAD3               lbsr   wakeup    wake up waiting  EC58 6C   0E                 inc    tdel,x    bump count                     *  EC5A 35   04       ttyi67    puls   b         reset char                     *  EC5C E1   88 11    ttyin7    cmpb   tcncl,x   kill character?  EC5F 26   18                 bne    ttyin8                     *  EC61 A6   08                 lda    tflags,x  check mode  EC63 85   40                 bita   #SCHR     single character?  EC65 26   12                 bne    ttyin8                     *  EC67 C6   5E                 ldb    #'^       output '^x\n'  EC69 17   FE7C               lbsr   ttyout  EC6C C6   78                 ldb    #'x  EC6E 17   FE77               lbsr   ttyout  EC71 C6   0D                 ldb    #CR  EC73 17   FE72               lbsr   ttyout  EC76 7E   EA9B               jmp    ttyst                     *  EC79 A6   08       ttyin8    lda    tflags,x  check mode  EC7B 85   02                 bita   #ECHO  EC7D 27   1B                 beq    ttyin9FIO Simulation Structure             06:14:03  Jan 29, 2023   Page   80TTY        Handlers                                                      *  EC7F E1   88 10              cmpb   tbksp,x   back space?  EC82 26   10                 bne    ttyi85                     *  EC84 85   20                 bita   #BSECH    echo bs?  EC86 27   0C                 beq    ttyi85                     *  EC88 C6   08                 ldb    #$08      set bs  EC8A 17   FE5B               lbsr   ttyout  EC8D C6   20                 ldb    #SPACE    set space  EC8F 17   FE56               lbsr   ttyout  EC92 C6   08                 ldb    #$08      reset char                     *  EC94 17   FE51     ttyi85    lbsr   ttyout    echo character  EC97 7E   EA9B               jmp    ttyst     start output                     *  EC9A 39            ttyin9    rts              return                     FIO Simulation Structure             06:14:04  Jan 29, 2023   Page   81TTY        Handlers                                                                           *                     * flusht                     *                     * Flush all queues belonging to this terminal.                     *                       EC9B               flusht >EC9B 17   0050               lbsr   flushi    flush Input queues  EC9E 10AE 04                 ldy    tqout,x   point to out q                     *  ECA1 17   FB9C     10        lbsr   get_oq    flush out q  ECA4 2A   FB                 bpl    10b                     *  ECA6 10AE 84                 ldy    tqin,x    get input q  ECA9 17   FA7F               lbsr   wakeup    wakeup input q waiters  ECAC 10AE 04                 ldy    tqout,x   wake up out q waiters  ECAF 17   FA79               lbsr   wakeup  ECB2 A6   88 14              lda    tstate,x  get states  ECB5 84   FC                 anda   #!(HOLD|TIMOUT) clear hold mode  ECB7 A7   88 14              sta    tstate,x  ECBA CC   0000               ldd    #0        no pre-sold output  ECBD ED   88 18              std    tsold,x  ECC0 7E   EA9B               jmp    ttyst                                          *                     * flusho                     *                     * Flush all this guys queues after waiting for the                     * output q to empty.                     *                       ECC3 A6   88 14    flusho    lda    tstate,x  check state  ECC6 85   02                 bita   #HOLD     holding?  ECC8 27   08                 beq    fluso1                     *  ECCA 84   FC       fluso0    anda   #!(HOLD|TIMOUT)  ECCC A7   88 14              sta    tstate,x  clear hold  ECCF 17   FDB1               lbsr   ttyren    kick output                     *  ECD2 EC   98 04    fluso1    ldd    [tqout,x] check char count >ECD5 1027 FFC2               lbeq   flusht  ECD9 A6   88 14              lda    tstate,x  check for hold  ECDC 85   02                 bita   #HOLD  ECDE 26   EA                 bne    fluso0                                          ***+++                     ***---                       ECE0 10AE 04                 ldy    tqout,x   point to out q  ECE3 C6   EC                 ldb    #TTYOPR   set priority  ECE5 34   10                 pshs   x         save xFIO Simulation Structure             06:14:04  Jan 29, 2023   Page   82TTY        Handlers                                   ECE7 17   FA65               lbsr   sleep  ECEA 35   10                 puls   x  ECEC 20   E4                 bra    fluso1                                          *                     * flushi - Flush input Queues only                     *  ECEE               flushi  ECEE 10AE 02                 ldy    tqproc,x  get procd q                     *  ECF1 17   FAAE     10        lbsr   getc      get character  ECF4 2A   FB                 bpl    10b                     *  ECF6 10AE 84                 ldy    tqin,x    flush input q                     *  ECF9 17   FAA6     20        lbsr   getc  ECFC 2A   FB                 bpl    20b                     *  ECFE 6F   0E                 clr    tdel,x    clear delim count                                          ***+++                     ***---                       ED00 39                      rts                                                                                    *                     * xtprcq                     *                     * Transfer characters from input q to procd q.  If not                     * in raw mode, do escape, backspace, and cancel                     * processing.  Enter with x pointing to tty structure.                     *                       ED01 34   01       xtprcq    pshs   cc        save cc  ED03                         seti   mask      ints  ED05 6D   0E                 tst    tdel,x    delimiters yet?  ED07 26   10                 bne    xtprc0                                          ***+++                     ***---                       ED09 10AE 84                 ldy    tqin,x    sleep on input q  ED0C C6   F6                 ldb    #TTYIPR  ED0E 34   10                 pshs   x         save x  ED10 17   FA3C               lbsr   sleep  ED13 35   10                 puls   x  ED15 35   01                 puls   cc        reset cc  ED17 20   E8                 bra    xtprcq                     *  ED19 35   01       xtprc0    puls   cc        reset ccFIO Simulation Structure             06:14:04  Jan 29, 2023   Page   83TTY        Handlers                                   ED1B 6D   94                 tst    [tqin,x]  input q empty?  ED1D 26   04                 bne    xtprc1                     *  ED1F 6A   0E                 dec    tdel,x    dec the del count  ED21 20   DE                 bra    xtprcq    repeat test                     *  ED23 108E 016E     xtprc1    ldy    #prcbuf+2 point to buffer  ED27 5F                      clrb  ED28 34   24                 pshs   b,y       delimiter flag                     *  ED2A 6D   E4       xtprc2    tst    0,s       delimiter?  ED2C 27   10                 beq    xtpr22                     *  ED2E 6F   E4                 clr    0,s       clear del flag  ED30 6D   0E                 tst    tdel,x    check del count  ED32 27   02                 beq    xtpr21    if 0 - skip                     *  ED34 6A   0E                 dec    tdel,x    dec the del count                     *  ED36 A6   08       xtpr21    lda    tflags,x  get flags  ED38 85   41                 bita   #RAW|SCHR in raw mode?  ED3A 1027 0085               lbeq   xtprc5                     *  ED3E 10AE 84       xtpr22    ldy    tqin,x    point to in q  ED41 17   FA5E               lbsr   getc      get a character  ED44 2B   7D                 bmi    xtprc5    none left?                     *  ED46 C1   0D                 cmpb   #CR       check for delim  ED48 27   0C                 beq    xtpr25                     *  ED4A C1   04                 cmpb   #EOTCH  ED4C 26   0A                 bne    xtprc3                     *  ED4E 6C   E4                 inc    0,s       set del flag  ED50 A6   08                 lda    tflags,x  get flags  ED52 85   40                 bita   #SCHR     single char mode?  ED54 26   D4                 bne    xtprc2                     *  ED56 6C   E4       xtpr25    inc    0,s       set del flag                     *  ED58 A6   08       xtprc3    lda    tflags,x  check mode  ED5A 85   41                 bita   #RAW|SCHR  ED5C 27   04                 beq    xtpr31                     *  ED5E 6C   E4                 inc    0,s       set del flag for each raw char  ED60 20   51                 bra    xtpr45                     *  ED62 10AE 61       xtpr31    ldy    1,s       point to buffer  ED65 A6   3F                 lda    -1,y      check previous  ED67 81   5C                 cmpa   #'\       escape?  ED69 26   15                 bne    xtca32                     *FIO Simulation Structure             06:14:05  Jan 29, 2023   Page   84TTY        Handlers                                   ED6B C1   04                 cmpb   #EOTCH    is it eot?  ED6D 27   0A                 beq    xtp315                     *  ED6F E1   88 10              cmpb   tbksp,x   backspace char?  ED72 27   05                 beq    xtp315                     *  ED74 E1   88 11              cmpb   tcncl,x   cancel char?  ED77 26   07                 bne    xtca32                     *  ED79 31   3F       xtp315    leay   -1,y      backup over slash  ED7B 10AF 61                 sty    1,s       save new ptr  ED7E 20   33                 bra    xtpr45                     *  ED80 E1   88 10    xtca32    cmpb   tbksp,x   backspace char?  ED83 26   0D                 bne    xtca33                     *  ED85 108C 016E               cmpy   #prcbuf+2 buffer begin?  ED89 27   9F                 beq    xtprc2                     *  ED8B 31   3F                 leay   -1,y      backup pointer  ED8D 10AF 61                 sty    1,s  ED90 20   98                 bra    xtprc2                     *  ED92 C1   04       xtca33    cmpb   #EOTCH    eot char?  ED94 27   94                 beq    xtprc2                     *  ED96 E1   88 11              cmpb   tcncl,x   cancel char?  ED99 26   04                 bne    xtprc4                     *  ED9B 35   24                 puls   b,y       -- caution (order)  ED9D 20   84                 bra    xtprc1    repeat all                     *  ED9F C1   20       xtprc4    cmpb   #$20      check for control char  EDA1 24   10                 bhs    xtpr45                     *  EDA3 C1   0D                 cmpb   #CR       is it cr?  EDA5 27   0C                 beq    xtpr45                     *  EDA7 C1   09                 cmpb   #9        is it tab char?  EDA9 27   08                 beq    xtpr45                     *  EDAB A6   08                 lda    tflags,x  get flags  EDAD 85   80                 bita   #CNTRL    control char ignore?  EDAF 1026 FF77               lbne   xtprc2                     *  EDB3 10AE 61       xtpr45    ldy    1,s       get pointer  EDB6 E7   A0                 stb    0,y+      transfer char  EDB8 10AF 61                 sty    1,s       save pointer  EDBB 108C 026C               cmpy   #prcbuf+PRCSIZ overflow??  EDBF 1025 FF67               lblo   xtprc2                     *  EDC3 35   04       xtprc5    puls   b         remove del flag from stackFIO Simulation Structure             06:14:05  Jan 29, 2023   Page   85TTY        Handlers                                   EDC5 10AE 02                 ldy    tqproc,x  get procd q  EDC8 34   10                 pshs   x  EDCA 8E   016E               ldx    #prcbuf+2 point to processed buf                     *  EDCD AC   62       xtprc6    cmpx   2,s       end of buffer?  EDCF 24   07                 bhs    xtprc7                     *  EDD1 E6   80                 ldb    0,x+      get character  EDD3 17   FA14               lbsr   putc  EDD6 20   F5                 bra    xtprc6                     *  EDD8               xtprc7                                          ***+++                     ***---                       EDD8 CC   FFFF               ldd    #-1       set good  EDDB 35   B0                 puls   x,y,pc    return                                          ***+++                     ***---                     FIO Simulation Structure             06:14:05  Jan 29, 2023   Page   86TTY        Handlers                                                                           *                     * req_read - CPU has informed us he wants to read                     * Tell him when some data is available.                     *  EDDD 17   FB23     req_read  lbsr   ttftab    get TTY table address  EDE0 A6   98 02              lda    [tqproc,x] anything available?  EDE3 26   03                 bne    00f       yes - go use it                     *  EDE5 17   FF19               lbsr   xtprcq    go process input (wait if none there)                     *  EDE8 A6   98 02    00        lda    [tqproc,x] get input processed count  EDEB 27   0A                 beq    05f       jump for EOF detected                     *  EDED 81   01                 cmpa   #1        special case for single character  EDEF 27   09                 beq    10f                     *  EDF1 E6   08                 ldb    tflags,x  single character & RAW always return 1 char  EDF3 C5   41                 bitb   #RAW|SCHR  EDF5 26   03                 bne    10f                     *  EDF7 C6   05       05        ldb    #R_RDOK   inform CPU data now available  EDF9 39                      rts                     *  EDFA 10AE 02       10        ldy    tqproc,x  go fetch character  EDFD 17   F9A2               lbsr   getc  EE00 86   09                 lda    #R_RD1C   inform CPU single character returned  EE02 1E   89                 exg    a,b  EE04 39                      rts                                          *                     * read_data - CPU wants IOP to send data                     *  Max # chars to move in transaction speicific value                     *  EE05 17   FAFB     read_data lbsr   ttftab    get TTY table address  EE08 FE   0115               ldu    utask     see how many chars to send  EE0B 10AE 02                 ldy    tqproc,x  input queue pointer  EE0E 6F   E2                 clr    ,-s       set FIFO counter                     *  EE10 A6   A4       10        lda    0,y       any more characters?  EE12 27   0C                 beq    20f       no - done                     *  EE14 17   F98B               lbsr   getc      fetch character  EE17 17   F61B               lbsr   FIFO_put  put into FIFO  EE1A 6C   E4                 inc    0,s       bump FIFO count  EE1C 6A   4C                 dec    tstval,u  does the guy want more?  EE1E 26   F0                 bne    10b                     *  EE20 A6   E0       20        lda    ,s+       get # chars in FIFO  EE22 C6   06                 ldb    #R_READ   data now available in FIFO  EE24 6D   A4                 tst    0,y       any more data in case guy wants it?  EE26 27   02                 beq    30fFIO Simulation Structure             06:14:05  Jan 29, 2023   Page   87TTY        Handlers                                                      *  EE28 C6   0C                 ldb    #R_READM  yes - special response                     *  EE2A 39            30        rtsFIO Simulation Structure             06:14:06  Jan 29, 2023   Page   88TTY        Handlers                                                                           *                     * ttywrt                     *                     * The main terminal write routine.  Control is passed                     * to here from the device driver routine which calculates                     * the ttys structure location and passes it in x.                     *                       EE2B D6   13       ttywrt    ldb    fifo_cnt+1 get FIFO input length  EE2D C1   00                 cmpb   #0        anything in FIFO?  EE2F 27   0E                 beq    90f       no - exit                     *  EE31 34   04                 pshs   b         save input length                     *  EE33 17   F5DA     10        lbsr   FIFO_get  fetch character  EE36 17   FCAF               lbsr   ttyout    output it  EE39 6A   E4                 dec    0,s       decrement count  EE3B 26   F6                 bne    10b       repeat                     *  EE3D 35   02                 puls   a         clean up stack                     *  EE3F 34   01       90        pshs   cc        save cc  EE41                         seti   mask      ints  EE43 17   FC55               lbsr   ttyst     give output a kick  EE46 35   81                 puls   cc,pc     return                                          *                     * open_tty - Perform device open                     *  EE48               open_tty  EE48 BD   E87D               jsr    ttopn     perform tty open                                          ***+++                     ***---                       EE4B C6   01       10        ldb    #R_OPEN  EE4D 39                      rts                                          *                     * close_tty - Perform device close                     *  EE4E               close_tty  EE4E BD   E8DD               jsr    ttcls     perform tty close                                          ***+++                     ***---                       EE51 C6   02       10        ldb    #R_CLOSE  EE53 39                      rts                                          *FIO Simulation Structure             06:14:06  Jan 29, 2023   Page   89TTY        Handlers                                                      * req_write - Request permission to write data                     *  EE54               req_write  EE54 BD   E903               jsr    ttftab    get TTY table                                          ***+++                     ***---                       EE57 34   01       05        pshs   cc        mask interrupts while fiddling                     *  EE59               10        seti  EE5B 10AE 04                 ldy    tqout,x   get output queue pointer  EE5E EC   A4                 ldd    oq_count,y get queue length  EE60 E3   88 18              addd   tsold,x   include any space already sold  EE63 F3   E05A               addd   fio_fsz   and assume the CPU will send this many more  EE66 10B3 0102               cmpd   OQHI      space available?  EE6A 2F   16                 ble    20f       yes - OK                     *  EE6C A6   09                 lda    tdelay,x  special flush bit?  EE6E 85   40                 bita   #$40  EE70 27   05                 beq    15f       no - go to sleep                     *  EE72 BD   ECC3               jsr    flusho    yes - flush output  EE75 20   E2                 bra    10b       try again                     *  EE77 34   76       15        pshs   d,x,y,u   no - save registers  EE79 C6   E2                 ldb    #TTYSPR  EE7B BD   E74F               jsr    sleep  EE7E 35   76                 puls   d,x,y,u   restore registers  EE80 20   D7                 bra    10b       try again                     *  EE82 10BE 0115     20        ldy    utask     am I supposed to be dead?  EE86 6D   28                 tst    tssgnl,y  EE88 26   0D                 bne    30f       yes - abort                     *  EE8A EC   88 18              ldd    tsold,x   update amount pre-sold  EE8D F3   E05A               addd   fio_fsz   -- assume entire FIFO load  EE90 ED   88 18              std    tsold,x  EE93 C6   03                 ldb    #R_REQOK  request granted code  EE95 35   81                 puls   cc,pc     return                     *  EE97 35   01       30        puls   cc        clean up stack  EE99 32   62                 leas   2,s       -- pop normal return  EE9B 39                      rts              abnormal   I/O completion (no response)                                          *                     * write_data - Write data to a terminal                     *  EE9C               write_data  EE9C BD   E903               jsr    ttftab    get tty table pointer >EE9F BD   EE2B               jsr    ttywrt    go consume data  EEA2 34   01                 pshs   cc        save interrupt stateFIO Simulation Structure             06:14:06  Jan 29, 2023   Page   90TTY        Handlers                                   EEA4                         seti   mask      interrupts  EEA6 EC   88 18              ldd    tsold,x  EEA9 B3   E05A               subd   fio_fsz  EEAC 2A   03                 bpl    00f                     *  EEAE CC   0000               ldd    #0        don't screw up!                     *  EEB1 ED   88 18    00        std    tsold,x   update count  EEB4 10AE 04                 ldy    tqout,x   wake up anybody waiting for space                                          ***+++                     ***---                       EEB7 BD   E72B     10        jsr    wakeup  EEBA C6   04                 ldb    #R_WRITE  EEBC 35   81                 puls   cc,pc     return                     *  EEBE 0D 46 49 46   00        fcc    $d,'FIFO consumed, wakeup at $',0                                          *                     * Write single character                     *  -- Character passed via transaction message                     *  EEDA 34   01       wrt_sc    pshs   cc        save interrupt state  EEDC BD   E903               jsr    ttftab    compute tty table address                     *  EEDF 10AE 04       00        ldy    tqout,x   output Q pointer  EEE2 EC   A4                 ldd    oq_count,y check for overrun  EEE4 10B3 0102               cmpd   OQHI  EEE8 23   12                 bls    10f       jump if space                     *  EEEA A6   09                 lda    tdelay,x  special flush bit?  EEEC 85   40                 bita   #$40  EEEE 27   05                 beq    05f       no - wait for space                     *  EEF0 BD   ECC3               jsr    flusho    yes - make space!  EEF3 20   EA                 bra    00b                     *  EEF5 C6   EC       05        ldb    #TTYOPR   wait a while  EEF7 BD   E74F               jsr    sleep  EEFA 20   E3                 bra    00b       try again                     *  EEFC 10BE 0115     10        ldy    utask     fetch character  EF00 E6   2C                 ldb    tstval,y  EF02 BD   EAE8               jsr    ttyout    send to output queue  EF05                         seti   mask      interrupts  EF07 BD   EA9B               jsr    ttyst     kick output - make sure it starts  EF0A C6   04                 ldb    #R_WRITE  EF0C 35   81                 puls   cc,pc     return                                          *                     * send_int - Interrupt all tasks associated with a terminalFIO Simulation Structure             06:14:07  Jan 29, 2023   Page   91TTY        Handlers                                                      *  EF0E 34   76       send_int  pshs   d,x,y,u  EF10 BD   E903               jsr    ttftab    get TTY table address  EF13 BD   EC9B               jsr    flusht    flush terminal buffers  EF16 A6   61                 lda    1,s       get terminal #  EF18 BD   E584               jsr    int_all   interrupt all associated tasks  EF1B BE   0115               ldx    utask     also interrupt current task if appropriate  EF1E A6   61                 lda    1,s  EF20 A1   0E                 cmpa   tsdev+1,x  EF22 26   03                 bne    10f                     *  EF24 BD   E784               jsr    xmtint                     *  EF27 35   F6       10        puls   d,x,y,u,pc clean up stack & return                                          ***+++                     ***----FIO Simulation Structure             06:14:07  Jan 29, 2023   Page   92ACIA       interface routines                                                                                      *                     * 6850 Device table                     *  EF29               DEV_6850  EF29 E4A6                    fdb    bad_cmd   0 -  EF2B EE48                    fdb    open_tty  1 -  EF2D EE4E                    fdb    close_tty 2 -  EF2F EE54                    fdb    req_write 3 -  EF31 EE9C                    fdb    write_data 4 -  EF33 EDDD                    fdb    req_read  5 -  EF35 EE05                    fdb    read_data 6 -  EF37 EEDA                    fdb    wrt_sc    7 -  EF39 E99C                    fdb    ttyset    8 -  EF3B EA0A                    fdb    ttyget    9 -  EF3D E4A6                    fdb    bad_cmd   A -  EF3F E4A6                    fdb    bad_cmd   B -  EF41 E4A6                    fdb    bad_cmd   C -  EF43 EA4A                    fdb    get_pdat  D -  EF45 EA65                    fdb    set_pdat  E -  EF47 E4A6                    fdb    bad_cmd   F -  EF49 EF7D                    fdb    SR4_IRQ  EF4B EF97                    fdb    SR4_init  EF4D EFA5                    fdb    SR4_test                     *  EF4F F021                    fdb    SR4ttconf  EF51 F05A                    fdb    SR4ttputc  EF53 F05D                    fdb    SR4ttgetc  EF55 F060                    fdb    SR4ttnxr  EF57 F068                    fdb    SR4ttdisx  EF59 F070                    fdb    SR4ttnr  EF5B F078                    fdb    SR4ttnx  EF5D F080                    fdb    SR4ttnno  EF5F F088                    fdb    SR4ttxbsy  EF61 F08D                    fdb    SR4ttstx  EF63 F095                    fdb    SR4ttiscts  EF65 F09F                    fdb    SR4ttstr  EF67 F0A7                    fdb    SR4ttstb  EF69 F0B6                    fdb    SR4ttsts  EF6B F0B8                    fdb    SR4ttstc  EF6D F0C6                    fdb    SR4ttstd  EF6F F0C1                    fdb    SR4ttste  EF71 F0C9                    fdb    SR4ttnd  EF73 F0CA                    fdb    SR4ttwcts  EF75 F0D4                    fdb    SR4ttwdcd                     *                                          * The routines in this file are specific to an ACIA (6850).                     * They are called from the "ttyhan" and "ttydrv" files.                     * preset table for baudrates at each port                     *FIO Simulation Structure             06:14:07  Jan 29, 2023   Page   93ACIA       interface routines                                            * baudrate latch backup bytes, for 2 acia's each                     *                     * CB B2 B1 B0 CA A2 A1 A0       C=/CTS override, 0 = active                     * X2 X1 X0 are baudrate select bits 0K3/0K6/1K2/2K4/4K8/9K6/19K2/38K4                     * 111 is highest baudrate, 000 is lowest.                     *  EF77 77            brbupr    fcb    $77       acia 0 and 1 board 1  EF78 77                      fcb    $77       acia 2 and 3  EF79 77                      fcb    $77       acia 4 and 5 board 2  EF7A 77                      fcb    $77       acia 6 and 7  EF7B 77                      fcb    $77       acia 8 and 9 board3  EF7C 77                      fcb    $77       acia 10 and 11               0006  BRTBSIZ   equ    *-brbupr                                          *                     * Check for and process an ACIA interrupt                     *  D - Device #                     *  X - Device address                     *  EF7D 34   76       SR4_IRQ   pshs   d,x,y,u   save registers just in case  EF7F A6   84                 lda    csr,x     check for interrupt  EF81 85   80                 bita   #AS_IRQ  EF83 27   0E                 beq    10f       jump if no interrupt                     *  EF85 5F                      clrb  EF86 34   06                 pshs   d                     *  EF88 EC   62                 ldd    2,s       restore device #  EF8A BD   E91B               jsr    tintr     go process interrupt  EF8D 32   62                 leas   2,s       remove device status  EF8F 1A   01                 sec              --         interrupt processed  EF91 20   02                 bra    99f                     *  EF93 1C   FE       10        clc              --         no interrupt processed                     *  EF95 35   F6       99        puls   d,x,y,u,pc                                          *                     * Initialize ACIA port                     *   B - Device #                     *   X - Device address                     *  EF97 34   76       SR4_init  pshs   d,x,y,u  EF99 6F   02                 clr    2,x       init baudrate latch  EF9B 86   43                 lda    #AC_DRTS+AC_MRES set up reset code  EF9D A7   84                 sta    0,x       reset acia  EF9F 34   06                 pshs   d         delay  EFA1 35   06                 puls   d  EFA3 35   F6                 puls   d,x,y,u,pc                                          *                     * Determine if CPU09SR4 ACIA board is presentFIO Simulation Structure             06:14:07  Jan 29, 2023   Page   94ACIA       interface routines                                            *  D - ACIA port address                     *  Y - Device table address                     *  <CS> if present & ACIA                     *  EFA5 34   56       SR4_test  pshs   d,x,u  EFA7 1F   03                 tfr    d,u  EFA9 86   43                 lda    #AC_DRTS+AC_MRES set up reset code  EFAB A7   C4                 sta    0,u       reset acia  EFAD 34   06                 pshs   d         delay  EFAF 35   06                 puls   d  EFB1 A6   C4                 lda    0,u       check response  EFB3 27   08                 beq    00f                     *  EFB5 84   F3                 anda   #%11110011 todo: bit names  EFB7 27   04                 beq    00f                     *  EFB9 1C   FE                 clc              --         not an 6350  EFBB 20   62                 bra    99f                     *                     * found an ACIA, fill in the port info                     *  EFBD 8E   00E0     00        ldx    #CFGDAT   offset  EFC0 A6   02                 lda    NUM_TRM,x Compute device table address  EFC2 C6   06                 ldb    #DEV_SIZE  EFC4 3D                      mul  EFC5 108E 02BE               ldy    #dev_tab  EFC9 31   AB                 leay   d,y  EFCB A6   02                 lda    NUM_TRM,x  EFCD 46                      rora             2 ports for each baudrate backup  EFCE CE   0310               ldu    #brbutb   address of table  EFD1 33   C6                 leau   a,u                     * account for 4 ports CPU09SR4  EFD3 E6   02                 ldb    NUM_TRM,x  EFD5 CB   04                 addb   #4  EFD7 E7   02                 stb    NUM_TRM,x                     *  EFD9 EC   E4                 ldd    0,s       port address  EFDB 8E   EF29               ldx    #DEV_6850  EFDE ED   A4                 std    dev_addr,y device address  EFE0 AF   22                 stx    dev_type,y handler dispatch table  EFE2 EF   24                 stu    dev_brbu,y baudrate latch backup  EFE4 34   02                 pshs   a  EFE6 A6   C9 EC67            lda    (brbupr-brbutb),u get rom preset  EFEA A7   C4                 sta    0,u  EFEC 35   02                 puls   a  EFEE 31   26                 leay   DEV_SIZE,y  EFF0 C3   0004               addd   #4        offset to next ACIA  EFF3 ED   A4                 std    dev_addr,y  EFF5 AF   22                 stx    dev_type,y  EFF7 EF   24                 stu    dev_brbu,y  EFF9 31   26                 leay   DEV_SIZE,y  EFFB C3   0004               addd   #4FIO Simulation Structure             06:14:08  Jan 29, 2023   Page   95ACIA       interface routines                         EFFE 33   41                 leau   1,u       next backup location  F000 ED   A4                 std    dev_addr,y  F002 AF   22                 stx    dev_type,y  F004 EF   24                 stu    dev_brbu,y  F006 34   02                 pshs   a  F008 A6   C9 EC67            lda    (brbupr-brbutb),u get rom preset  F00C A7   C4                 sta    0,u  F00E 35   02                 puls   a  F010 31   26                 leay   DEV_SIZE,y  F012 C3   0004               addd   #4  F015 ED   A4                 std    dev_addr,y  F017 AF   22                 stx    dev_type,y  F019 EF   24                 stu    dev_brbu,y  F01B 31   26                 leay   DEV_SIZE,y  F01D 1A   01                 sec  F01F 35   D6       99        puls   d,x,u,pc                                                               *                     * ttconf                     *                     * Configure the port pointed at by the Y register.  The X                     * register is pointing to the terminal table.  All registers                     * except D should be preserved.                     *                       F021 86   03       SR4ttconf lda    #AC_MRES  reset the acia  F023 A7   A4                 sta    csr,y  F025 34   06                 pshs   d         delay some here  F027 35   06                 puls   d  F029 A6   A4                 lda    csr,y     get status - see if acia is really here  F02B 27   04                 beq    2f        if 0 status - then ok                     *  F02D 85   F3                 bita   #$f3      see if funny status is ok  todo: bit names  F02F 26   21                 bne    4f                     *  F031 A6   88 12    2         lda    tbaud,x   get configuration word from table                       F034 8A   01                 ora    #AC_DV16  set up full configuration  F036 A7   A4                 sta    csr,y     (no ints enabled & RTS brought high)                     *  F038 34   16                 pshs   d,x  F03A A6   0B                 lda    tdevic+1,x get terminal id  F03C C6   06                 ldb    #DEV_SIZE  F03E 3D                      mul  F03F 8E   02BE               ldx    #dev_tab  F042 30   8B                 leax   d,x  F044 AE   04                 ldx    dev_brbu,x set baudrate latch  F046 A6   84                 lda    0,x  F048 A7   22                 sta    brr,y  F04A 35   16                 puls   d,x                     FIO Simulation Structure             06:14:08  Jan 29, 2023   Page   96ACIA       interface routines                         F04C A6   A4                 lda    csr,y     get new status  F04E 85   08                 bita   #AS_NCTS  is CTS ok?  F050 27   05                 beq    6f                     *  F052 1A   04       4         sez              set        false status  F054 1C   FE                 clc              show       wait for CTS  F056 39                      rts              return                     *  F057 1C   FB       6         clz              set        true status  F059 39                      rts              return                                          *                     * ttputc                     *                     * Send the character in the B register to the ACIA.  All                     * registers should be preserved.  Y points to the device.                     *                       F05A E7   21       SR4ttputc stb    dbuf,y    send character  F05C 39                      rts              return                                                               *                     * ttgetc                     *                     * Get the character from the device and return in the B                     * register.  Y points to the device and all registers                     * should be preserved.                     *                       F05D E6   21       SR4ttgetc ldb    dbuf,y    get the character  F05F 39                      rts              return                                                               *                     * ttenxr                     *                     * Enable the transmit interrupts and leave the receive                     * interrupt enabled (it is enabled upon routine entry).                     * Y points to the device and X points to to the terminal                     * table entry.  Preserve all registers but D.                     *                     *                       F060 A6   88 12    SR4ttnxr  lda    tbaud,x   get configuration  F063 8A   A1                 ora    #AC_TEIN+AC_REIN+AC_DV16 enable int bits  F065 A7   A4                 sta    csr,y     send to acia  F067 39                      rts              return                                                               *                     * ttdisxFIO Simulation Structure             06:14:08  Jan 29, 2023   Page   97ACIA       interface routines                                            *                     * Disable the transmit interrupt and leave the receive                     * interrupt enabled.  Y points to the device and X points                     * to the terminal table entry.  Preserve all but D.                     *                       F068 A6   88 12    SR4ttdisx lda    tbaud,x   get configuration word  F06B 8A   81                 ora    #AC_REIN+AC_DV16 set bits  F06D A7   A4                 sta    csr,y     send to acia  F06F 39                      rts              return                                                               *                     * ttenr                     *                     * Enable the receive interrupts only.  The transmit                     * interrupts should be turned off.  Y points to the device                     * and X point to the terminal table entry.  Preserve all                     * but the D register.                     *                       F070 A6   88 12    SR4ttnr   lda    tbaud,x   get configuration word  F073 8A   81                 ora    #AC_REIN+AC_DV16 set bits  F075 A7   A4                 sta    csr,y     send to acia  F077 39                      rts              return                                                               *                     * ttenx                     *                     * Enable the transmit interrupts only.  The receive                     * interrupts should be left disabled.  Y points to the                     * device and X points to the terminal table entry.                     * All registers but D shoud be preserved.                     *                       F078 A6   88 12    SR4ttnx   lda    tbaud,x   get configuration word  F07B 8A   21                 ora    #AC_TEIN+AC_DV16 set bits  F07D A7   A4                 sta    csr,y     send to acia  F07F 39                      rts              return                                                               *                     * ttenno                     *                     * Disable all interrupts from device and drop the RTS                     * line.  Y points to the device and X points to the                     * terminal table entry.  Preserve all but D register.                     *                       F080 A6   88 12    SR4ttnno  lda    tbaud,x   get configuration word  F083 8A   41                 ora    #AC_DRTS+AC_DV16 set bitsFIO Simulation Structure             06:14:09  Jan 29, 2023   Page   98ACIA       interface routines                         F085 A7   A4                 sta    csr,y     send to acia  F087 39                      rts              return                                                               *                     * ttxbsy                     *                     * Test if the transmit buffer is empty.  Return TRUE if                     * it is empty (N.E. status). Y points to the device and                     * all but A needs preserved.                     *                       F088 A6   A4       SR4ttxbsy lda    csr,y     get status  F08A 85   02                 bita   #AS_TDRE  is it busy?  F08C 39                      rts              return                                                               *                     * tttstx                     *                     * Test device pointed at by Y for a transmit interrupt.                     * Return TRUE if interrupt present.  Preserve all but                     * the A register.                     *                       F08D A6   A4       SR4ttstx  lda    csr,y     get status  F08F 85   02                 bita   #AS_TDRE  F091 26   06                 bne    SR4true  F093 20   07                 bra    SR4false                                                               *                     * ttiscts                     *                     * Test device pointed at by X for "Clear to Send"                     * -- Return TRUE (not equal) if yes                     *  F095               SR4ttiscts  F095 85   08                 bita   #AS_NCTS  is CTS down?  F097 26   03                 bne    SR4false  F099 1C   FB       SR4true   clz              no         - return TRUE  F09B 39                      rts  F09C 1A   04       SR4false  sez              yes        - return FALSE  F09E 39                      rts                                                               *                     * tttstr                     *                     * Test device pointed at by Y for a receive interrupt.                     * Return TRUE if interrupt present.  Preserve all but                     * the A register.FIO Simulation Structure             06:14:09  Jan 29, 2023   Page   99ACIA       interface routines                                            *                       F09F A6   A4       SR4ttstr  lda    csr,y  F0A1 85   01                 bita   #AS_RDRF  F0A3 26   F4                 bne    SR4true  F0A5 20   F5                 bra    SR4false                                                               *                     * tttstb                     *                     * Test device pointed at by Y for a "break" condition.                     * Return TRUE if found.  Preserve all registers but A                     * and return NULL in B (for break character).                     *                       F0A7 85   30       SR4ttstb  bita   #AS_OVRN+AS_FRME check for break condition  F0A9 27   0A                 beq    2f        ZERO = false                     *  F0AB E6   21                 ldb    dbuf,y    get character from acia  F0AD 34   76                 pshs   d,x,y,u   delay some here  F0AF 35   76                 puls   d,x,y,u  F0B1 A6   21                 lda    dbuf,y    get next garbage char if any  F0B3 1C   FB                 clz              set        TRUE                     *  F0B5 39            2         rts              return                                                               *                     * tttsts                     *                     * Test device for "CTS" interrupt.                     *                       F0B6 20   E4       SR4ttsts  bra    SR4false  not currently implemented                                                               *                     * tttstc                     *                     * Test device pointed at by Y for drop "Carrier Detect"                     * type interrupt.  Return TRUE if so.  Preserve all registers                     * but A.                     *                       F0B8 85   04       SR4ttstc  bita   #AS_NDCD  check for carrier drop  F0BA 27   04                 beq    1f        jump if no error                     *  F0BC E6   21                 ldb    dbuf,y    read reg to reset status  F0BE 1C   FB                 clz              return     true                     *  F0C0 39            1         rts              returnFIO Simulation Structure             06:14:09  Jan 29, 2023   Page  100ACIA       interface routines                                                                                      *                     * tttste                     *                     * Test device pointed at by Y for error conditions.                     * Handle all errors local to this routine - no status                     * returned.  Preserve all but A.                     *                       F0C1 A6   21       SR4ttste  lda    dbuf,y    read data register to clear any interrupt conditions  F0C3 1A   04                 sez              return false clz     return     true  F0C5 39                      rts              return                                          *                     * tttstd - Test for drop in DTR                     *  F0C6 1A   04       SR4ttstd  sez              --         not supported by hardware  F0C8 39                      rts                                                               *                     * ttend                     *                     * Terminate i/o operation for device pointed at by Y.                     * Preserve all but D.                     *                       F0C9 39            SR4ttnd   rts              return     (nothing for acia)                                                               *                     * ttwcts                     *                     * Wait for CTS to go high (sleep on it).                     *                       F0CA 8D   AC       SR4ttwcts bsr    SR4ttnx   enable xmit ints only  F0CC C6   EC                 ldb    #TTYOPR   set priority  F0CE 10AE 04                 ldy    tqout,x   point to output q  F0D1 7E   E74F               jmp    sleep     sleep on CTS                                                               *                     * ttwdcd                     *                     * Wait for DCD to go high (sleep on it).                     *                       F0D4 39            SR4ttwdcd rts              currently  not implementedFIO Simulation Structure             06:14:10  Jan 29, 2023   Page  101Debug Interface Routines                                                   F0D5               DB_main  F0D5 8D   4F                 bsr    DB_test   see if debug routines present  F0D7 6E   9F C002            jmp    [DEBUGROM+2]  F0DB               DB_pdata  F0DB 8D   49                 bsr    DB_test   see if debug routines present  F0DD 6E   9F C004            jmp    [DEBUGROM+4]  F0E1               DB_phex  F0E1 8D   43                 bsr    DB_test   see if debug routines present  F0E3 6E   9F C006            jmp    [DEBUGROM+6]  F0E7               DB_phex2  F0E7 8D   3D                 bsr    DB_test   see if debug routines present  F0E9 6E   9F C008            jmp    [DEBUGROM+8]  F0ED               DB_pcrlf  F0ED 8D   37                 bsr    DB_test   see if debug routines present  F0EF 6E   9F C00A            jmp    [DEBUGROM+10]  F0F3               DB_check  F0F3 8D   31                 bsr    DB_test   see if debug routines present  F0F5 6E   9F C00C            jmp    [DEBUGROM+12]  F0F9               DB_config  F0F9 8D   2B                 bsr    DB_test   see if debug routines present  F0FB 6E   9F C00E            jmp    [DEBUGROM+14]  F0FF 34   17       DB_msg    pshs   cc,d,x  F101 AE   65                 ldx    1+2+2,s   get return address  F103 EC   81                 ldd    ,x++      get mask word  F105 B4   010D               anda   DB_cntrl  F108 F4   010E               andb   DB_cntrl+1  F10B 34   04                 pshs   b  F10D AA   E0                 ora    ,s+  F10F 27   04                 beq    10f       jump if flag not set  F111 30   02                 leax   2,x       skip over false address & fall through  F113 20   02                 bra    20f  F115 AE   84       10        ldx    ,x        get false branch label  F117 AF   65       20        stx    1+2+2,s   fix up return address  F119 35   97                 puls   cc,d,x,pc return                     *  F11B               DB_pspace  F11B               DB_outsp  F11B 34   16                 pshs   d,x  F11D 8E   F124               ldx    #00f  F120 8D   B9                 bsr    DB_pdata  F122 35   96                 puls   d,x,pc  F124 20 00         00        fcc    ' ',0                       F126 34   07       DB_test   pshs   cc,d  F128 FC   C000               ldd    DEBUGROM  Debug rom present?  F12B 1083 1234               cmpd   #$1234    special marker  F12F 27   05                 beq    99f       yes - exit  F131 35   07                 puls   cc,d      no - abort DB_xx function  F133 32   62                 leas   2,s  F135 39                      rts  F136 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             06:14:10  Jan 29, 2023   Page  102Debug Interface Routines                                                                                                     end    rom_initFIO Simulation Structure             06:14:10  Jan 29, 2023   Page  103Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AC_8N1   0014   AC_DIV0  0001   AC_DIV1  0002   AC_DRTS  0040   AC_DV16  0001   AC_MRES  0003   AC_REIN  0080   AC_SET   0015   AC_TEIN  0020   AC_WS0   0004   AC_WS1   0008   AC_WS2   0010   AS_FRME  0010   AS_IRQ   0080   AS_NCTS  0008   AS_NDCD  0004   AS_OVRN  0020   AS_PERR  0040   AS_RDRF  0001   AS_TDRE  0002   B        0009   BASE_SLO 8000   BRTBSIZ  0006   BSECH    0020   BSPCH    007F   CBSIZE   0020   CC       000A   CFGDAT   00E0   CHRLIM   00FE   CLISTS   02AE   CLOCK    8070   CLOCKI   8071   CLOCKPR  FFC4   CNCLC    0018   CNTRL    0080   CPU2DEV  0022   CPU_down E03D   CPUtraps FFF0   CR       000D   CRMOD    0010   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F0F3   DB_cntrl 010D   DB_confi F0F9   DB_iflg  010C   DB_main  F0D5   DB_msg   F0FF   DB_outsp F11B   DB_pcrlf F0ED   DB_pdata F0DB   DB_phex  F0E1   DB_phex2 F0E7   DB_pspac F11B   DB_test  F126   DBmsg00  E000   DBmsg01  E009   DBmsg02  E029   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_6850 EF29   DEV_BAD  E4A9   DEV_SIZE 0006   DLE      0010   DLE_GOT  0040   DLE_SENT 0020   DO_HISTO 0001   DO_IXON  0000   DP       000B   DSR_OK   0001   D_CLOSE  0004   D_END    0026   D_GETD   0014   D_INTRPT 000E   D_OPEN   0002   D_RQRD   000A   D_RQWR   0006   D_SEND   000C   D_SETD   0016   D_TTYG   001C   D_TTYS   001A   D_WRC    001E   D_WRITE  0008   D_init   0022   D_inthan 0020   D_test   0024   D_ttconf 0026   D_ttdisx 002E   D_ttend  0048   D_ttenno 0034   D_ttenr  0030   D_ttenx  0032   D_ttenxr 002C   D_ttgetc 002A   D_ttisct 003A   D_ttputc 0028   D_tttstb 003E   D_tttstc 0042   D_tttstd 0044   D_tttste 0046   D_tttstr 003C   D_tttsts 0040   D_tttstx 0038   D_ttwcts 004A   D_ttwdcd 004C   D_ttxbsy 0036   E        000E   ECHO     0002   EOTCH    0004   ESCOFF   0080   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E410   FIFO_put E435   FIFOgeta E407   FIFOputa E42D   FIOPRI   000F   FIO_get  E3E5   FIO_lock 015C   FIO_rel  E3FA   HANGS    0001   HOLD     0002   HOLDC    001B   HRECSIZ  0004   H_cpu    E621   H_fio    E645   IF       0010   INTRC    0003   INTS     0002   IOP      0001   IOPTDMIN 0009   IO_end   E48B   IO_han   E450   IRQ_han  E4CC   IRQmsg10 E56C   IS       0003   IU       0002   IX       0000   IXONXOF  0010   IY       0001   LCASE    0008   MAXHIST  0010   MAX_CL   007C   MAX_DEV  000D   MAX_NEC  0000   MAX_OB   0400   MAX_PPR  0000   MAX_TI   000A   MAX_TSK  0028   MAX_TTY  000C   MIN_OB   0120   MIN_TSK  0020   MOD_SIZE 0004   NECADR   030E   NEC_IQ   030C   NECstr   02BC   NET      0000   NEXT_SLO 0010   NL       000A   NUM_CL   0001   NUM_NEC  0004   NUM_PPR  0003   NUM_TRM  0002   NUM_TSK  0000   OBUFRS   02B4   OBUF_SIZ 0100   OQHI     0102   OQH_SIZE 000A   OQLO     0104   O_CLOSE  0020   O_INTRPT 0070   O_OPEN   0010   O_PGETD  00D0   O_PSETD  00E0   O_READ   0060   O_RQRD   0050   O_RQWR   0030   O_TTYG   00A0   O_TTYS   0090   O_WR1C   0080   O_WRITE  0040   PC       0005   PPstr    02BA   PRCSIZ   0100   PROTOCOL 00F8   QH_SIZE  0005   QUITC    001C   QUITS    0003   RAMend   6FFF   RAMorg   0100   RAMscrat 7000   RAMscren 7F00   RAW      0001   REJECT   0080   ROMLOorg E000   ROM_ERR  E0C5   ROM_VERS 0020   ROMstack 7FFF   RUNPRI   0046   R_CLOCK  000E   R_CLOSE  0002   R_INTRPT 0007   R_OPEN   0001   FIO Simulation Structure             06:14:11  Jan 29, 2023   Page  104Debug Interface Routines                            R_PDATA  000B   R_RD1C   0009   R_RDOK   0005   R_READ   0006   R_READM  000C   R_REQOK  0003   R_RESET  000F   R_TTY    000D   R_WR1C   0008   R_WRITE  0004   S        0004   SCHR     0040   SEND_DLE 0008   SEND_XOF 0004   SEND_XON 0002   SPACE    0020   SR4_IRQ  EF7D   SR4_SLOT 0003   SR4_init EF97   SR4_name E37C   SR4_test EFA5   SR4false F09C   SR4true  F099   SR4ttcon F021   SR4ttdis F068   SR4ttget F05D   SR4ttisc F095   SR4ttnd  F0C9   SR4ttnno F080   SR4ttnr  F070   SR4ttnx  F078   SR4ttnxr F060   SR4ttput F05A   SR4ttstb F0A7   SR4ttstc F0B8   SR4ttstd F0C6   SR4ttste F0C1   SR4ttstr F09F   SR4ttsts F0B6   SR4ttstx F08D   SR4ttwct F0CA   SR4ttwdc F0D4   SR4ttxbs F088   SYS_ACIA 8000   SYS_TABS 0316   TABCH    0009   TFREE    0004   TIMOUT   0001   TIQPRI   FFD8   TI_HAN   E5B4   TI_Q     011E   TI_Q_ptr 015A   TOPEN    0004   TOPWOC   0010   TRANSPNT 0008   TRUN     0001   TSKSIZ   009F   TSLEEP   0002   TSYS     0005   TTYIPR   FFF6   TTYLOCK  FFDD   TTYOPR   FFEC   TTYQS    02B2   TTYSIZ   0022   TTYSPR   FFE2   TTYTABS  02B0   TWAIT    0003   U        0003   UIO      0000   USTSIZ   008A   V        0007   W        0006   X        0001   XANY     0020   XOFFC    0013   XOF_SENT 0010   XONC     0011   XONXOF   0040   XTABS    0004   Y        0002   bad_cmd  E4A6   bad_dev  E4C9   brbupr   EF77   brbutb   0310   brr      0002   cbchrs   0002   cbstrt   0000   cbufct   011B   cfreel   0119   change   E669   chproc   0118   clcnt    0000   clfst    0001   clini2   E2A4   clinit   E296   cllst    0003   clock_ti 016B   close_tt EE4E   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   csr      0000   dbuf     0001   dev_addr 0000   dev_brbu 0004   dev_tab  02BE   dev_type 0002   end_vars 6FFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E05C   fio_fsz  E05A   fio_msg  E3AD   fio_rese E385   fio_resp E3C9   fio_star E08D   fio_wait E399   flushi   ECEE   flusho   ECC3   flusht   EC9B   fluso0   ECCA   fluso1   ECD2   get_oq   E840   get_pdat EA4A   getc     E7A2   getc1    E7BD   getc2    E7CB   getc3    E7DF   getc4    E7E4   getjo1   E6B1   getjo2   E6C0   getjo4   E6C7   getjo6   E6D0   getjo8   E6D2   getjob   E6AB   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   026C   hstptr   02AC   idle     011D   int_all  E584   int_buf  015D   int_ptr  0169   intret   E062   irq_han  E05F   jobpri   0117   lcbuf    011C   lcht     EB94   makrd6   E72A   makrdy   E715   max_trn  E05E   mod_name 0002   mod_tbl  E376   mod_type 0000   no_dev   E281   open_tty EE48   oq_buf   0002   oq_count 0000   oq_end   0008   oq_get   0006   oq_put   0004   prcbuf   016C   put_oq   E864   putc     E7EA   putc1    E808   putc2    E82B   putc3    E838   putc4    E83A   putru1   E6E9   putru2   E6F0   putru4   E6FE   putru5   E70D   putru6   E711   putrun   E6DC   read_dat EE05   req_read EDDD   req_writ EE54   rom_bad  E0C3   rom_firq E096   rom_init E06B   rom_int  E0B8   rom_nmi  E090   rom_swi  E09D   rom_swi2 E0A3   rom_swi3 E0AA   rom_trap E0B1   rsche2   E680   rsche3   E694   rsched   E66F   runlst   010F   send_TI  E5FC   send_int EF0E   set_pdat EA65   set_tabl E101   sleep    E74F   sleep7   E777   slot_tbl 0106   slplst   0111   stbinit  E0D2   sto_chk  E288   swtchu   E6A0   sys_vars 0100   taddr    0006   tbaud    0012   tbaud2   0013   tbksp    0010   tcncl    0011   tcolm    000F   tdel     000E   tdelay   0009   tdevic   000A   tflags   0008   tintr    E91B   tintr2   E949   tintr3   E951   tintr4   E95F   tintr5   E967   tintr6   E96F   tintr7   E977   tintr8   E97E   tintr9   E997   tlock    0017   tqin     0000   tqout    0004   tqproc   0002   tregs    001A   tscmd    0009   tsdev    000D   tsevnt   0006   tskend   02B8   tskinit  E31A   tsktab   02B6   tslink   0000   tsold    0018   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstate   0014   tstate2  0015   FIO Simulation Structure             06:14:11  Jan 29, 2023   Page  105Debug Interface Routines                            tstate3  0016   tstval   000C   ttask    000C   ttcls    E8DD   ttdop5   E8B6   ttdop6   E8C1   ttdopn   E893   ttftab   E903   ttopn    E87D   ttopn8   E88B   ttyget   EA0A   ttyi25   EBB8   ttyi27   EBBB   ttyi33   EBCD   ttyi34   EBD5   ttyi35   EBE4   ttyi36   EBE8   ttyi44   EBF6   ttyi46   EC01   ttyi65   EC50   ttyi67   EC5A   ttyi85   EC94   ttyin    EB9F   ttyin0   EBA7   ttyin2   EBAB   ttyin3   EBBE   ttyin4   EBF0   ttyin5   EC2C   ttyin6   EC3A   ttyin7   EC5C   ttyin8   EC79   ttyin9   EC9A   ttyinit  E2C4   ttyo12   EAFF   ttyo14   EB0F   ttyo22   EB2C   ttyo23   EB30   ttyo24   EB41   ttyo75   EB64   ttyo77   EB72   ttyoe1   EB93   ttyou2   EB1A   ttyou4   EB45   ttyou6   EB56   ttyou8   EB80   ttyoue   EB86   ttyout   EAE8   ttyren   EA83   ttys45   EA31   ttys55   EACE   ttyset   E99C   ttysg5   EA33   ttyst    EA9B   ttyst1   EAAE   ttyst15  EAB7   ttyst2   EAC8   ttyst6   EACF   ttyst65  EADA   ttyst9   EAE2   ttywrt   EE2B   umark0   0011   umark1   0013   usp      000F   utask    0115   wakeu2   E736   wakeu3   E73D   wakeu4   E741   wakeu5   E743   wakeup   E72B   write_da EE9C   wrt_sc   EEDA   xmtint   E784   xtca32   ED80   xtca33   ED92   xtp315   ED79   xtpr21   ED36   xtpr22   ED3E   xtpr25   ED56   xtpr31   ED62   xtpr45   EDB3   xtprc0   ED19   xtprc1   ED23   xtprc2   ED2A   xtprc3   ED58   xtprc4   ED9F   xtprc5   EDC3   xtprc6   EDCD   xtprc7   EDD8   xtprcq   ED01   