*** UniFLEX RAM disk driver CPU09RAM** non interrupt* Major 2*        opt     nol        lib     ../include/sysdefs.h        lib     ./ramdrvr.h        lib     ../include/blktab.h        lib     ./gendrvr.h        opt     lis        if      (RAMDSK=1)        global  ramopn,ramcls,ramio        global  mxramd        global  ramcop,ramccl,ramcrd,ramcwr,ramspc        global  ramd00        sttl    ramdrvr*RAMtab  fdb     0       Block Device Table addressramd00  rzb     RAMDSZramd01  rzb     RAMDSZmxramd  rzb     2       size of ramdisk        sttl    block device**ramopn  equ     *        bsr     rmsdsk  set disk parameters        bne     ramoer        inc     ramoct,x        rts**ramcls  equ     *        bsr     rmsdsk  set disk parameters        bne     ramoer        clr     ramoct,x        rtsramoer  lda     #EBARG        sta     uerror        rtsrmsdsk  pshs    d        ldx     #ramd00         base pointer        cmpb    #MXRDEV        bhs     01f        lda     #RAMDSZ        mul        abx        clra        puls    d,pc01      lda     #$ff        puls    d,pc**ramio   equ     *        stx     RAMtab          save block device tabel address        inc     rambdt+dtbusy   mark busy        ldb     bfdvn+1,y       get device #        bsr     rmsdsk        bne     ramierr*        tst     bfblch,y        BLOCK# H/M/L        bne     ramierr         illegal address        ldd     bfblck,y        cmpd    ramsiz,x        max blocks RAM disk        bhs     ramierr        addd    ramstr,x        add offset        std     rambhi* fixed sizes only        ldd     bfxfc,y         transfer size        cmpd    #BUFSIZ        bne     ramierr         illegal*        trfr    D,W             W is count        tfr     y,x        jsr     mapbpt          set map        lda     bfflag,y        X is now buf pointer        ldu     #rambuf         U points to RAMDISK buffer        bita    #BFRWF        bne     01f             read* write        ldb     ramswt          read switch/jumper        andb    #RDONLY        beq     ramroe          is read only*        exg     u,x01      tfm1    U,X             transfer*02     clr      rambdt+dtbusy   can't go wrong here       clr      rambdt+dtrtry       ldx      RAMtab       jmp      BDioend*ramroe  lda     #EPRM        bra     04f*ramierr lda     #EBARG04      sta     uerror        lda     bfflag,y        ora     #BFERR        sta     bfflag,y        bra     02b        sttl    char device** open character device*ramcop  equ     *        jsr     rmsdsk        lbne    ramoer  illegal        inc     ramcct,x        rts** close character device*ramccl  equ     *        jsr     rmsdsk        lbne    ramoer  illegal        clr     ramcct,x        rts** read from char device*ramcrd  equ     *        pshs    d       save device        jsr     rmsdsk  set X        bne     05f        ldy     #rchbuf        jsr     blkgtb  get buffer        puls    d        jsr     rchcn   setup and checks        tst     uerror        beq     rrd04rerext  pshs    y        ldy     #rchbuf free buffer        jsr     blkfrb        puls    y,pc*rrd04   pshs    a        orb     #BFRWF        stb     bfflag,y        bra     rchio** write to char device*ramcwr  equ     *        pshs    d       save device        jsr     rmsdsk  set X        bne     05f        ldy     #rchbuf        jsr     blkgtb        puls    d        jsr     rchcn   setup and checks        tst     uerror        bne     rerext        pshs    archio   ldb     #RMmajor        jmp     blkcio  do remainder of setup and act* first checks and setuprchcn   std     bfdvn,y device        ldd     uicnt   count        std     bfxfc,y        cmpd    #BUFSIZ        bne     05f        tst     bfblch,y        bne     05f        cmpd    ramsiz,x        bhs     05f       to high        jmp     blkcnf05      lda     #EBARG        sta     uerror        rts** D=dev X=buf*ramspc  equ     *        tfr     x,y        jsr     rmsdsk          select parms        sty     -2,s            tsty        bne     01f* set        ldd     usarg0          start        std     ramstr,x        ldd     usarg1          offset        std     ramsiz,x        rts*09      lda     #EBARG        sta     uerror        rts* get01      ldd     ramstr,x        std     0,y     tell memory size        ldd     ramsiz,x        std     2,y        ldd     mxramd        asra        rorb        asra        rorb        sta     4,y         always inform*        lda     ramswt        sta     5,y     pass switches read-out        rts        endif        end