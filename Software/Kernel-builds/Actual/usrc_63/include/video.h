** defines for the vidoe driver*VIDMAP  equ     $F8     where video buffer sits in memory mapIOMAP   equ     $FE     special IO mapMAXVAD  equ     30208   512x472 pixelspiadra  equ     $f008   the highest 4 addresslines are implicitpiacra  equ     $f009piadrb  equ     $f00apiacrb  equ     $f00b*vcaddr  equ     $f00c   video controller address registervcdayt  equ     $f00d   video controller data (r/w) register*aciac   equ     $f00e   acia control (mouse)aciad   equ     $f00f   acia data*PADA12  equ     %00000001  access control A12PADA13  equ     %00000010  access control A13PADA14  equ     %00000100  access control A14PADA15  equ     %00001000  access control A15PADM16  equ     %10000000  access control A16PIAADR  equ     %11111111       data direction bitsPAIACR  equ     %00000100       control register bits*PIABDR  equ     %00000011       data direction bitsPIABCR  equ     %00000100       control regsiter bitsPBDCLK  equ     %00000001       clk line triggerPBDDAT  equ     %00000010       data line trigger*PACCA1  equ     %00000000       CA1 flag test bitPBCCB1  equ     %00000000       CB1 flag test bit*vpgmsk  equ     %0111000000000000 mask to video pagevlnmsk  equ     %0000000000111111 mask for line (64 byes)vlomsk  equ     %0000111111000000 mask for line offset** data structure for use within driver code*        base    0vidflg  rmb     1               video read/write flagvidcnt  rmb     2               actual xfer countvidsav  rmb     1               save current D page*vdcpag  rmb     1               video current page (4K)vdpoff  rmb     2               video current page offsetvdpcnt  rmb     2               video current page count*uscpag  rmb     1               user memory current pageuspoff  rmb     2               user memory current page offetuspcnt  rmb     2               user memory current page count** copy of uistrt, uiposvidstr  rmb     2               user addresvidofs  rmb     2               seek offset into video bufferVIDLEN  equ     *