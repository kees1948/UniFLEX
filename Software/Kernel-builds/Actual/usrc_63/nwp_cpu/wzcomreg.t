        pag* register names and offsetWZMR    equ     0WZGAR0  equ     1WZGAR1  equ     2WZGAR2  equ     3WZGAR3  equ     4WZSUBR0 equ     5WZSUBR1 equ     6WZSUBR2 equ     7WZSUBR3 equ     8WZSHAR0 equ     9WZSHAR1 equ     10WZSHAR2 equ     11WZSHAR3 equ     12WZSHAR4 equ     13WZSHAR5 equ     14WZSIPR0 equ     15WZSIPR1 equ     16WZSIPR2 equ     17WZSIPR3 equ     18WZILLT0 equ     19WZILLT1 equ     20WZIR    equ     21WZIMR   equ     22WZSIR   equ     23WZSIMR  equ     24WZRTR0  equ     25WZRTR1  equ     26WZRCR   equ     27WZUIPR0 equ     40WZUIPR1 equ     41WZUIPR2 equ     42WZUIPR3 equ     43WZUPRT0 equ     44WZUPRT1 equ     45WZPHY   equ     46WZVERS  equ     57** all commands to access common register set*** GCRMR, get byte from common registers mode register* return byte in B*GCRMR   pshs    d,x,u        clrb        trfr    B,F        ldx     #WZMR        jsr     byterd        std     0,s        puls    d,x,u,pc** PCRMR, put byte B into common registers mode register*PCRMR   pshs    d,x        clrb        trfr    B,F        ldx     #WZMR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GCRGA, get gateway address from common regsiters* Y=destination address (4 bytes)*GCRGA   pshs    d,x        clrb        trfr    B,F        ldx     #WZGAR0        jsr     wordrd        std     0,y        ldx     #WZGAR2        jsr     wordrd        std     2,y        puls    d,x,pc** PCRGW, put gateway address* Y=source address (4 bytes)*PCRGA   pshs    d,x        clrb        trfr    B,F        ldx     #WZGAR0        ldd     0,y        jsr     wordwr        ldx     #WZGAR2        ldd     2,y        jsr     wordwr        puls    d,x,pc** GCRSNM, get subnet mask  from common regsiters* Y=destination address (4 bytes)*GCRSNM  pshs    d,x        clrb        trfr    B,F        ldx     #WZSUBR0        jsr     wordrd        std     0,y        ldx     #WZSUBR2        jsr     wordrd        std     2,y        puls    d,x,pc** PCRSNM, put subnet mask address* Y=source address (4 bytes)*PCRSNM  pshs    d,x        clrb        trfr    B,F        ldx     #WZSUBR0        ldd     0,y        jsr     wordwr        ldx     #WZSUBR2        ldd     2,y        jsr     wordwr        puls    d,x,pc** GCRSHA, get gateway hardware address from common regsiters* Y=destination address (6 bytes)*GCRSHA  pshs    d,x        clrb        trfr    B,F        ldx     #WZSHAR0        jsr     wordrd        std     0,y        ldx     #WZSHAR2        jsr     wordrd        std     2,y        ldx     #WZSHAR4        jsr     wordrd        std     4,y        puls    d,x,pc** PCRSHA, put gateway hardware address* Y=source address (6 bytes)*PCRSHA  pshs    d,x        clrb        trfr    B,F        ldx     #WZSHAR0        ldd     0,y        jsr     wordwr        ldx     #WZSHAR2        ldd     2,y        jsr     wordwr        ldx     #WZSHAR4        ldd     4,y        jsr     wordwr        puls    d,x,pc** GCRSIP, get source IP address from common regsiters* Y=destination address (4 bytes)*GCRSIP  pshs    d,x        clrb        trfr    B,F        ldx     #WZSIPR0        jsr     wordrd        std     0,y        ldx     #WZSIPR2        jsr     wordrd        std     2,y        puls    d,x,pc** PCRSIP, put gateway address* Y=source address (4 bytes)*PCRSIP  pshs    d,x        clrb        trfr    B,F        ldx     #WZSIPR0        ldd     0,y        jsr     wordwr        ldx     #WZSIPR2        ldd     2,y        jsr     wordwr        puls    d,x,pc** GCRILLT, get byte from interrup low level timer register* return word in D*GCRILLT pshs    d,x        clrb        trfr    B,F        ldx     #WZILLT0        jsr     wordrd        std     0,s        puls    d,x,pc** PCRILLT, put word D into common registers mode register*PCRILLT pshs    d,x        clrb        trfr    B,F        ldx     #WZILLT0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GCRIR, get byte from common registers interrupt register* return byte in B*GCRIR   pshs    d,x        clrb        trfr    B,F        ldx     #WZIR        jsr     byterd        std     0,s        puls    d,x,pc** PCRIR, put byte B into common registers interrupt register*PCRIR   pshs    d,x        clrb        trfr    B,F        ldx     #WZIR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GCRIMR, get byte from common registers interrupt mask register* return byte in B*GCRIMR  pshs    d,x        clrb        trfr    B,F        ldx     #WZIMR        jsr     byterd        std     0,s        puls    d,x,pc** PCRIMR, put byte B into common registers interrupt mask register*PCRIMR  pshs    d,x        clrb        trfr    B,F        ldx     #WZIMR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GCRSIR, get byte from common registers socket interrupt register* return byte in B*GCRSIR  pshs    d,x        clrb        trfr    B,F        ldx     #WZSIR        jsr     byterd        std     0,s        puls    d,x,pc** PCRSIR, put byte B into common registers socket interrupt register*PCRSIR  pshs    d,x        clrb        trfr    B,F        ldx     #WZSIR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GCSIMR, get byte from common registers socket interrupt mask register* return byte in B*GCRSIMR pshs    d,x        clrb        trfr    B,F        ldx     #WZSIMR        jsr     byterd        std     0,s        puls    d,x,pc** PCRSIMR, put byte B into common registers socket interrupt mask register*PCRSIMR  pshs    d,x        clrb        trfr    B,F        ldx     #WZSIMR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GCRRTR, get word from common registers retry register* return word in D*GCRRTR  pshs    d,x        clrb        trfr    B,F        ldx     #WZRTR0        jsr     wordrd        std     0,s        puls    d,x,pc** PCRRTR, put word D into common registers retry register*PCRRTR   pshs    d,x        clrb        trfr    B,F        ldx     #WZRTR0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GCRRCR, get byte from common registers retry count register* return byte in B*GCRRCR  pshs    d,x        clrb        trfr    B,F        ldx     #WZRCR        jsr     byterd        std     0,s        puls    d,x,pc** PCRRCR, put byte B into common registers retry count register*PCRRCR  pshs    d,x        clrb        trfr    B,F        ldx     #WZRCR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GCRURP, get word from common registers unreachable port register* return word in D*GCRURP  pshs    d,x        clrb        trfr    B,F        ldx     #WZUPRT0        jsr     wordrd        std     0,s        puls    d,x,pc** GCRUIP, get unreachable IP address from common registers* Y=destination address (4 bytes)*GCRUIP  pshs    d,x        clrb        trfr    B,F        ldx     #WZUIPR0        jsr     wordrd        std     0,y        ldx     #WZUIPR2        jsr     wordrd        std     2,y        puls    d,x,pc** GCRPHY, get byte from common registers PHY config register* return byte in B*GCRPHY  pshs    d,x,u        ldx     #WZPHY        clrb        trfr    B,F        jsr     byterd        std     0,s        puls    d,x,u,pc** PCRPHY, put byte B into common registers PHY config register*PCRPHY  pshs    d,x,u        ldx     #WZPHY        clrb        trfr    B,F        ldd     0,s        jsr     bytewr        puls    d,x,u,pc** GCRVERS, get byte from common registers socket version register* return byte in B*GCRVERS pshs    d,x,u        ldx     #WZVERS        clrb        trfr    B,F        jsr     byterd        std     0,s        puls    d,x,u,pc