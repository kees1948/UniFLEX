               0001  NET       set    1                               opt    exp  0000                         absSWTPc      Intelligent I/O Proce     09:03:36  Dec 17, 2024   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                     *                     * Various useful constants                     *                                          * Include Debug info                                    0001  DBG_SYS   equ    %0000000000000001 Debug system (scheduler, etc)               0002  DBG_8274  equ    %0000000000000010 Debug ACIA drivers               0004  DBG_INT   equ    %0000000000000100 Debug Interrupt routine               0008  DBG_TRMI  equ    %0000000000001000 Debug terminal interrupts               0010  DBG_IO    equ    %0000000000010000 Debug I/O Main routine               0020  DBG_HAN   equ    %0000000000100000 Debug terminal handler               0040  DBG_SLP   equ    %0000000001000000 Debug Sleep/Wakeup               0080  DBG_TASK  equ    %0000000010000000 Debug tasking               0100  DBG_CMD   equ    %0000000100000000 Debug I/O tasks               0200  DBG_MSG   equ    %0000001000000000 Debug high level messages               0400  DBG_INIT  equ    %0000010000000000 Print initialization messages               0800  DBG_OPEN  equ    %0000100000000000 Debug Open actions                     *               0D04  DEBUG     equ    %0000110100000100                     *EBUG_CONTROL set     %0000111100111111               0000  DEBUG_CONTROL set %0000000000000000                                    0001  DO_HISTORY set   1         Include transaction history mechanism                                          * Process Priorities                                    0046  RUNPRI    equ    70        Must run NOW               FFD8  SIQPRI    equ    -40       Waiting for a terminal interrupt to process               FFCE  FIOPRI    equ    -50       Waiting for the FIO               FFC4  SKPRI     equ    -60       Waiting for socket interrupt               FFBA  POLPRI    equ    -70       poliing priority                                          * UniFLEX signals                                    0001  HANGS     equ    1         Device hangup               0002  INTS      equ    2         Program quit (Control-C)               0003  QUITS     equ    3         Program abort (Control-backslash)               0006  PIPES     equ    6         Broken pipe                                          * -- Configuration constants                                    0009  MAX_TI    equ    9         # Queued terminal interrupts                     *               0001  MAX_DEV   equ    1                     *                                          * constants for PROT_XLTEOLSWTPc      Intelligent I/O Proce     09:03:36  Dec 17, 2024   Page    2Hardware   Definitions                                             000A  LF        equ    $0a       line feed               000D  CR        equ    $0d       carriage return                                          * NETBLOCK constants               0004  NBRQLN    equ    4         4 bytes for request               0204  NBSIZE    equ    512+NBRQLN                     SWTPc      Intelligent I/O Proce     09:03:37  Dec 17, 2024   Page    3Macro Definitions                                                                             *                     * This file contains all the standard macro definitions                     * used in the system.                     *                                    0040  FF        equ    %01000000 FIRQ interrupt mask               0010  IF        equ    %00010000 IRQ interrupt mask                                          * register references               0000  D         equ    0               0001  X         equ    1               0002  Y         equ    2               0003  U         equ    3               0004  S         equ    4               0005  PC        equ    5               0006  W         equ    6               0007  V         equ    7               0008  A         equ    8               0009  B         equ    9               000A  CC        equ    10               000B  DP        equ    11               000E  E         equ    14               000F  F         equ    15                                          * indexed addressing in macro's               0000  IX        equ    0               0001  IY        equ    1               0002  IU        equ    2               0003  IS        equ    3                                                               *                     * Set interrupt flags (I and F)                     *                                          seti      macro                               orcc   #FF|IF                               endm                                          *                     * Clear interrupt flags (I and F)                     *                                          clri      macro                               andcc  #!(FF|IF)                               endm                     SWTPc      Intelligent I/O Proce     09:03:37  Dec 17, 2024   Page    4Macro Definitions                                                                                                  *                     * debug macro                     *                                          *dbugm macro output_character                     * lda #'&1                     * lbsr syspch                     * endm                                          *                     * HD6309 MACRO's                     *                                          ldmd      macro                               fdb    $113d                               fcb    &1                               endm                                          * load W immediate                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                                          * load W direct                     *ldwd    macro                     *        fdb     $1096                     *        fcb     &1&0xff                     *        endm                                          * load W indexed                     ldwx      macro                               fdb    $10A6                               doindx &1,&2                               endm                                          * load W extended                     *ldwe    macro                     *        fdb     $10b6                     *        fdb     &1                     *        endm                                          * load E indexed                     ldex      macro                               fdb    $11a6                               doindx &1                               endm                                          ordx      macro                               fdb    $10aaSWTPc      Intelligent I/O Proce     09:03:37  Dec 17, 2024   Page    5Macro Definitions                                                                  doindx &1,&2                               endm                                          doindx    macro                               if     (&1=0)                               fcb    $84+(&2<<5)                               else                               if     (&1<16)                               fcb    (&2<<5)+(&1&$0f)                               else                               if     (&1>-16)                               fcb    (&2<<5)+($10)+(&1&$0f)                               else                               if     (&1<128)                               fcb    $88+(&2<<5),(&1&$7f)                               endif                               endif                               endif                               endif                               endm                                          * push W on system stack                     pshsw     macro                               fdb    $1038                               endm                                          * pull W from sytemstack                     pulsw     macro                               fdb    $1039                               endm                                          * memory move ++,++                     tfm1      macro                               fdb    $1138                               fcb    &1<<4|&2                               endm                                          * move memory++ to location                     tfm3      macro                               fdb    $113a                               fcb    &1<<4|&2                               endm                                          * move location to memory++                     tfm4      macro                               fdb    $113b                               fcb    &1<<4|&2                               endm                                          * logical shift left D                     lsld      macro                               fdb    $1048SWTPc      Intelligent I/O Proce     09:03:37  Dec 17, 2024   Page    6Macro Definitions                                                                  endm                                          * logical shift right D                     lsrd      macro                               fdb    $1044                               endm                                          * arithmetic shift right D                     *asrd    macro                     *        fdb     $1047                     *        endm                                          * negate D                     negd      macro                               fdb    $1040                               endm                                          * ex-or registers                     eorr      macro                               fdb    $1036                               fcb    &1<<4|&2                               endm                                          * add with carry D immediate                     adcdi     macro                               fdb    $1089                               fdb    &1                               endm                                          * increment D                     incd      macro                               fdb    $104c                               endm                                          * decrement D                     decd      macro                               fdb    $104a                               endm                                          * clear D                     clrd      macro                               fdb    $104f                               endm                                          * complement D                     comd      macro                               fdb    $1043                               endm                                          * and D immediate                     anddi     macro                               fdb    $1084SWTPc      Intelligent I/O Proce     09:03:37  Dec 17, 2024   Page    7Macro Definitions                                                                  fdb    &1                               endm                                          * bit D immediate                     bitdi     macro                               fdb    $1085                               fdb    &1                               endm                                          *                     * trfr, transfer registers, allow ALL registers                     *                     trfr      macro                               fcb    $1f                               fcb    &1<<4|&2                               endm                                          * exchange, allow ALL registers                     excg      macro                               fcb    $1e                               fcb    &1<<4|&2                               endm                                          * add registers                     *                     * addr, add reg0 + reg1 => reg1                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          * subtract registers                     subr      macro                               fdb    $1032                               fcb    &1<<4|&2                               endm                                          * extended addressing mode                     aime      macro                               fcb    $72                               fcb    &1                               fdb    &2                               endm                                          * extended addressing mode                     oime      macro                               fcb    $71                               fcb    &1                               fdb    &2                               endm                     SWTPc      Intelligent I/O Proce     09:03:38  Dec 17, 2024   Page    8Macro Definitions                                                        * extended addressing mode                     eime      macro                               fcb    $75                               fcb    &1                               fdb    &2                               endm                                          * test immediate memory                     *timex   macro                     *        fcb     $7b                     *        fcb     &1                     *        fdb     &2                     *        endm                                          * put a LED in LIGHTS on                     LEDON     macro                               fcb    $71                               fcb    &1                               fdb    LIGHTS                               endm                                          * put a LED in LIGHTS off                     LEDOFF    macro                               fcb    $72                               fcb    255-&1                               fdb    LIGHTS                               endmSWTPc      Intelligent I/O Proce     09:03:38  Dec 17, 2024   Page    9Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device, indexed by fifo cmnd >>3                     * MUST match nwp_codes.h  and MAX_S_NUM !!!!                     *     ==>  wzsockdev.t   <==                     *  0000                         org    $0000  0000               D_func0   rmb    2         0  Bad Command  0002               D_func1   rmb    2         1  S_OPEN  0004               D_func2   rmb    2         2  S_CLOSE  0006               D_func3   rmb    2         3  S_RQWR  0008               D_func4   rmb    2         4  S_SEND  000A               D_func5   rmb    2         5  S_RQRD  000C               D_func6   rmb    2         6  S_RECV  000E               D_func7   rmb    2         7  S_INTRPT  0010               D_func8   rmb    2         8  S_CONNECT  0012               D_func9   rmb    2         9  S_BIND  0014               D_funcA   rmb    2         10  S_LISTEN  0016               D_funcB   rmb    2         11  S_ACCEPT  0018               D_funcC   rmb    2         12  S_DISCON  001A               D_funcD   rmb    2         13  S_SNDMAC  001C               D_funcE   rmb    2         14  S_SNDKEP  001E               D_funcF   rmb    2         15  S_SPCL                     *  0020               D_func10  rmb    2         16 S_RRDFRM  0022               D_func11  rmb    2         17 S_RREAD  0024               D_func12  rmb    2         18 S_WRQSTO  0026               D_func13  rmb    2         19 S_WSNDO  0028               D_func14  rmb    2         20 S_WSNDTM  002A               D_func15  rmb    2SWTPc      Intelligent I/O Proce     09:03:38  Dec 17, 2024   Page   10Device     Table Structure                            002C               D_func16  rmb    2  002E               D_func17  rmb    2                       0030               D_func18  rmb    2         24 S_RQSBLK  0032               D_func19  rmb    2         25 S_SNDBLK  0034               D_func1A  rmb    2         26 S_RQRBLK  0036               D_func1B  rmb    2         27 S_RDRBLK                       0038               D_func1C  rmb    2         28  003A               D_func1D  rmb    2         29  003C               D_func1E  rmb    2         30  003E               D_func1F  rmb    2         31                     *  0040               D_inthan  rmb    2         14 Interrupt poller/handler  0042               D_init    rmb    2         15 Device initialization  0044               D_test    rmb    2         16 Test for device present                     *  0046               D_END     rmb    0         End of common handlers                     SWTPc      Intelligent I/O Proce     09:03:38  Dec 17, 2024   Page   11History Queue Record Structure                                             0000                         org    0  0000               hst_cmd   rmb    1         Command  0001               hst_seq   rmb    1         Sequence #  0002               hst_tty   rmb    1         TTY #  0003               hst_val   rmb    1         Message dependent data                     *  0004               HRECSIZ   rmb    0                                          *                     * Number of history records supported                     *               0010  MAXHIST   equ    16                     SWTPc      Intelligent I/O Proce     09:03:38  Dec 17, 2024   Page   12IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               3EFF  RAMend    equ    $3EFF     $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7E00  RAMscrend equ    $7E00               7FE0  ROMstack  equ    $7FE0     High end of ROM Stack                     * BGDB uses 7FF0               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, w5500 socket device                     *Task       Structure                 09:03:39  Dec 17, 2024   Page   13IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    00C0  USTSIZ    equ    192       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tssgnl    rmb    1         Signal waiting for task                     *  0009               tscmd     rmb    1         Saved mailbox command  000A               tsseq     rmb    2         Saved message sequence #  000C               tstval    rmb    1         Saved transaction value  000D               tsdev     rmb    2         Device for task is servicing  000F               tsagin    rmb    2         return pointer                     *  0011               usp       rmb    2         Saved User Stack Pointer  0013               umark0    rmb    2         Stack Frame Markers  0015               umark1    rmb    2  0017                         rmb    USTSIZ    space for per/process stack                                    00D7  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system task                     *                     * definition of wz5500 variables                     *                     * [*] items are initialized by the IO CPU                     * others are zeroed out                     *                                          * [*] are setup by GPP CPU                                          *                     * wzfsta bits                     *               0001  WZSLCK    equ    %00000001 sock is locked (equal to fdn)                     *WZSKIO  equ     %00000010       io modeTask       Structure                 09:03:39  Dec 17, 2024   Page   14IOP        Memory Layout                                                 *WZSKIS  equ     %00000100       sock is sending               0010  WZWLCK    equ    %00010000 sock task is waiting lock (equal to fdn)               0040  WZWBND    equ    %01000000 sock waiting for bind               0080  WZBUSY    equ    %10000000 sock is busy                                          *                     * protocol values                     *               0001  SP_ICMP   equ    1         Internet Control Message Protocol               0002  SP_GMP    equ    2         Internet Group Management Protocol               0006  SP_TCP    equ    6         Transmission Control Protocol               0008  SP_EGP    equ    8         Exterior Gateway Protocol               0011  SP_UDP    equ    17        User Datagram Protocol                                          *                     * wzcmd values (w5500), private for IOP                     *               0001  WCOPEN    equ    1         open command               0002  WCLIST    equ    2         list command               0004  WCCONN    equ    4         connect command               0008  WCDISC    equ    8         disconnect               0010  WCCLOS    equ    16        close               0020  WCSEND    equ    32        send               0021  WCSNAC    equ    33        send mac               0022  WCSKEP    equ    34        send keep               0040  WCRECV    equ    64        receive               0080  WCSPEC    equ    128       special, combined commands               0081  WCRRQD    equ    128+1     read request data               0082  WCXMDR    equ    128+2     write data in fifo                                    0085  WCBIND    equ    128+5     bind  CPU<=>GPP               0086  WCACCP    equ    128+6     accpet CPU<=>GPP                     *                     * wzstat values                     *               0000  WSCLSD    equ    $00       sock closed               0013  WSINIT    equ    $13       sock init               0014  WSLIST    equ    $14       sock listen               0017  WSESTB    equ    $17       sock established               001C  WSCLWT    equ    $1c       sock close wait               0022  WSUDP     equ    $22       sock UDP               0042  WSMRAW    equ    $42       sock mac raw               0032  WSIRAW    equ    $32       sock IP raw               0015  WSSYNS    equ    $15       sock syn sent               0016  WSSYNR    equ    $16       sock syn received               0018  WSFWAI    equ    $18       sock fin wiat               001A  WSCLSG    equ    $1a       sock closing               001B  WSTIMW    equ    $1b       sock time wait               001D  WSLACK    equ    $1d       sock last ack               001E  WSRNBL    equ    $1e       sock read non block               001F  WSWNBL    equ    $1f       sock write non block               0080  WSSPEC    equ    $80       special combined commandsTask       Structure                 09:03:39  Dec 17, 2024   Page   15IOP        Memory Layout                                           0081  WSRRQF    equ    $80+1     read request data in fifo               0082  WSXMDD    equ    $80+2     xmit data taken from fifo                                          *                     * miscellaneous                     *               0080  PACK_FIRST equ   $80       in non TCP packet start to receive               0001  PACK_REMAI equ   $01       in non TCP packet received               0000  PACK_COMPL equ   $00       in non TCP complete toe receive                                          * is SOCK_NONBLOCK               0001  WFNBLK    equ    $01       in socket() call(wztype << 8)                     * is SOCK_SIGPIPECLS               0002  WFSPOC    equ    $02       in socket() call(wztype << 8)                       0000                         org    $0                     *                     * per wzsocket process and socket data                     *  0000               wzenum    rmb    1         [*] (pre=enum)  0001               wzdctr    rmb    1         [*] (pre= $00)  delay counter  0002               wzfsta    rmb    1         (pre= $00) status bits (SAME POS!! as in fdn)  0003               wzflg     rmb    1         [*] flasgs, swap busy                     *  0004               wzcmnd    rmb    1         command byte copy  0005               wzstat    rmb    1         status byte copy  0006               wzprio    rmb    1         priority helper  0007               wzerr     rmb    1         error code passing                     *  0008               wzxfer    rmb    2         transfer size  000A               wzrqln    rmb    2         requested size                     *  000C               wzdma1    rmb    2         if split xfer, first part  000E               wzdma2    rmb    2         task id, (if split xfer, second part)                     *                     * unix socket call info                     *  0010               wzsprt    rmb    2         source port  0012               wzdprt    rmb    2         destination port  0014               wzipad    rmb    4         dest IP address  0018               wzsflg    rmb    2         flags                     *                     * udp header info                     *  001A               wzuipa    rmb    4         ip address from UDP header  001E               wzuprt    rmb    2         port number from UDP header               0020  wzswap    equ    *         use this with TCP for swap  0020               wzurms    rmb    2         socket remained size                     * UDP write pointer  0022               wzuwrp    rmb    2         write pointer save                     *                     * open parametersTask       Structure                 09:03:40  Dec 17, 2024   Page   16IOP        Memory Layout                                                 *  0024               wzfaml    rmb    2         family            for check AF_  0026               wztype    rmb    2         type              for check SOCK_  0028               wzprot    rmb    2         protocol          for check IPPROTO_                                    002A  WZSIZE    equ    *-wzenum                       0000                         org    $0                     *                     * holds the local IP info, wzdev  net0                     * ipad, mask, gwad, macad                     *  0000               wzmyip    rmb    4         Device IP address  0004               wzsbnm    rmb    4         Subnet mask bits  0008               wzgwad    rmb    4         Gateway IP address  000C               wzhwad    rmb    6         Device Hardware address                     *  0012               wzdsta    rmb    1         up/down status  0013                         rmb    3                                    0016  WZLCSZ    equ    *-wzmyip                     *                     * this is (an attempt) to implement the Berkely                     * socket interface into the UniFLEX 6309 kernel (no 6809)                     *  0000                         org    0                                          * struct sockaddr  0000               sa_fam    rmb    2         address family  0002               sa_dat    rmb    14        protocol address               0010  SKADLN    equ    *                                          * struct sockaddr_in  0010               sin_fam   rmb    2         AF_INET  0012               sin_port  rmb    2         16 bit port  0014               sin_addr  rmb    4         32 bit netid/hostid                                          * address families               0000  AF_UNSP   equ    0         AF_UNSPEC               0001  AF_UNIX   equ    1         AF_UNIX               0002  AF_INET   equ    2         AF_INET                                          * socket types               0001  SK_STRM   equ    1         socket stream               0002  SK_DGRM   equ    2         datagram, conn less               0003  SK_MRAW   equ    3         mac raw socket               0004  SK_IRAW   equ    4         IP raw socket                     *               0100  SK_NONBLK equ    $0100     non blocking               0200  SK_SPONCL equ    $0200     SIGPIPE on close                                          * protocol familiesTask       Structure                 09:03:40  Dec 17, 2024   Page   17IOP        Memory Layout                                           0001  PF_UNIX   equ    AF_UNIX   same as address families               0002  PF_INET   equ    AF_INET                                    8000  PROT_XLTEOL equ  $8000     xlate CR<=>LF (stream only)               0001  PROT_ICMP equ    1               0002  PROT_IGMP equ    2               0008  PROT_EGP  equ    8                                          *               05C0  MAX_UDP   equ    1472      max size of UDP packet                                          FIO Simulation Structure             09:03:40  Dec 17, 2024   Page   18IOP        Memory Layout                                                                      *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     absolute addressed                                          ************************************************************                     * the first 32 bytes of a fifo/DPR area are the same                     * for ALL applications                     ************************************************************  0000               cpu_fio   rmb    1         Command code  0001               cpu_fio1  rmb    2         Task ID/sequence  0003               cpu_fio2  rmb    1         Message specific data  0004               cpu_fio3  rmb    2         Device designator  0006               cpu_fio4  rmb    2         UIO  0008               cpu_fio5  rmb    1         UIO                     ************************************************************  0009               fio_cpu   rmb    1         Response code  000A               fio_cpu1  rmb    2         Task ID /sequence  000C               fio_cpu2  rmb    1         Transaction specific value  000D               fio_cpu3  rmb    2         --  000F               fio_cpu4  rmb    2         UIO  0011               fio_cpu5  rmb    1         UIO                     ************************************************************                     *  0012               fifo_cnt  rmb    2         Count of data in FIFO  0014               fifo_get  rmb    2         retrieval ponter  0016               fifo_put  rmb    2         storage pointer                     *                     * these values are initialized by the IO CPU                     *  0018               fifo_us0  rmb    2         FIFO offset to application data                     *  001A               fifo_us1  rmb    2         FIFO offset to user specific area2  001C               fifo_us2  rmb    2         FIFO offset to user specific area2  001E               fifo_us3  rmb    2         FIFO offset to user specific area3                     *  0020                         rmb    32-(*-cpu_fio) ** Filler **                     * end of defined area                                          ************************************************************  0020               fifo      rmb    1                     * the size of the fifo is defined in the parameter block                     ************************************************************                                          ************************************************************                     * the top 4 locations are also fixed and shared on all applications                     ************************************************************FIO Simulation Structure             09:03:40  Dec 17, 2024   Page   19IOP        Memory Layout                              0021               DEV2CPU   rmb    1         debug data from IOP/GPP  0022               CPU2DEV   rmb    1         debug data to IOP/GPP                     * should end up at the two top locations in the DUALPORT RAM  0023               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when written  0024               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************FIO Simulation Structure             09:03:40  Dec 17, 2024   Page   20Dual_Port RAM Structure                                                                                            *                     * this is an OVERLAY on a 1Kx8 FIFO in DPR                     *                     * the primary fifo definitions are not touched                     *                     * some locations may be re-used for this purpose                     *               0000  DPR_BASE  equ    $0000     GPP DPR at this address (GPP)  0000                         org    DPR_BASE  -- Dual port RAM address                                          *               0000  nwp_strt  equ    *         first address  of DPR RAM                     *                     ******************************************************  0000                         rmb    32        defined in fio.h                       0020                         rmb    512       fifo space                     ******************************************************               0220  WZSKOFF   equ    *                     ******************************************************  0220               wzsk8     rmb    WZSIZE    sock structure  024A               wzsk7     rmb    WZSIZE    sock  0274               wzsk6     rmb    WZSIZE    sock  029E               wzsk5     rmb    WZSIZE    sock  02C8               wzsk4     rmb    WZSIZE    sock  02F2               wzsk3     rmb    WZSIZE    sock  031C               wzsk2     rmb    WZSIZE    sock  0346               wzsk1     rmb    WZSIZE    sock                     ******************************************************               0370  WZNETOF   equ    *  0370               wlocip    rmb    WZLCSZ    network device                                    03B0  wnboot    equ    wlocip+64 see netblock.h                                          ******************************************************                     *                     * fifo top                     * specified in fio.h                     *                     ******************************************************                     *                     * IOP ROM Version #                     *               0020  ROM_VERSION equ  $20       Major/Minor Version of IOP ROM                                          *                     * generic and specific transaction codes for use with fio_han                     * these are for IOP                     *                     FIO Simulation Structure             09:03:41  Dec 17, 2024   Page   21Dual_Port RAM Structure                                                  *                     * Error codes                     *               0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)               0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some sort of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   set    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)               00C0  E_SOCKET  equ    REJECT+$40 Socket error,                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     *               0010  O_OPEN    equ    $10       Open device               0020  O_CLOSE   equ    $20       Close device               0030  O_RQWR    equ    $30       Request write               0040  O_WRITE   equ    $40       Write data via fifo to IOP               0050  O_RQRD    equ    $50       Request read data               0060  O_READ    equ    $60       Read data for via fifo from IOP               0070  O_INTRPT  set    $70       Interrupt all tasks on a terminal               0080  O_WR1C    equ    $80       Write single character               0090  O_TTYS    equ    $90       TTY Set               00A0  O_TTYG    equ    $A0       TTY Get                                    00D0  O_PGETD   equ    $D0       Read baudrate settings               00E0  O_PSETD   equ    $E0       Write baudrate settings                                          *                     * Normal responses                     * error is with bit 7 set, A contains error code                     *               000F  R_RESET   equ    $0F       System reset & functioning               0001  R_OPEN    equ    $01       Device open successful               0002  R_CLOSE   equ    $02       Device close successful               0003  R_REQOK   equ    $03       Write request now granted               0004  R_WRITE   equ    $04       Write data complete               0005  R_RDOK    equ    $05       Read data now available               0006  R_READ    equ    $06       Read data in FIFO & no more data is available               0007  R_INTRPT  set    $07       Interrupt complete               0008  R_WR1C    equ    $08       Write single character               0009  R_RD1C    equ    $09       Single character available               000B  R_PDATA   equ    $0B       port data transaction succes               000C  R_READM   equ    $0C       Read data in fifo, more data waiting               000D  R_TTY     equ    $0D       TTYSET/GET complete               000E  R_CLOCK   equ    $0E       Interval Timer Tick                     *                     *                     * fio_codes.h is the leading file, here areFIO Simulation Structure             09:03:41  Dec 17, 2024   Page   22Dual_Port RAM Structure                                                  * ammendments                     *                     *               0003  R_RQWR    set    $03       [S]  Request for write               0005  R_RQRD    set    $05       [S]  Request for read               0007  R_INTRPT  set    $07       [S]  Interrupt complete               0008  R_CONNECT equ    $08       [S]  connect ok               0009  R_BIND    equ    $09       [S]  bind call ok               000A  R_LISTEN  equ    $0A       [S]  listen call ok               000B  R_ACCEPT  equ    $0B       [S]  accept call ok               000C  R_DISCON  equ    $0C       [S]  disconnect happened               000D  R_SNDMAC  equ    $0D       [S]  send mac done               000E  R_SNDKEP  equ    $0E       [S]  send keep alive done               000F  R_SPCL    equ    $0F       [S]  special call ok               0015  R_RQRDNB  equ    $15       [S]  non block return read               0013  R_RQWRNB  equ    $13       [S]  non block return write                     *               0021  R_RDFRM   equ    $21       [S]  request for data readfrom               0022  R_RRDFD   equ    $22       [S]  read data readfrom next packet               0023  R_RSNDTO  equ    $23       [S]  request write sendto               0024  R_WSNDTO  equ    $24       [S]  write data sendto               0025  R_SNDTOM  equ    $25       [S]  write data, request more                     *                     * netblock uses a specific interrupt routine                     *               0080  R_RQSBLK  equ    $80               0081  R_SNDBLK  equ    $81               0082  R_RQRBLK  equ    $82               0083  R_RDRBLK  equ    $83               0084  R_ERRBLK  equ    $84       error repsonse                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     * Socket functions                     *               0008  S_OPEN    equ    $08       Open socket               0010  S_CLOSE   equ    $10       Close socket               0018  S_RQWR    equ    $18       request write to socket               0020  S_WRITE   equ    $20       Write data to socket               0028  S_RQRD    equ    $28       Request read data from socket               0030  S_READ    equ    $30       Read data from socket               0038  S_INTRPT  equ    $38       Interrupt socket               0038  O_INTRPT  set    S_INTRPT               0040  S_CONNECT equ    $40       Connect socket               0048  S_BIND    equ    $48       Bind socket               0050  S_LISTEN  equ    $50       Listen on socket               0058  S_ACCEPT  equ    $58       Accept connection on socket               0060  S_DISCON  equ    $60       Disconnect socket               0068  S_SNDMAC  equ    $68       Send to mac               0070  S_SNDKEP  equ    $70       Send keep alive               0078  S_SPCL    equ    $78       Special. i.e set network device                     *FIO Simulation Structure             09:03:41  Dec 17, 2024   Page   23Dual_Port RAM Structure                                            0080  S_RRDFRM  equ    $80       request read readfrom               0088  S_RREAD   equ    $88       read data readfrom               0090  S_WRQSTO  equ    $90       request send ssendto               0098  S_WSNDTO  equ    $98       send data sendto               00A0  S_WSNDTM  equ    $a0       send to more data                     *                     * a8                     * b0                     * b8                     *               00C0  S_RQSBLK  equ    $c0       request send extended block               00C8  S_SNDBLK  equ    $c8       send extended block               00D0  S_RQRBLK  equ    $d0       request read extended block               00D8  S_RDRBLK  equ    $d8       read extended block                     *                     * e0                     * e8               00F0  S_NETBOOT equ    $f0       network boot               00F8  S_PG2FIFO equ    $f8       copy memory page to fifo               0020  MAX_S_NUM equ    32        # of supported functions (incl 0)                     *                     * definition of all interrupts in the W5500                     *                                          *                     * interrupts per socket (Socket registers)                     *               0001  SI_CON    equ    %00000001 Sn_IR(CON)               0002  SI_DIS    equ    %00000010 Sn_IR(DISCON)               0004  SI_RCV    equ    %00000100 Sn_IR(RECV)               0008  SI_TIM    equ    %00001000 Sn_IR(TIMEOUT)               0010  SI_SOK    equ    %00010000 Sn_IR(SEND_OK)                                          *                     * common interrupts  (Common registers)                     *               0010  CI_MP     equ    %00010000 Magic Packet               0020  CI_POC    equ    %00100000 PPoE Close               0040  CI_UNR    equ    %01000000 UNREACH               0080  CI_CFL    equ    %10000000 IP ConflictFIO Simulation Structure             09:03:42  Dec 17, 2024   Page   24Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"                       0400               DB_iflg   rmb    1         Debug terminal initialized  0401               DB_cntrl  rmb    2         Debug control flags                     *  0403               slplst    rmb    4         Pointer to waiting tasks  0407               utask     rmb    2         Currently executing task  0409               jobpri    rmb    1         Current job priority (for scheduling)  040A               chproc    rmb    1         Set if must switch users of CPU (reschedule)  040B               tskindx   rmb    1         index in task list  040C               NUM_TSK   rmb    1         max tasks                     *  040D               idle      rmb    1         idle loop flag for scheduler  040E               SI_Q      rmb    6*MAX_TI  Max Terminal Interrupts  0444               SI_Q_ptr  rmb    2         current Q pointer  0446               FIO_lock  rmb    1         FIO in use lock  0447               int_buf   rmb    12        Current Message in  0453               int_ptr   rmb    2         Message in pointer  0455               clock_tick rmb   1         Clock tick counter  0456               spiint    rmb    1         Interrupt flag from w5500  0457               wzanyp    rmb    2         Source Port                       0459               hstbuf    rmb    HRECSIZ*MAXHIST  0499               hstptr    rmb    2         next "put" pointer in history queue                       049B               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table                     *  04A1                         rmb    32                       04C1               tsktab    rmb    TSKSIZ*15 Start of dynamic system tables                                    115A  lstram    equ    *               3EFF  end_vars  equ    RAMend    End of System Variables                                          FIO Simulation Structure             09:03:42  Dec 17, 2024   Page   25CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E0CB                    fdb    rom_trap  Unused  FFF2 E0C4                    fdb    rom_swi3  SWI3  FFF4 E0BD                    fdb    rom_swi2  SWI2  FFF6 E0B0                    fdb    rom_firq  FIRQ  FFF8 E3AF                    fdb    IRQ_han   IRQ  FFFA E0B7                    fdb    rom_swi   SWI  FFFC E0AA                    fdb    rom_nmi   Background debug  FFFE E079                    fdb    rom_init  Reset                     *                               info   UniFLEX Networking ROM                               info   for CPU09GPP+09NET                               info   At the start of ROM the locations for preset                               info   the network setting are reserved                               info   0000...0005  MAC ADDRESS                               info   0006...0009  IP address                               info   000A...000D  NETMASK                               info   000E...0011  GATEWAY IP address                               info   avoid any duplicate settings!                                          FIO Simulation Structure             09:03:42  Dec 17, 2024   Page   26System     RESET Code                                                      E000                         org    ROMLOorg                                          * start of ROM                     ***************************************************************                     *                     * contains the MAC ADDRESS to be used, make sure that is unique                     *                     * contains the IP address for the interface                     *                     * contains the NETMASK for the interface                     *                     * contains the IP address of the GATEWAY                     *                     **************************************************************                     *                     * REPLACE the defaults with your specific values                     *                     * this is for the local network device setup                     *                     * mac address 6 bytes                            (Ex00...Ex05)                     *  E000 FF FF FF FF   wzifma    fcb    $FF,$FF,$FF,$FF,$FF,$FF                     *                     * Note! HERE  IP addresses are written COMMA SEPARATED!                     *                     * IP addres for THIS interface (avoid duplicates!!!)  E006 FF FF FF FF   wzifip    fcb    255,255,255,255 (Ex06...Ex09)                     * NETMASK  E00A FF FF FF FF   wzifnm    fcb    255,255,255,255 (Ex0A...Ex0D)                     * GATEWAY IP address  E00E FF FF FF FF   wzifga    fcb    255,255,255,255 (Ex0E...E011)                     *                     **************************************************************                                          **************************************************************                       E012 0D 4E 57 50   DBmsg00   fcc    $d,'NWP ROM :241217',0                                          **************************************************************                     *  E023 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E043 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E057 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          *                     * share settings with kernel driver code                     *               E074  fio_fsz   equ    *         device fifo size               E076  fio_dsz   equ    *+2       device RAM size               E078  max_trn   equ    *+4       max transactions                     *FIO Simulation Structure             09:03:43  Dec 17, 2024   Page   27System     RESET Code                                                    * share specific DUAL PORT RAM device initialization                     * between UniFLEX kernel and NWP CPU                     *  E074 0200                    fdb    512       fio_fsz FIFO SIZE  E076 0400                    fdb    1024      fio_dsz DEVICE SIZE  E078 08                      fcb    8         fio_mxtrn MAX_TRANSACTIONS                     *                     * declaration of offsets and settings                     *               0008  MAX_WZ    equ    8         # of sockets in w5500                                                               *                     * System RESET code                     *  E079 10CE 7FE0     rom_init  lds    #ROMstack initialize stack pointer  E07D                         ldmd   3  E07D 113D                    fdb    $113d  E07F 03                      fcb    3                               endm                      >E080 BD   E0EC     20        jsr    stbinit   go initialize system memory                       E083 10CE 04C1     30        lds    #tsktab   Task 0 Stack  E087 32   E9 00D7            leas   TSKSIZ,s  E08B 17   015E               lbsr   fio_reset  E08E BD   E5DA               jsr    skdvini   set the device itself  E091 17   0135               lbsr   timerin                       E094 34   30                 pshs   x,y  E096 108E E013               ldy    #DBmsg00+1 skip initial EOL  E09A 8E   03E0               ldx    #$03e0    top of FIFO  E09D A6   A0       02        lda    0,y+  E09F 27   04                 beq    01f  E0A1 A7   80                 sta    0,x+      copy ROM info  E0A3 20   F8                 bra    02b  E0A5 35   30       01        puls   x,y                                          *                     * Initialization complete - Start executing commands                     *  E0A7               fio_start  E0A7 7E   E4B7     10        jmp    rsched                                          FIO Simulation Structure             09:03:43  Dec 17, 2024   Page   28ROM        Interrupt Fielders                                              E0AA 8D   26       rom_nmi   bsr    rom_int  E0AC 4E 4D 49 00             fcc    'NMI',0  E0B0 8D   20       rom_firq  bsr    rom_int  E0B2 46 49 52 51             fcc    'FIRQ',0  E0B7 8D   19       rom_swi   bsr    rom_int  E0B9 53 57 49 00             fcc    'SWI',0  E0BD 8D   13       rom_swi2  bsr    rom_int  E0BF 53 57 49 32             fcc    'SWI2',0  E0C4 8D   0C       rom_swi3  bsr    rom_int  E0C6 53 57 49 33             fcc    'SWI3',0  E0CB 8D   05       rom_trap  bsr    rom_int  E0CD 54 52 41 50             fcc    'TRAP',0                       E0D2 8E   E0DF     rom_int   ldx    #ROM_ERR  E0D5 BD   F3B2               jsr    DB_pdata  E0D8 35   10                 puls   x  E0DA BD   F3B2               jsr    DB_pdata  E0DD 20   FE       rom_bad   bra    *                     *  E0DF 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0                                          *FIO Simulation Structure             09:03:43  Dec 17, 2024   Page   29Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0EC 8E   0000     stbinit   ldx    #0        s  clear all variables  E0EF CC   0000               ldd    #0  E0F2 ED   81       10        std    ,x++  E0F4 8C   3EFF               cmpx   #end_vars done yet?  E0F7 25   F9                 blo    10b                       E0F9 CC   0D04               ldd    #DEBUG  E0FC FD   0401               std    DB_cntrl                                            E0FF B6   E078               lda    max_trn   shared with main CPU  E102 8B   04                 adda   #4        fixed system tasks  E104 B7   040C               sta    NUM_TSK                     * >E107 17   0013               lbsr   set_tables go figure out configuration, tables, etc                                          * Initialize Socket Interrupt Queue  E10A 8E   040E     15        ldx    #SI_Q     set queue empty  E10D BF   0444               stx    SI_Q_ptr  E110 8E   0447               ldx    #int_buf  reset message in pointer  E113 BF   0453               stx    int_ptr                      >E116 17   005B     17        lbsr   tskinit   initialize tasks                       E119 17   12B4     18        lbsr   DB_config display configuration  E11C 39                      rts                                          *                     * Set up system tables                     *  E11D               set_tables  E11D 108E 049B               ldy    #dev_tab  E121 8E   E577               ldx    #DEV_SOCK  E124 AF   22                 stx    dev_type,y  E126 AD   98 42              jsr    [D_init,x] (skinit)                                          * Compute configuration  E129 CE   E1DB               ldu    #mod_tbl  tables with module refs  E12C AE   C4       12        ldx    mod_type,u  E12E 27   09                 beq    20f       jump if end of module table  E130 AD   98 44              jsr    [D_test,x] check for device  E133 25   04                 bcs    15f       jump if found  E135 33   44                 leau   MOD_SIZE,u  E137 20   F3                 bra    12b                     *  E139               15FIO Simulation Structure             09:03:43  Dec 17, 2024   Page   30Table      Initialization                             E139               20                     * -- All done setting up configuration                       E139 CC   04C1               ldd    #tsktab   start of system tables  E13C 1F   03                 tfr    d,u                     * -- Task table  E13E 86   D7                 lda    #TSKSIZ  E140 F6   040C               ldb    NUM_TSK  E143 3D                      mul >E144 17   001F               lbsr   sto_chk   check for system table space overflow                     *                     * -- All done  E147 39            90        rts                     *  E148 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E15F 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                    *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E166 33   CB       sto_chk   leau   d,u       compute new end pointer  E168 1183 3EFF               cmpu   #end_vars overflow?  E16C 22   03                 bhi    10f       yes - return error  E16E 1C   FE                 clc              no         - return OK  E170 39                      rts  E171 1A   01       10        sec              ..         bad owies  E173 39                      rts                                          *                     * tskinit - Initialize all tasks                     *  E174 8E   04C1     tskinit   ldx    #tsktab  E177 BF   0407               stx    utask  E17A F6   040C               ldb    NUM_TSK   # tasks in system  E17D 34   04                 pshs   b  E17F 108E 04C1               ldy    #tsktab   task 1  E183 31   A9 00D7            leay   TSKSIZ,y                       E187 86   04       10        lda    #TFREE    mark all tasks free  E189 8C   04C1               cmpx   #tsktab   is this the system task?  E18C 26   02                 bne    15f  E18E 86   05                 lda    #TSYS     the system task is never free  E190 A7   04       15        sta    tsstat,x  E192 86   FF                 lda    #$FF      not associated with a terminal  E194 A7   0D                 sta    tsdev,xFIO Simulation Structure             09:03:44  Dec 17, 2024   Page   31Table      Initialization                             E196 A7   0E                 sta    tsdev+1,x  E198 33   89 00D7            leau   TSKSIZ,x  initialize stack  E19C CC   E339               ldd    #IO_han  E19F 34   20                 pshs   y  E1A1 AC   E1                 cmpx   ,s++      task 1?  E1A3 26   03                 bne    20f       no - normal I/O handling task  E1A5 CC   E403               ldd    #SI_HAN   yes - special terminal interrupt handling task  E1A8 36   06       20        pshu   d  E1AA EF   88 11              stu    usp,x  E1AD EF   88 13              stu    umark0,x  E1B0 30   89 00D7            leax   TSKSIZ,x  E1B4 6A   E4                 dec    0,s       done?  E1B6 26   CF                 bne    10b                       E1B8 32   61                 leas   1,s       clean up stack  E1BA CC   0000               ldd    #0        nothing running or sleeping  E1BD FD   0403               std    slplst  E1C0 FD   0405               std    slplst+tsslnk  E1C3 30   A4                 leax   0,y       start interrupt handling task  E1C5 BD   E4F6               jsr    makrdy  E1C8 39                      rts                                                               *                     * GPP interrupt timer                     *               8400  tim_base  equ    $8400               8401  tim_rest  equ    $8401                       E1C9 86   00       timerin   lda    #%00000000 D0      (OFF!)  E1CB B7   8400               sta    tim_base  interrupt enable  E1CE 39                      rts                                                         E1CF  timerack  equ    *  E1CF 86   01                 lda    #1  E1D1 B7   8401               sta    tim_rest  reset interrupt  E1D4 39                      rts                       E1D5 B6   8400     timerchk  lda    tim_base  E1D8 84   80                 anda   #%10000000 interrupt flag  E1DA 39                      rtsFIO Simulation Structure             09:03:44  Dec 17, 2024   Page   32IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E1DB  mod_tbl   equ    *  E1DB E577 E1E1               fdb    DEV_SOCK,WZ5_name  E1DF 0000                    fdb    0                     *  E1E1 57 35 35 30   WZ5_name  fcc    'W5500_SOCK',0FIO Simulation Structure             09:03:44  Dec 17, 2024   Page   33FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     * it is assumed that the FIO (DPR) sits at $0000                     * it sets the offsets to the sock array and to the device info                     *  E1EC               fio_reset                     * when here, all storage locations have been erased already                     *  E1EC 8E   0000               ldx    #0  E1EF 9F   14                 stx    fifo_get  set Q pointers  E1F1 9F   16                 stx    fifo_put  E1F3 8E   0370               ldx    #WZNETOF  E1F6 9F   1A                 stx    fifo_us1  E1F8 8E   0220               ldx    #WZSKOFF  E1FB 9F   18                 stx    fifo_us0  so that kernel CPU can see it                     * init the 8 SOCK structs  E1FD 86   08                 lda    #8  E1FF A7   84       01        sta    wzenum,x  E201 30   88 2A              leax   WZSIZE,x  to next  E204 4A                      deca  E205 26   F8                 bne    01b                     *  E207 BE   E076               ldx    fio_dsz  E20A 30   1E                 leax   -2,x      one from top  E20C CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E20F C6   FF       fio_wait  ldb    #255      Spin counter                     *  E211               00  E211 6D   84                 tst    0,x       fio_cpuF  E213 27   16                 beq    10f                     *  E215 5A                      decb  E216 26   F9                 bne    00b       jump back if not ready                     *  E218 33   5F                 leau   -1,u  E21A 1183 0000               cmpu   #0  E21E 26   EF                 bne    fio_wait  E220 8E   E057               ldx    #CPU_down  E223 17   118C               lbsr   DB_pdata  E226 17   1183               lbsr   DB_main  E229 20   C1                 bra    fio_reset                     * reset OK  E22B 39            10        rts                                                               *                     * FIO interrupt handler, called when IRQ was set (interrupt context)                     * for regular NWP and IOP purpose                     *  E22C BE   0453     fio_irq   ldx    int_ptr   input message pointerFIO Simulation Structure             09:03:45  Dec 17, 2024   Page   34FIO        Simulation Routines                        E22F 96   00                 lda    cpu_fio   move REQUEST  E231 A7   80                 sta    ,x+  E233 DC   01                 ldd    cpu_fio1  sequence # TASK ID  E235 ED   81                 std    ,x++  E237 96   03                 lda    cpu_fio2  specific DATA  E239 A7   80                 sta    ,x+  E23B DC   04                 ldd    cpu_fio3  device major/minor  E23D ED   81                 std    ,x++                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     *  E23F FE   E076               ldu    fio_dsz  E242 33   5F                 leau   -1,u  E244 6F   C4                 clr    0,u       cpu_fioF indicate message consumed                     *  E246 BF   0453               stx    int_ptr   update pointer  E249 108E 0447               ldy    #int_buf  get message from buffer  E24D A6   A4                 lda    0,y       -- Send interrupt command?  E24F 81   38                 cmpa   #S_INTRPT  E251 26   0D                 bne    30f                     *                     * special case OOB signal                     *  E253 10BF 0453               sty    int_ptr   reset pointer  E257 E6   23                 ldb    3,y       signal  E259 AE   24                 ldx    4,y       SOCK reference                     *  E25B BD   E632               jsr    sdev_sig  send device signal  E25E 20   35                 bra    fiointe   exit                     *                     * normal command                     * acquire free task slot                     *  E260 8E   04C1     30        ldx    #tsktab   search for an available task  E263 F6   040C               ldb    NUM_TSK   Number of tasks in system                     *  E266 A6   04       32        lda    tsstat,x  E268 81   04                 cmpa   #TFREE    looking for a "free" task  E26A 27   0E                 beq    40f                     *  E26C 30   89 00D7            leax   TSKSIZ,x  E270 5A                      decb  E271 26   F3                 bne    32b                     *  E273 C6   82                 ldb    #E_SYSBSY can't process - IOP saturated! >E275 BD   E296               jsr    fio_msg  E278 20   1B                 bra    fiointe   exit                     *                     * X[0]=cmd,X[1][2]=task ID,X[3]=data, X[4][5]=device                     * move data over into task struct                     *  E27A 108E 0447     40        ldy    #int_buf  get message from bufferFIO Simulation Structure             09:03:45  Dec 17, 2024   Page   35FIO        Simulation Routines                        E27E 10BF 0453               sty    int_ptr   reset pointer  E282 E6   A0                 ldb    ,y+       command byte  REQUEST  E284 E7   09                 stb    tscmd,x   save for task  E286 EC   A1                 ldd    ,y++      sequence #    task ID  E288 ED   0A                 std    tsseq,x  E28A E6   A0                 ldb    ,y+       command specific DATA  E28C E7   0C                 stb    tstval,x  E28E EC   A1                 ldd    ,y++      associate with terminal major/minor  E290 ED   0D                 std    tsdev,x  E292 BD   E4F6               jsr    makrdy    make task ready to run                     *  E295 39            fiointe   rts              exit                                          *                     * fio_msg - Send a message via the FIO Mailbox                     * it is assumed that the FIO (DPR) sits at $0000                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *                     * used for netblock/IOP and NWP purpose                     *  E296 34   55       fio_msg   pshs   cc,b,x,u  save register  E298                         seti  E298 1A   50                 orcc   #FF|IF                               endm  E29A FE   E076               ldu    fio_dsz  E29D 33   5E                 leau   -2,u      one off top  E29F D7   09                 stb    fio_cpu   set up mailbox value                     * interrupt location  E2A1 E7   C4       5         stb    0,u       fio_cpuF, tell the message type                     *  E2A3 8E   0000     05        ldx    #0        time-out counter                     *  E2A6 A6   C4       10        lda    0,u       fio_cpuF   wait till value consumed  E2A8 27   06                 beq    20f       jump if consumed                     *  E2AA 30   1F                 leax   -1,x      time-out yet?  E2AC 26   F8                 bne    10b                     *  E2AE 20   F3                 bra    05b       try again                     *  E2B0 35   D5       20        puls   cc,b,x,u,pc                     *                                          *                     * this is the normal way the IOP sends data to the host CPU                     * fio_response - Return a response code/sequence #                     * it is assumed that the FIO (DPR) sits at $0000                     *    X = utask,                     *    B - Response code                     *    A - Transaction specific value                     *FIO Simulation Structure             09:03:45  Dec 17, 2024   Page   36FIO        Simulation Routines                        E2B2 34   16       fio_response pshs d,x  E2B4 8D   18                 bsr    FIO_get   access FIO  E2B6 BE   0407               ldx    utask     task ID  E2B9 EC   0A                 ldd    tsseq,x  E2BB DD   0A                 std    fio_cpu1  E2BD EC   0D                 ldd    tsdev,x   device info  E2BF DD   0D                 std    fio_cpu3  E2C1 A6   E4                 lda    0,s       get transaction specific value (i.e. error code)  E2C3 97   0C                 sta    fio_cpu2  E2C5 E6   61                 ldb    1,s       is RESPONSE code >E2C7 BD   E296               jsr    fio_msg  E2CA 8D   17                 bsr    FIO_rel   release FIO  E2CC 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E2CE 34   76       FIO_get   pshs   d,x,y,u   save registers  E2D0 108E 0446     10        ldy    #FIO_lock is the device locked  E2D4 6D   A4                 tst    0,y  E2D6 27   07                 beq    20f       no - go get it                     *  E2D8 C6   CE                 ldb    #FIOPRI   waiting for the FIO  E2DA BD   E524               jsr    sleep  E2DD 20   F1                 bra    10b       try again                     *  E2DF 6C   A4       20        inc    0,y       mark in use  E2E1 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E2E3 34   76       FIO_rel   pshs   d,x,y,u  E2E5 108E 0446               ldy    #FIO_lock  E2E9 6F   A4                 clr    0,y  E2EB BD   E500               jsr    wakeup  E2EE 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E2F0 34   04       FIFOgeta  pshs   b  E2F2 8D   05                 bsr    FIFO_get  E2F4 35   02                 puls   a  E2F6 1E   89                 exg    a,b  E2F8 39                      rts                     *  E2F9 34   12       FIFO_get  pshs   a,x  E2FB DC   12                 ldd    fifo_cnt  any data?  E2FD 27   15                 beq    99f       no - exitFIO Simulation Structure             09:03:45  Dec 17, 2024   Page   37FIO        Simulation Routines                                           *  E2FF                         decd   yes       - adjust count  E2FF 104A                    fdb    $104a                               endm  E301 DD   12                 std    fifo_cnt  E303 9E   14                 ldx    fifo_get  get consumer pointer  E305 E6   88 20              ldb    fifo,x    fetch byte  E308 30   01                 leax   1,x       bump pointer  E30A BC   E074               cmpx   fio_fsz   end of fifo?  E30D 26   03                 bne    10f                     *  E30F 8E   0000               ldx    #0        reset pointer                     *  E312 9F   14       10        stx    fifo_get                     *  E314 35   92       99        puls   a,x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E316 34   04       FIFOputa  pshs   b  E318 1F   89                 tfr    a,b  E31A 8D   02                 bsr    FIFO_put  E31C 35   84                 puls   b,pc                     *  E31E 34   16       FIFO_put  pshs   d,x  E320 9E   16                 ldx    fifo_put  get consumer pointer  E322 E7   88 20              stb    fifo,x    store byte  E325 30   01                 leax   1,x       bump pointer  E327 BC   E074               cmpx   fio_fsz   end of FIFO?  E32A 26   03                 bne    10f                     *  E32C 8E   0000               ldx    #0        reset pointer  E32F 9F   16       10        stx    fifo_put                     *  E331 DC   12                 ldd    fifo_cnt  E333                         incd  E333 104C                    fdb    $104c                               endm  E335 DD   12                 std    fifo_cnt  E337 35   96       99        puls   d,x,pcFIO Simulation Structure             09:03:46  Dec 17, 2024   Page   38IO         Command Handler                                               *                     *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *  E339               IO_han                     *                     * we execute the task belonging to the transaction                     *  E339                         clri  E339 1C   AF                 andcc  #!(FF|IF)                               endm  E33B BE   0407               ldx    utask     get task control block address  E33E A6   09                 lda    tscmd,x   get I/O command                     *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E340 44                      lsra             isolate    command  E341 44                      lsra  E342 44                      lsra                     **        lsra  E343 81   20                 cmpa   #MAX_S_NUM  E345 22   64                 bhi    bad_cmd                     *  E347 48                      lsla             --   word index on command  E348 34   10                 pshs   x  E34A 8E   049B               ldx    #dev_tab  E34D AE   02                 ldx    dev_type,x get handler table address  E34F 10AE 86                 ldy    a,x       get processor address  E352 35   10                 puls   x  E354 34   20                 pshs   y  E356 10AE 0F                 ldy    tsagin,x  if 0, d nothing  E359 27   0A                 beq    05f       else it is target ponter  E35B 10AF E4                 sty    0,s  E35E 108E 0000               ldy    #0  E362 10AF 0F                 sty    tsagin,x  reset pointer  E365 35   20       05        puls   y         change address  E367 4F                      clra                     *  E368 8E   E390               ldx    #IO_end   interrupt handler address  E36B 34   10                 pshs   x  E36D BE   0407               ldx    utask     task pointer  E370 10EF 88 15              sts    umark1,x  E374 EE   0D                 ldu    tsdev,x   get sock refernce  E376 1E   03                 exg    d,u  E378 84   07                 anda   #%00000111 mask off address bitsFIO Simulation Structure             09:03:46  Dec 17, 2024   Page   39IO         Command Handler                            E37A 1E   03                 exg    d,u                     *                     * CALL HANDLER: X=utask, Y=handler address, U=sock address                     *  E37C AD   A4                 jsr    0,y       perform operation & return status  E37E 32   62                 leas   2,s       clean up stack                     *                     * on return, Y= flag. -1 is resched, else end task                     *  E380 BE   0407               ldx    utask     restore task pointer  E383 108C FFFF               cmpy   #$ffff  E387 26   04                 bne    20f                     * task is NOT done yet  E389                         seti   set       interrupt mask  E389 1A   50                 orcc   #FF|IF                               endm  E38B 20   18                 bra    91f       just escape (and come back)                     *                     * A=transaction value, B=response code, U=device reference                     * X = task pointer                     * in fio_response the task ID is added as sequence reference                     * SEND the response to the host CPU                     *                     *  E38D BD   E2B2     20        jsr    fio_response                     *                     * task is done                     *  E390               IO_end    seti   mask      interrupts  E390 1A   50                 orcc   #FF|IF                               endm  E392 BE   0407               ldx    utask     restore task control block address  E395 A7   0C                 sta    tstval,x  remember transaction value sent  E397 E7   09                 stb    tscmd,x   and command response  E399 86   04                 lda    #TFREE    mark task "terminated & free"  E39B A7   04                 sta    tsstat,x  E39D 86   FF                 lda    #$FF      disassociate from any terminal  E39F A7   0D                 sta    tsdev,x  E3A1 A7   0E                 sta    tsdev+1,x  E3A3 6F   08                 clr    tssgnl,x  no waiting signals                     *                     * exit here to rescheduling                     *  E3A5 BD   E4B7     91        jsr    rsched    run other tasks >E3A8 16   FF8E               lbra   IO_han                                          *                     * Illegal command                     *  E3AB               bad_cmd  E3AB C6   81                 ldb    #E_BADCMD error code  E3AD 20   DE                 bra    20bFIO Simulation Structure             09:03:46  Dec 17, 2024   Page   40IO         Command Handler                                               *          rts          (bug in original code 240424)FIO Simulation Structure             09:03:46  Dec 17, 2024   Page   41Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                     *               E3AF  IRQ_han   equ    *                     *                     * Check for FIO Mailbox interrupt                     *  E3AF BE   E076     10        ldx    fio_dsz  E3B2 30   1F                 leax   -1,x  E3B4 A6   84                 lda    0,x       cpu_fioF   see if mailbox interrupt  E3B6 27   03                 beq    99f       no - move on  E3B8 BD   E22C               jsr    fio_irq   call fio interrupt handler                     *                     *         lbsr    DB_main                     *  E3BB 3B            99        rti              return from interrupt                     *  E3BC 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E3C7 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             09:03:47  Dec 17, 2024   Page   42Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E3D4 34   36       int_all   pshs   d,x,y  E3D6 F6   040C               ldb    NUM_TSK  E3D9 C0   02                 subb   #2  E3DB 34   04                 pshs   b  E3DD 8E   04C1               ldx    #tsktab  E3E0 30   89 01AE            leax   2*TSKSIZ,x                     *  E3E4 EC   61       10        ldd    1,s  E3E6 10A3 0D                 cmpd   tsdev,x   is this guy associated with the device?  E3E9 26   0C                 bne    20f                     *  E3EB BC   0407               cmpx   utask     make sure I don't get blown away  E3EE 27   07                 beq    20f                     *  E3F0 34   16                 pshs   d,x  E3F2 BD   E559               jsr    xmtint    interrupt task  E3F5 35   16                 puls   d,x                     *  E3F7 30   89 00D7  20        leax   TSKSIZ,x  next task  E3FB 6A   E4                 dec    0,s       more tasks?  E3FD 26   E5                 bne    10b  E3FF 32   61                 leas   1,s                     *  E401 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             09:03:47  Dec 17, 2024   Page   43Terminal   Interrupt Handling Task                                                            *                     * SI_HAN Socket interrupt handler                     *  E403 108E 040E     SI_HAN    ldy    #SI_Q     Terminal Interrupt Queue  E407                         seti  E407 1A   50                 orcc   #FF|IF                               endm  E409 FE   0444               ldu    SI_Q_ptr  get current Q ptr  E40C 1183 040E               cmpu   #SI_Q     anything in Q?  E410 26   07                 bne    20f       yes - go process it                     *  E412 C6   D8                 ldb    #SIQPRI   wait for something to do  E414 BD   E524               jsr    sleep  E417 20   EA                 bra    SI_HAN                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *  E419 E6   C2       20        ldb    0,-u      B = Interrupt #  E41B 34   04                 pshs   b  E41D EC   C3                 ldd    0,--u     A = Device #  E41F 34   06                 pshs   d  E421 EC   C3                 ldd    0,--u     task ID  E423 34   06                 pshs   d         save registers  E425 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * S[0][1]=task,U[2][3]=dev,U[4]=response                     *  E428 E6   63                 ldb    3,s       set up to flush all input for this terminal  E42A                         clri   allow     interrupts  E42A 1C   AF                 andcc  #!(FF|IF)                               endm                     *  E42C BD   E2CE               jsr    FIO_get   get access to FIO  E42F EC   E1                 ldd    0,s++     task ID  E431 DD   0A                 std    fio_cpu1  E433 EC   E1                 ldd    ,s++      terminal #  E435 DD   0D                 std    fio_cpu3  terminal  E437 E6   E0                 ldb    ,s+       interrupt #  E439 D7   0C                 stb    fio_cpu2  signal  E43B C6   07                 ldb    #R_INTRPT  E43D BD   E296               jsr    fio_msg   send interrupt message  E440 BD   E2E3               jsr    FIO_rel   release access to FIO  E443 20   BE                 bra    SI_HAN    process more if needed                                          *                     * Send_SI - Send a socket interrupt                     *   B = Interrupt #                     *   X = task struct                     *   U= wzsock                     *   jsr send_SI                     *FIO Simulation Structure             09:03:47  Dec 17, 2024   Page   44Terminal   Interrupt Handling Task                    E445 34   76       send_SI   pshs   d,x,y,u   save registers  E447 EC   C8 26              ldd    wztype,u  E44A 85   02                 bita   #WFSPOC  E44C 27   1F                 beq    99f                     *  E44E FE   0444               ldu    SI_Q_ptr  get Q head  E451 1183 0444               cmpu   #SI_Q_ptr check for overflow  E455 24   0F                 bhs    90f       exit if so - sorry                     *  E457 EC   0A                 ldd    tsseq,x   task ID @ master side  E459 ED   C1                 std    0,u++  E45B EC   0D                 ldd    tsdev,x   wzsock#  E45D ED   C1                 std    0,u++     place value in Queue  E45F E6   61                 ldb    1,s       old B  E461 E7   C0                 stb    0,u+  E463 FF   0444               stu    SI_Q_ptr  update pointer                     *                     * U[0]=int,U[1][2]=dev,U[3][4]=task                     *                     *  E466 108E 040E     90        ldy    #SI_Q     wake up Queue server  E46A BD   E500               jsr    wakeup  E46D 35   F6       99        puls   d,x,y,u,pc return                     FIO Simulation Structure             09:03:47  Dec 17, 2024   Page   45History    Entry Procedures                                                                   *                     * H_cpu - Place a transaction from the CPU into                     *         the history Queue.                     *  E46F 34   16       H_cpu     pshs   d,x  E471 BE   0499               ldx    hstptr    get history queue pointer  E474 96   00                 lda    cpu_fio  E476 A7   84                 sta    hst_cmd,x  E478 96   01                 lda    cpu_fio1  E47A A7   01                 sta    hst_seq,x  E47C 96   04                 lda    cpu_fio3  E47E A7   02                 sta    hst_tty,x  E480 96   03                 lda    cpu_fio2  E482 A7   03                 sta    hst_val,x  E484 30   04                 leax   HRECSIZ,x  E486 8C   0499               cmpx   #hstptr   end of Queue?  E489 25   03                 blo    10f  E48B 8E   0459               ldx    #hstbuf  E48E BF   0499     10        stx    hstptr  E491 35   96                 puls   d,x,pc                                          *                     * H_fio - Place a transaction from the IOP into                     *         the history Queue.                     *  E493 34   16       H_fio     pshs   d,x  E495 BE   0499               ldx    hstptr    get history queue pointer  E498 96   09                 lda    fio_cpu  E49A A7   84                 sta    hst_cmd,x  E49C 96   0A                 lda    fio_cpu1  E49E A7   01                 sta    hst_seq,x  E4A0 96   0D                 lda    fio_cpu3  E4A2 A7   02                 sta    hst_tty,x  E4A4 96   0C                 lda    fio_cpu2  E4A6 A7   03                 sta    hst_val,x  E4A8 30   04                 leax   HRECSIZ,x  E4AA 8C   0499               cmpx   #hstptr   end of Queue?  E4AD 25   03                 blo    10f  E4AF 8E   0459               ldx    #hstbuf  E4B2 BF   0499     10        stx    hstptr  E4B5 35   96                 puls   d,x,pcFIO Simulation Structure             09:03:48  Dec 17, 2024   Page   46Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * rsched                     *                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready,                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E4B7               rsched    seti   mask      interrupts  E4B7 1A   50                 orcc   #FF|IF                               endm                     *  E4B9               rsched2   clri  E4B9 1C   AF                 andcc  #!(FF|IF)                               endm  E4BB 12                      nop  E4BC                         seti  E4BC 1A   50                 orcc   #FF|IF                               endm  E4BE 8D   1A                 bsr    stptsk  E4C0 8D   09                 bsr    gtsktb                     *  E4C2 A6   04                 lda    tsstat,x  ready?  E4C4 81   01                 cmpa   #TRUN  E4C6 26   F1                 bne    rsched2                     *  E4C8 8D   21                 bsr    swtchu    switch users top page  E4CA 39                      rts              return                                          *                     * select next (runnable) task                     *  E4CB 34   06       gtsktb    pshs   d         current index  E4CD 8E   04C1               ldx    #tsktab   task table  E4D0 F6   040B               ldb    tskindx  E4D3 86   D7                 lda    #TSKSIZ  E4D5 3D                      mul  E4D6 30   8B                 leax   d,x       select task  E4D8 35   86                 puls   d,pc                       E4DA 34   02       stptsk    pshs   a  E4DC B6   040B               lda    tskindx   step index  E4DF 4C                      incaFIO Simulation Structure             09:03:48  Dec 17, 2024   Page   47Scheduler  routines                                   E4E0 B1   040C               cmpa   NUM_TSK  E4E3 25   01                 blo    01f       against max  E4E5 4F                      clra  E4E6 B7   040B     01        sta    tskindx  E4E9 35   82                 puls   a,pc                                          *                     * Switch users                     *   X - Task entry for new task                     *  E4EB 35   20       swtchu    puls   y         get return address  E4ED BF   0407               stx    utask     set up new running task  E4F0 10EE 88 13              lds    umark0,x  reset stack  E4F4 6E   A4                 jmp    0,y       return to caller                     FIO Simulation Structure             09:03:48  Dec 17, 2024   Page   48Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E4F6 86   01       makrdy    lda    #TRUN     set status  E4F8 A7   04                 sta    tsstat,x  E4FA CC   0000               ldd    #0        clear events flag  E4FD ED   06                 std    tsevnt,x                     *  E4FF 39            makrd6    rts              returnFIO Simulation Structure             09:03:48  Dec 17, 2024   Page   49Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E500 34   57       wakeup    pshs   cc,d,x,u  save registers  E502                         seti   mask      interupts  E502 1A   50                 orcc   #FF|IF                               endm  E504 CE   0403               ldu    #slplst  E507 AE   42                 ldx    tsslnk,u  point to sleep list  E509 27   0B                 beq    wakeu4                     *  E50B 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E50E 27   08                 beq    wakeu5  E510 33   84                 leau   0,x       mark this entry                     *  E512 AE   02       wakeu3    ldx    tsslnk,x  follow chain  E514 26   F5                 bne    wakeu2    end of list?                     *  E516 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E518 34   70       wakeu5    pshs   x,y,u     save registers  E51A EC   02                 ldd    tsslnk,x  remove from list  E51C ED   42                 std    tsslnk,u  E51E 8D   D6                 bsr    makrdy    put on ready list  E520 35   70                 puls   u,x,y  E522 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             09:03:49  Dec 17, 2024   Page   50Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *  E524 34   51       sleep     pshs   cc,x,u    save registers  E526 BE   0407               ldx    utask     point to task  E529 6D   08                 tst    tssgnl,x  any signals waiting?  E52B 26   1F                 bne    sleep7                     *  E52D                         seti   mask      ints  E52D 1A   50                 orcc   #FF|IF                               endm  E52F E7   05                 stb    tsprir,x  set priority  E531 10AF 06                 sty    tsevnt,x  set event  E534 86   02                 lda    #TSLEEP   set status  E536 A7   04                 sta    tsstat,x  E538 FC   0405               ldd    slplst+tsslnk get head of list  E53B ED   02                 std    tsslnk,x  set new link  E53D BF   0405               stx    slplst+tsslnk set new head  E540 17   FF74               lbsr   rsched    reschedule cpu                       E543 BE   0407     20        ldx    utask     get task entry  E546 6D   08                 tst    tssgnl,x  any signals waiting?  E548 26   02                 bne    sleep7                     *  E54A 35   D1                 puls   cc,x,u,pc return                     *  E54C BE   0407     sleep7    ldx    utask     reset signal  E54F 6F   08                 clr    tssgnl,x  E551 EC   88 15              ldd    umark1,x  stack reset point  E554 35   51                 puls   cc,x,u    reset cc and registers  E556 1F   04                 tfr    d,s       change stacks  E558 39                      rts              returnFIO Simulation Structure             09:03:49  Dec 17, 2024   Page   51Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E559 34   76       xmtint    pshs   d,x,y,u   save registers  E55B A6   04                 lda    tsstat,x  get task state  E55D 81   01                 cmpa   #TRUN     running?  E55F 26   06                 bne    10f       no - try something else                     *  E561 86   01                 lda    #1        set signal  E563 A7   08                 sta    tssgnl,x  E565 20   0E                 bra    99f       exit                     *  E567 81   02       10        cmpa   #TSLEEP   task sleeping?  E569 26   0A                 bne    99f       no - can't send interrupt                     *  E56B 86   01                 lda    #1        set signal  E56D A7   08                 sta    tssgnl,x  E56F 10AE 06                 ldy    tsevnt,x  wake task up >E572 17   FF8B               lbsr   wakeup                     *  E575 35   F6       99        puls   d,x,y,u,pc returnFIO Simulation Structure             09:03:49  Dec 17, 2024   Page   52Sleep      and Wakeup routines                                                                *                     * the routines in this file are specific                     * for the W5500 socket device                     * they are called from "wskhan" and "wskdrv" files                     *                     * wzsocket device table                     *  E577               DEV_SOCK  E577 E3AB                    fdb    bad_cmd   0  E579 E679                    fdb    skopen    S_OPEN    1 open socket  E57B E71E                    fdb    skclos    S_CLOSE   2 close socket  E57D E967                    fdb    skreqwr   S_RQWR    3 request write to socket  E57F E9BC                    fdb    sksend    S_SEND    4 write data to socket  E581 E8CC                    fdb    skreqrd   S_RQRD    5 request read data from socket  E583 E924                    fdb    skrecv    S_RECV    6 read data from socket  E585 E71E                    fdb    skintrp   S_INTRPT  7 interrupt socket  E587 E76B                    fdb    skconn    S_CONNECT 8 connect socket  E589 E7FE                    fdb    skbind    S_BIND    9 bind socket  E58B E84F                    fdb    sklist    S_LISTEN  10 listen on socket  E58D E88B                    fdb    skacpt    S_ACCEPT  11 accept connection  E58F ED38                    fdb    skdisc    S_DISCON  12 disconnect socket  E591 ED38                    fdb    sksmac    S_SNDMAC  13 send mac  E593 ED38                    fdb    skskep    S_SNDKEP  14 send keep alive  E595 EC74                    fdb    skspcl    S_SPCL    15 special command  E597 E9FE                    fdb    skurrdf   S_RRDFRM  16 request read readfrom  E599 EA83                    fdb    skurrd    S_RREAD   17 read data readfrom  E59B EAB1                    fdb    skurwt    S_WRQSTO  18 request write sendto  E59D EB3C                    fdb    skusnt    S_WSNDTO  19 write data sendto  E59F EAF5                    fdb    skusnm    S_WSNDTM  20 write data send more  E5A1 E5D7                    fdb    sknone    21  E5A3 E5D7                    fdb    sknone    22  E5A5 E5D7                    fdb    sknone    23  E5A7 EC0A                    fdb    sknbsr    S_RQSBLK  24 netblock req send ext block  E5A9 EC44                    fdb    sknbsd    S_SNDBLK  25 netblock send ext block  E5AB EB76                    fdb    sknbrr    S_RQRBLK  26 netblock req read ext block  E5AD EBDB                    fdb    sknbrd    S_RDRBLK  27 netblock read ext block  E5AF E5D7                    fdb    sknone    28  E5B1 E5D7                    fdb    sknone    29  E5B3 F427                    fdb    netboot   30 network boot  E5B5 F40F                    fdb    memp2ff   31 copy memory page to fifo                     *                     * check nwp_devtab.h !!                     *  E5B7 E631                    fdb    skinthan  16 socket interrupt handler  E5B9 E5BD                    fdb    skinit    17 socket initialization  E5BB E62E                    fdb    sktest    18 test device present                     *                     *                     * this file contains all socket handlers                     *                     * when a wzsocket is opened, all locations are effectivelyFIO Simulation Structure             09:03:49  Dec 17, 2024   Page   53wz socket interface routines                                             * cleared to zero, with exception of the enumeration byte                     *                                    0200  BUFSIZ    equ    512       fifo and system buffer size                                          *                     * do everything to init the system                     *               E5BD  skinit    equ    *  E5BD BD   ED3F               jsr    spinit    set SPI  E5C0 C6   82                 ldb    #%10000010 software reset + force ARP  E5C2 BD   EE10               jsr    PCRMR  E5C5 BD   EE01     01        jsr    GCRMR  E5C8 5D                      tstb  E5C9 2B   FA                 bmi    01b                     *  E5CB C6   78                 ldb    #%01111000 power up  E5CD BD   EFEE               jsr    PCRPHY    set the PHY part  E5D0 CC   8000               ldd    #32768  E5D3 FD   0457               std    wzanyp    set value for Source port  E5D6 39                      rts                                          *                     * sknone, return error, not implemented                     *  E5D7 C6   81       sknone    ldb    #E_BADCMD  E5D9 39                      rts                                          *                     * check if ROM locations are preset, if not skip this here                     * else setup device with provided values                     *  E5DA 108E E000     skdvini   ldy    #wzifma   where mac address is to be found  E5DE EC   A1       03        ldd    0,y++  E5E0 1083 FFFF               cmpd   #$ffff    not set  E5E4 26   07                 bne    02f  E5E6 108C E012               cmpy   #wzifga+4 past area  E5EA 25   F2                 blo    03b                     * ROM not initialized, do nothing  E5EC 39                      rts                                          *                     * values present, setup device                     *  E5ED 34   66       02        pshs   d,y,u  E5EF DE   1A                 ldu    fifo_us1  E5F1 108E E006               ldy    #wzifip   source IP  E5F5 EC   A1                 ldd    0,y++  E5F7 ED   C1                 std    0,u++  E5F9 EC   A1                 ldd    0,y++  E5FB ED   C1                 std    0,u++  E5FD 108E E00A               ldy    #wzifnm   netmaskFIO Simulation Structure             09:03:50  Dec 17, 2024   Page   54wz socket interface routines                          E601 EC   A1                 ldd    0,y++  E603 ED   C1                 std    0,u++  E605 EC   A1                 ldd    0,y++  E607 ED   C1                 std    0,u++  E609 108E E00E               ldy    #wzifga   gateway ip  E60D EC   A1                 ldd    0,y++  E60F ED   C1                 std    0,u++  E611 EC   A1                 ldd    0,y++  E613 ED   C1                 std    0,u++  E615 108E E000               ldy    #wzifma   mac address  E619 EC   A1                 ldd    0,y++  E61B ED   C1                 std    0,u++  E61D EC   A1                 ldd    0,y++  E61F ED   C1                 std    0,u++  E621 EC   A1                 ldd    0,y++  E623 ED   C1                 std    0,u++                     *  E625 C6   FF                 ldb    #$ff      set active  E627 E7   C4                 stb    0,u  E629 BD   ECA3               jsr    wzwdev    init device with settings  E62C 35   E6                 puls   d,y,u,pc                                          *                     * test if device is present                     *  E62E 1A   01       sktest    sec              yes  E630 39                      rts                                          *                     * skinthan, fromddevice table                     *               E631  skinthan  equ    *  E631 39                      rts                                          *                     * device signal handle, from master                     *               E632  sdev_sig  equ    *  E632 C6   07                 ldb    #R_INTRPT we saw it  E634 39                      rts                                          *                     * get a new source port                     *  E635 FC   0457     sknewp    ldd    wzanyp    else create one  E638                         incd  E638 104C                    fdb    $104c                               endm  E63A 1083 FFF0               cmpd   #$FFF0  E63E 25   03                 blo    03f  E640 CC   8000               ldd    #$8000  E643 FD   0457     03        std    wzanypFIO Simulation Structure             09:03:50  Dec 17, 2024   Page   55wz socket interface routines                          E646 39                      rts                                                               *                     * check if W5500 is active                     * wzdevt, device test, return Z if running, NZ if not                     *  E647 34   22       wzdevt    pshs   a,y  E649 109E 1A                 ldy    fifo_us1  device info  E64C A6   A8 12              lda    wzdsta,y  E64F 81   FF                 cmpa   #$ff      open  E651 35   A2                 puls   a,y,pc                                          *                     * skfres, socket restore info, set E register                     *  E653 A6   C4       skfres    lda    wzenum,u  socket #, is remembered  E655                         trfr   A,E  E655 1F                      fcb    $1f  E656 8E                      fcb    A<<4|E                               endm  E657 6F   47                 clr    wzerr,u   init result  E659 39                      rts                                          *                     * skctcp, check if in TCP mode                     * return zero if in TCP mode, non-zero if not                     * U = wzsock                     *  E65A 34   06       skctcp    pshs   d  E65C EC   C8 26              ldd    wztype,u  SOCK_STREAM  E65F C1   01                 cmpb   #SK_STRM  is TCP  E661 35   86                 puls   d,pc                                          *                     * skcudp, check if in UDP  mode                     * return zero if in UDP mode, non-zero if not                     * U = wzsock                     *  E663 34   06       skcudp    pshs   d  E665 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E668 C1   02                 cmpb   #SK_DGRM  is UDP  E66A 27   02                 beq    01f  E66C C1   04                 cmpb   #SK_IRAW  also allowed  E66E 35   86       01        puls   d,pc                                          *                     * skraw, check if in RAW mode                     * return zero if in RAW mode, non-zero if not                     * U = wzsock                     *  E670 34   06       skcraw    pshs   dFIO Simulation Structure             09:03:50  Dec 17, 2024   Page   56wz socket interface routines                          E672 EC   C8 26              ldd    wztype,u  SOCK_DGRAM  E675 C1   03                 cmpb   #SK_MRAW  is RAW socket  E677 35   86                 puls   d,pc                                          ****************************************************************                     *                     * here the socket is opened                     * X hold the TASK table                     * U holds the sock address                     *               E679  skopen    equ    * >E679 BD   E653               jsr    skfres                     *                     * check if DEVICE is active                     * >E67C BD   E647               jsr    wzdevt  E67F 27   06                 beq    11f  E681 BD   E739               jsr    skclin    NO, close internal and don't start >E684 16   0069     04        lbra   skoper1                     *                     * retry, we do all things                     *  E687 A6   42       11        lda    wzfsta,u  check if allocated by OS  E689 2A   F9                 bpl    04b       error, do nothing                     *                     * check socket() call arguments                     *  E68B 6F   43                 clr    wzflg,u   erase flags  E68D 6F   41                 clr    wzdctr,u  init counter  E68F EC   C8 24              ldd    wzfaml,u  E692 C1   02                 cmpb   #AF_INET  E694 26   EE                 bne    04b       not supported                     * wztype holds socket type AND socket flags (hibyte)  E696 EC   C8 26              ldd    wztype,u  E699 C1   01                 cmpb   #SK_STRM  SOCK_STREAM  E69B 27   22                 beq    01f  E69D C1   02                 cmpb   #SK_DGRM  SOCK_DGRAM  E69F 27   1A                 beq    21f                     *        cmpb    #SK_MRAW        SOCK_RAW                     *        beq     41f  E6A1 C1   04                 cmpb   #SK_IRAW  IP_RAW  E6A3 26   4F                 bne    skoper2                     *                     * raw IP socket, set protocol register first                     * UDP and TCP are handled in a different way                     *  E6A5 EC   C8 28              ldd    wzprot,u  what is the protocol option?  E6A8 C1   06                 cmpb   #SP_TCP   not allowed  E6AA 27   48                 beq    skoper2  E6AC C1   11                 cmpb   #SP_UDP   not allowed  E6AE 27   44                 beq    skoper2  E6B0 BD   F151               jsr    PSRPROT   set protocol registerFIO Simulation Structure             09:03:51  Dec 17, 2024   Page   57wz socket interface routines                                             *  E6B3 C6   03                 ldb    #%00000011 IPRAW  E6B5 20   0A                 bra    07f                     * nacraw  E6B7 C6   04       41        ldb    #%00000100 MACRAW  E6B9 20   06                 bra    07f                     * dgram  E6BB C6   02       21        ldb    #%00000010 UDP  E6BD 20   02                 bra    07f                     * TCP socket  E6BF C6   01       01        ldb    #%00000001 TCP set source port in connect                     *                     * set socket mode register                     *  E6C1 BD   F01B     07        jsr    PSRMR     set socket mode register                     *                     * here do the real OPEN,                     *  E6C4 C6   01                 ldb    #WCOPEN   open the device  E6C6 E7   44                 stb    wzcmnd,u  copy command  E6C8 BD   F039               jsr    PSRCR  E6CB 108E 0000               ldy    #0        nopoll                     *                     * interrupts not expected                     *               E6CF  skowfo    equ    * >E6CF BD   E653               jsr    skfres    reset important info  E6D2 BD   F06D     21        jsr    GSRSR     get status  E6D5 E7   45                 stb    wzstat,u  E6D7 C1   00                 cmpb   #WSCLSD   not closed?  E6D9 26   0B                 bne    22f                     *  E6DB 6A   41                 dec    wzdctr,u  delay counter  E6DD 27   15                 beq    skoper2  E6DF 108E E6CF               ldy    #skowfo  E6E3 7E   E7DC               jmp    polext    switch tasks                     *  E6E6 A6   42       22        lda    wzfsta,u  mark bind is needed  E6E8 8A   40                 ora    #WZWBND  E6EA A7   42                 sta    wzfsta,u  E6EC 4F                      clra  E6ED C6   01                 ldb    #R_OPEN   response  E6EF 39            99        rts                     *  E6F0 86   01       skoper1   lda    #1        device not initialized  E6F2 20   02                 bra    12f  E6F4 86   02       skoper2   lda    #2        type error  E6F6 C6   C0       12        ldb    #E_SOCKET  E6F8 20   F5                 bra    99b                                          *                     * convert number in bit positionFIO Simulation Structure             09:03:51  Dec 17, 2024   Page   58wz socket interface routines                                             * B = enum, B=bit                     *  E6FA 34   10       num2bt    pshs   x  E6FC 8E   E715               ldx    #bittab  E6FF 3A                      abx  E700 E6   84                 ldb    0,x  E702 35   90                 puls   x,pc                                          *                     * bit to nummer, offset byt one, entry should NOT be 0                     *  E704 34   10       bt2num    pshs   x  E706 8E   E715               ldx    #bittab  E709 6F   E2                 clr    0,-s  E70B E1   80       02        cmpb   0,x+  E70D 27   04                 beq    01f  E70F 6C   E4                 inc    0,s  E711 20   F8                 bra    02b  E713 35   94       01        puls   b,x,pc                                          * table  E715 00            bittab    fcb    0  E716 01 02 04 08             fcb    %00000001,%00000010,%00000100,%00001000  E71A 10 20 40 80             fcb    %00010000,%00100000,%01000000,%10000000                                                               ***************************************************************                     *                     * close the socket                     * X hold the task table                     * U holds the sock address                     *               E71E  skclos    equ    *               E71E  skintrp   equ    *         interrupt!  E71E BD   E653               jsr    skfres  E721 C6   08                 ldb    #WCDISC  E723 E7   44                 stb    wzcmnd,u  E725 BD   F039               jsr    PSRCR     send disconnect                     *  E728 8D   0F                 bsr    skclin    internal close  E72A                         clrd  E72A 104F                    fdb    $104f                               endm  E72C ED   C8 24              std    wzfaml,u  E72F ED   C8 26              std    wztype,u  E732 ED   C8 28              std    wzprot,u                     *  E735 4F                      clra  E736 C6   02                 ldb    #R_CLOSE  response  E738 39                      rts                                          *FIO Simulation Structure             09:03:51  Dec 17, 2024   Page   59wz socket interface routines                                             * wzclin, close interal                     *  E739 34   06       skclin    pshs   d  E73B C6   10                 ldb    #WCCLOS   do close  E73D E7   44                 stb    wzcmnd,u  E73F BD   F039               jsr    PSRCR                     *                     * erase registers in device                     *  E742 CC   0000               ldd    #0  E745 BD   F08B               jsr    PSRPORT   source port                     *  E748 A6   42                 lda    wzfsta,u  E74A 84   00                 anda   #0        mask (?)  E74C A7   42                 sta    wzfsta,u  E74E CC   0000               ldd    #0  E751 ED   48                 std    wzxfer,u  clear remaining size                     *  E753 BD   F06D     91        jsr    GSRSR  E756 E7   45                 stb    wzstat,u  stat = 0 (closed)                     *  E758 CC   0000               ldd    #0  E75B ED   C8 10              std    wzsprt,u  erase old info  E75E ED   C8 14              std    wzipad,u  E761 ED   C8 16              std    wzipad+2,u  E764 ED   C8 12              std    wzdprt,u  E767 E7   43                 stb    wzflg,u   clear flags                     *  E769 35   86                 puls   d,pc                                          ***************************************************************                     *                     * connect socket                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E76B  skconn    equ    *  E76B BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E76E BD   E647               jsr    wzdevt  E771 27   06                 beq    01f >E773 BD   E71E               jsr    skclos    NO, don't start >E776 16   0077     02        lbra   skcner4  E779 BD   E65A     01        jsr    skctcp    not in tcp, illegal  E77C 26   F8                 bne    02b                     *                     * check if socket has been set up                     *  E77E BD   F06D     11        jsr    GSRSR     statusFIO Simulation Structure             09:03:52  Dec 17, 2024   Page   60wz socket interface routines                          E781 E7   45                 stb    wzstat,u  check if properly setup  E783 C1   13                 cmpb   #WSINIT   SHOULD BE >E785 1026 005F               lbne   skcner6                     *                     * check the info from the connect call                     *  E789 EC   C8 14              ldd    wzipad,u  check if dest IP == null  E78C                         ordx   wzipad+2,IU  E78C 10AA                    fdb    $10aa  E78E                         doindx wzipad+2,IU  E78E C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm  E790 27   62                 beq    skcner1   IP address == NULL                     * IP address = 0000  E792 EC   C8 14              ldd    wzipad,u  or FFFFFFFF  E795                         incd  E795 104C                    fdb    $104c                               endm  E797 26   07                 bne    01f  E799 EC   C8 16              ldd    wzipad+2,u  E79C                         incd  E79C 104C                    fdb    $104c                               endm  E79E 27   54                 beq    skcner1   IP address = FFFFFFFF                     *                     * valid IP                     *  E7A0 EC   C8 12    01        ldd    wzdprt,u  check destination port  E7A3 27   47                 beq    skcner5   is not set, error                     *  E7A5 BD   F115               jsr    PSRDPOR   set destination port  E7A8 31   C8 14              leay   wzipad,u  load socket  E7AB BD   F0EF               jsr    PSRDIP    set destination IP                     *                     * source port, create one, always unique                     *  E7AE BD   E635               jsr    sknewp    get new  E7B1 ED   C8 10              std    wzsprt,u  tell us what you took  E7B4 BD   F08B               jsr    PSRPORT   source port                     *                     * do the CONNECT here                     *  E7B7 C6   04                 ldb    #WCCONN  E7B9 E7   44                 stb    wzcmnd,u  E7BB BD   F039               jsr    PSRCR     do connect                     *                     *                     *  E7BE BD   E653     conlb1    jsr    skfres  E7C1 BD   F06D               jsr    GSRSR     update status  E7C4 E7   45                 stb    wzstat,uFIO Simulation Structure             09:03:52  Dec 17, 2024   Page   61wz socket interface routines                          E7C6 C1   17                 cmpb   #WSESTB  E7C8 27   0E                 beq    90f  E7CA C1   00                 cmpb   #WSCLSD   is closed?  E7CC 27   16                 beq    skcner2  E7CE C1   1C                 cmpb   #WSCLWT   close wait?  E7D0 27   12                 beq    skcner2  E7D2 108E E7BE               ldy    #conlb1  E7D6 20   04                 bra    polext                     *  E7D8 4F            90        clra  E7D9 C6   08                 ldb    #R_CONNECT  E7DB 39            99        rts                                          *                     * polexit, Y=where to return                     *  E7DC 10AF 0F       polext    sty    tsagin,x  here to restart  E7DF 108E FFFF               ldy    #$ffFF  E7E3 39                      rts                       E7E4 C6   0C       skcner2   ldb    #R_DISCON  E7E6 20   F3                 bra    99b                       E7E8               skcner6  E7E8 86   0F                 lda    #15       not properly setup  E7EA 20   0E                 bra    09f  E7EC 86   0E       skcner5   lda    #14       destination port not set  E7EE 20   0A                 bra    09f  E7F0 86   0A       skcner4   lda    #10       device not initialized  E7F2 20   06                 bra    09f  E7F4 86   0B       skcner1   lda    #11       IP address invalid  E7F6 20   02                 bra    09f  E7F8 86   0D       skcner3   lda    #13  E7FA C6   C0       09        ldb    #E_SOCKET  E7FC 20   DD                 bra    99b                                          ***************************************************************                     *                     * bind request                     * X hold the task table                     * U holds the sock address                     * bindt() call fills in info in the sock structure                     *               E7FE  skbind    equ    *  E7FE BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E801 BD   E647               jsr    wzdevt  E804 1026 0117               lbne   rdrqer1  E808 BD   E65A               jsr    skctcp    check TCP  E80B 27   07                 beq    01fFIO Simulation Structure             09:03:52  Dec 17, 2024   Page   62wz socket interface routines                          E80D BD   E663               jsr    skcudp    check UDP >E810 1026 FFD4               lbne   skcner6  E814               01                     *                     * go on , the bind() call sets wzipad and wzsprt, this is for                     * a server, for a client it needs to set wzdprt                     * for as server IP is local, for a client IP is remote                     *                     *  E814 BD   F06D               jsr    GSRSR     status  E817 E7   45                 stb    wzstat,u  E819 C1   22                 cmpb   #WSUDP    check  E81B 27   25                 beq    03f  E81D C1   13                 cmpb   #WSINIT   should be >E81F 1026 FFC5     04        lbne   skcner6                     *                     * set the network connection data                     *  E823 BD   E635               jsr    sknewp  E826 ED   C8 12              std    wzdprt,u  E829 BD   F115               jsr    PSRDPOR   destination port  E82C EC   C8 10              ldd    wzsprt,u  E82F BD   F08B     04        jsr    PSRPORT   source port                     *  E832 31   C8 14              leay   wzipad,u  E835 BD   F0EF               jsr    PSRDIP    source IP                     *  E838 A6   42                 lda    wzfsta,u  we did BIND  E83A 84   BF                 anda   #255-WZWBND  E83C A7   42                 sta    wzfsta,u  E83E 4F                      clra  E83F C6   09                 ldb    #R_BIND  E841 39                      rts                     *  E842 EC   C8 10    03        ldd    wzsprt,u  if set, keep it  E845 26   E8                 bne    04b  E847 BD   E635               jsr    sknewp    make new  E84A ED   C8 10              std    wzsprt,u  E84D 20   E0                 bra    04b                                                               ***************************************************************                     *                     * listen request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E84F  sklist    equ    *  E84F BD   E653               jsr    skfres                     *                     * is the DEVICE (still) activeFIO Simulation Structure             09:03:53  Dec 17, 2024   Page   63wz socket interface routines                                             *  E852 BD   E647               jsr    wzdevt  E855 1026 00C6     02        lbne   rdrqer1  E859 BD   E65A               jsr    skctcp  E85C 26   F7                 bne    02b                     *                     * go on                     *                     *  E85E BD   F06D               jsr    GSRSR     status  E861 E7   45                 stb    wzstat,u                     *  E863 C1   00                 cmpb   #WSCLSD   closed?  E865 27   19                 beq    80f  E867 C1   1C                 cmpb   #WSCLWT   close wait?  E869 27   15                 beq    80f  E86B C1   13                 cmpb   #WSINIT   opened  E86D 26   15                 bne    90f                     *  E86F A6   42                 lda    wzfsta,u  did we BIND  E871 85   40                 bita   #WZWBND  E873 26   0B                 bne    80f       no, error                     *  E875 C6   02                 ldb    #WCLIST  E877 E7   44                 stb    wzcmnd,u  E879 BD   F039               jsr    PSRCR                     *  E87C 4F                      clra  E87D C6   0A                 ldb    #R_LISTEN  E87F 39                      rts                                          *  E880 4F            80        clra  E881 C6   02                 ldb    #R_CLOSE  E883 39                      rts                     *  E884 108E E84F     90        ldy    #sklist  E888 7E   E7DC               jmp    polext                                          ***************************************************************                     *                     * accept request                     * X hold the task table                     * U holds the sock address                     * listen() call waits for peer to connect                     *               E88B  skacpt    equ    *  E88B BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E88E BD   E647               jsr    wzdevtFIO Simulation Structure             09:03:53  Dec 17, 2024   Page   64wz socket interface routines                          E891 1026 008A     02        lbne   rdrqer1  E895 BD   E65A               jsr    skctcp  E898 26   F7                 bne    02b       wrong mode                     *                     * go on                     *  E89A BD   F06D               jsr    GSRSR     status  E89D E7   45                 stb    wzstat,u  E89F C1   17                 cmpb   #WSESTB   connected  E8A1 26   16                 bne    01f                     *  E8A3 A6   42                 lda    wzfsta,u  did we BIND  E8A5 85   40                 bita   #WZWBND  E8A7 26   19                 bne    03f       no, error                     *  E8A9 BD   F106               jsr    GSRDPOR   fill in peer port  E8AC ED   C8 12              std    wzdprt,u  E8AF 31   C8 14              leay   wzipad,u  E8B2 BD   F0D8               jsr    GSRDIP                     *  E8B5 4F                      clra  E8B6 C6   0B                 ldb    #R_ACCEPT  E8B8 39                      rts                     *  E8B9 C1   00       01        cmpb   #WSCLSD  E8BB 27   05                 beq    03f  E8BD C1   1C                 cmpb   #WSCLWT  E8BF 26   04                 bne    02f  E8C1 4F                      clra  E8C2 C6   02       03        ldb    #R_CLOSE  E8C4 39                      rts                     *  E8C5 108E E88B     02        ldy    #skacpt  E8C9 7E   E7DC               jmp    polext                                                               ***************************************************************                     *                     * read request  TCP only !!                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E8CC  skreqrd   equ    *  E8CC BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E8CF BD   E647               jsr    wzdevt >E8D2 1026 0049     02        lbne   rdrqer1  E8D6 BD   E65A               jsr    skctcp    check TCP  E8D9 26   F7                 bne    02bFIO Simulation Structure             09:03:53  Dec 17, 2024   Page   65wz socket interface routines                                             *                     * go on                     *  E8DB BD   F06D               jsr    GSRSR  E8DE E7   45                 stb    wzstat,u  update status  E8E0 C1   17                 cmpb   #WSESTB   connection active?  E8E2 26   0B                 bne    82f                     * check data available  E8E4 BD   F224               jsr    GSRRXRS   data available?  E8E7 ED   48                 std    wzxfer,u  E8E9 27   13                 beq    85f                     * data present  E8EB 4F            87        clra  E8EC C6   05                 ldb    #R_RQRD  E8EE 39                      rts                     * not established  E8EF E6   45       82        ldb    wzstat,u  E8F1 C1   00                 cmpb   #WSCLSD   closed?  E8F3 26   14                 bne    84f       (85f)241128                     * close socket and return  E8F5 C6   06       81        ldb    #PIPES  E8F7 BD   E445               jsr    send_SI   send to main CPU  E8FA 4F                      clra  E8FB C6   02                 ldb    #R_CLOSE  E8FD 39                      rts                     * established but no data yet || not established and not closed  E8FE EC   C8 26    85        ldd    wztype,u  check flags  E901 85   01                 bita   #WFNBLK   non block  E903 27   04                 beq    84f                     * non block ************************  E905 4F                      clra  E906 C6   15                 ldb    #R_RQRDNB tell no data  E908 39                      rts                     *  E909 E6   45       84        ldb    wzstat,u  E90B C1   1C                 cmpb   #WSCLWT   last attempt  E90D 26   09                 bne    86f       go poll                     * close wait active  E90F BD   F224               jsr    GSRRXRS  E912 ED   48                 std    wzxfer,u  E914 26   D5                 bne    87b       last data  E916 20   DD                 bra    81b       close                     *  E918 108E E8CC     86        ldy    #skreqrd  E91C 7E   E7DC               jmp    polext                                          *                     * error in socket status  E91F 86   82       rdrqer1   lda    #130  E921 C6   C0                 ldb    #E_SOCKET  E923 39                      rts                     FIO Simulation Structure             09:03:54  Dec 17, 2024   Page   66wz socket interface routines                                             ***************************************************************                     *                     * get the data  U=wzsock, X=task struct                     *               E924  skrecv    equ    *  E924 BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E927 BD   E647               jsr    wzdevt >E92A 1026 FFF1               lbne   rdrqer1  E92E BD   E65A     02        jsr    skctcp  E931 26   FB                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E933 BD   F224               jsr    GSRRXRS   received size                     * D total aviable data  E936 108E 0020               ldy    #fifo     target  E93A BD   F2F4               jsr    RDSK2FB   transfer datat to fifo  E93D ED   48                 std    wzxfer,u  save it                     *                     * here check if PROT_XLTEOF is set                     *  E93F 6D   C8 28              tst    wzprot,u  PROT_XLTEOL is $8000  E942 2A   18                 bpl    01f                     *                     * do EOL conversion in fifo buffer                     *  E944 34   36                 pshs   d,x,y  E946 1F   01                 tfr    d,x       count  E948 108E 0020               ldy    #fifo  E94C A6   A4       03        lda    0,y  E94E 81   0A                 cmpa   #LF       is line feed  E950 26   02                 bne    02f  E952 86   0D                 lda    #CR       make it Return  E954 A7   A0       02        sta    0,y+  E956 30   1F                 leax   -1,x      count  E958 26   F2                 bne    03b  E95A 35   36                 puls   d,x,y                     *                     *                     *  E95C C6   40       01        ldb    #WCRECV  E95E E7   44                 stb    wzcmnd,u  E960 BD   F039               jsr    PSRCR     tell sender we took it                       E963 C6   06                 ldb    #R_READ   tell data in fifo  E965 4F                      clra  E966 39                      rtsFIO Simulation Structure             09:03:54  Dec 17, 2024   Page   67wz socket interface routines                                                                  ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E967  skreqwr   equ    *  E967 BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E96A BD   E647               jsr    wzdevt >E96D 1026 FFAE     02        lbne   rdrqer1  E971 BD   E65A               jsr    skctcp  E974 26   F7                 bne    02b                     *                     * go on                     *  E976 BD   F06D               jsr    GSRSR  E979 E7   45                 stb    wzstat,u  update status  E97B C1   17                 cmpb   #WSESTB  E97D 26   0C                 bne    82f                     * connection active  E97F BD   F1D8     83        jsr    GSRTXFR   free size (remaining)  E982 10A3 4A                 cmpd   wzrqln,u  would it fit  E985 25   13                 blo    85f                     * data space is enough  E987 4F            88        clra  E988 C6   03                 ldb    #R_RQWR  E98A 39                      rts                     * not established  E98B E6   45       82        ldb    wzstat,u  E98D C1   00                 cmpb   #WSCLSD  E98F 26   09                 bne    85f                     * close socket and return  E991 C6   06       89        ldb    #PIPES  E993 BD   E445               jsr    send_SI   send to main CPU  E996 4F                      clra  E997 C6   02                 ldb    #R_CLOSE  E999 39                      rts                     *  E99A EC   C8 26    85        ldd    wztype,u  E99D 85   01                 bita   #WFNBLK  E99F 27   04                 beq    86f                     * data space exhausted, would block  E9A1 4F                      clra  E9A2 C6   13                 ldb    #R_RQWRNB  E9A4 39                      rts                     * not closed  E9A5 E6   45       86        ldb    wzstat,uFIO Simulation Structure             09:03:54  Dec 17, 2024   Page   68wz socket interface routines                          E9A7 C1   1C                 cmpb   #WSCLWT   try data  E9A9 26   0A                 bne    87f                     *  E9AB BD   F1D8               jsr    GSRTXFR   free size (remaining)  E9AE 10A3 4A                 cmpd   wzrqln,u  would it fit  E9B1 24   D4                 bhs    88b  E9B3 20   DC                 bra    89b                     *  E9B5 108E E967     87        ldy    #skreqwr  E9B9 7E   E7DC               jmp    polext                                          ***************************************************************                     *                     * write request                     * X hold the task table                     * U holds the sock address                     * connect() call fills in info in the sock structure                     *               E9BC  sksend    equ    *  E9BC BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  E9BF BD   E647               jsr    wzdevt  E9C2 1026 FF59     02        lbne   rdrqer1  E9C6 BD   E65A               jsr    skctcp  E9C9 26   F7                 bne    02b                     *                     * we got info that data is present, get it                     * if here the main CPU already locked the fifo for us                     * on return D= xfreed count                     *  E9CB EC   4A                 ldd    wzrqln,u  data to xfer                     * D = total available space  E9CD 6D   C8 28              tst    wzprot,u  check if PROT_XLTEOL is set  E9D0 2A   18                 bpl    01f                     *                     *  do EOL conversion in fifo buffer                     *  E9D2 34   36                 pshs   d,x,y  E9D4 1F   01                 tfr    d,x       count  E9D6 108E 0020               ldy    #fifo  E9DA A6   A4       03        lda    0,y  E9DC 81   0D                 cmpa   #CR       Return?  E9DE 26   02                 bne    02f  E9E0 86   0A                 lda    #LF       make it Line feed  E9E2 A7   A0       02        sta    0,y+  E9E4 30   1F                 leax   -1,x      count  E9E6 26   F2                 bne    03b  E9E8 35   36                 puls   d,x,y                     *                     *FIO Simulation Structure             09:03:55  Dec 17, 2024   Page   69wz socket interface routines                                             *  E9EA 108E 0020     01        ldy    #fifo     target  E9EE BD   F342               jsr    WRFB2SK   transfer from fifo to socket  E9F1 ED   48                 std    wzxfer,u  save it  E9F3 C6   20                 ldb    #WCSEND  E9F5 E7   44                 stb    wzcmnd,u  E9F7 BD   F039               jsr    PSRCR     tell sender it is coming                       E9FA C6   04                 ldb    #R_WRITE  tell data in fifo  E9FC 4F                      clra  E9FD 39                      rts                                          ***************************************************************                     * skurrdf, request readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *                     * UDP type transfers have diffent W5500 buffer layouts for receive                     *                     * pure UDP  (WSUDP) returns                     *                     *  [sender-IP][sender-Port][data-len][data.............]                     *                     * IPRAW (WSIRAW) returns                     *                     *  [senser-IP][data-len][data.................]                     *                     *               E9FE  skurrdf   equ    *  E9FE BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA01 BD   E647               jsr    wzdevt  EA04 1026 FF17     02        lbne   rdrqer1  EA08 BD   E663               jsr    skcudp  EA0B 26   F7                 bne    02b                     *                     * no  packet data present, wait for it                     *  EA0D BD   F06D               jsr    GSRSR  EA10 E7   45                 stb    wzstat,u  update status  EA12 C1   22                 cmpb   #WSUDP  EA14 27   21                 beq    81f                     *  EA16 C1   32                 cmpb   #WSIRAW   W55 state  EA18 26   54                 bne    82f                     * IPRAW handling  EA1A EC   C8 20              ldd    wzurms,u  new data  EA1D 26   45                 bne    83f       noFIO Simulation Structure             09:03:55  Dec 17, 2024   Page   70wz socket interface routines                                             * yes, read data details  EA1F BD   F224               jsr    GSRRXRS   now full UDP size  EA22 ED   7E                 std    -2,s      test D  EA24 27   48                 beq    82f                     * read [sender-IP][data-len]  EA26 31   C8 1A              leay   wzuipa,u  EA29 CC   0006               ldd    #6  EA2C BD   ED97               jsr    bmread                     * read data size  EA2F EC   C8 1E              ldd    wzuprt,u  here lands size  EA32 ED   C8 20              std    wzurms,u  EA35 20   23                 bra    87f                     * pure UDP handling, check if BIND has been called before  EA37 A6   42       81        lda    wzfsta,u  EA39 85   40                 bita   #WZWBND   did we? BIND erases flag  EA3B 1026 00FA               lbne   skuer1    we need for datagram server                     *  EA3F EC   C8 20              ldd    wzurms,u  new data?  EA42 26   20                 bne    83f       no                     * check data available  EA44 BD   F224               jsr    GSRRXRS   data available?  EA47 ED   7E                 std    -2,s      test D  EA49 27   23                 beq    82f       keep waiting                     *                     * first data present, set [wzuipa(4), wzuprt(2), wzurms(2)]                     *                     * get header info from data  EA4B CC   0008               ldd    #8        size of header  EA4E 31   C8 1A              leay   wzuipa,u  read 8 bytes from socketbuffer  EA51 BD   ED97               jsr    bmread    copy data and update PSRRXRP!  EA54 EC   C8 1E              ldd    wzuprt,u  who sent it  EA57 ED   C8 12              std    wzdprt,u  EA5A C6   40       87        ldb    #WCRECV  EA5C E7   44                 stb    wzcmnd,u  process move pointer  EA5E BD   F039               jsr    PSRCR                     *                     * wzurms is fetched from socket buffer with bmread                     *  EA61 EC   C8 20    84        ldd    wzurms,u  EA64 1083 05C0     83        cmpd   #MAX_UDP  max size  EA68 22   16                 bhi    89f                     *  EA6A 4F                      clra  EA6B C6   21                 ldb    #R_RDFRM  tell caller  EA6D 39                      rts                                          * no data yet  EA6E EC   C8 26    82        ldd    wztype,u  check non-block  EA71 85   01                 bita   #WFNBLK  EA73 26   07                 bne    90f                     *  EA75 108E E9FE               ldy    #skurrdfFIO Simulation Structure             09:03:55  Dec 17, 2024   Page   71wz socket interface routines                          EA79 7E   E7DC               jmp    polext                     *  EA7C 4F            90        clra  EA7D C6   15                 ldb    #R_RQRDNB  EA7F 39                      rts                     *  EA80               89  EA80 C6   C0                 ldb    #E_SOCKET  EA82 39                      rts                                          ***************************************************************                     * skurrd,  data readfrom                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EA83  skurrd    equ    *  EA83 BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EA86 BD   E647               jsr    wzdevt  EA89 1026 FE92     02        lbne   rdrqer1  EA8D BD   E663               jsr    skcudp  EA90 26   F7                 bne    02b                     *                     * go on                     *                     *                     * transfer at most fio_fsz bytes  EA92 EC   C8 20              ldd    wzurms,u  this is leading count                     * D = total available data  EA95 108E 0020               ldy    #fifo     target  EA99 BD   F2F4               jsr    RDSK2FB   transfer data, update wzxfer  EA9C 34   06                 pshs   d         xferred count  EA9E EC   C8 20              ldd    wzurms,u  update  EAA1 A3   E1                 subd   0,s++  EAA3 ED   C8 20              std    wzurms,u  new remaining                     *  EAA6 C6   40       01        ldb    #WCRECV  EAA8 E7   44                 stb    wzcmnd,u  set processed pointer  EAAA BD   F039               jsr    PSRCR                     *  EAAD 4F                      clra  EAAE C6   22                 ldb    #R_RRDFD  EAB0 39                      rts                                          ***************************************************************                     * skurwt,  request sendto                     *                     *FIO Simulation Structure             09:03:56  Dec 17, 2024   Page   72wz socket interface routines                                             * X hold the task table                     * U holds the sock address                     *               EAB1  skurwt    equ    *  EAB1 BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EAB4 BD   E647               jsr    wzdevt  EAB7 1026 FE64     02        lbne   rdrqer1  EABB BD   E663               jsr    skcudp  EABE 26   F7                 bne    02b                     *                     * go on                     *  EAC0 EC   C8 14              ldd    wzipad,u  EAC3                         ordx   wzipad+2,IU  EAC3 10AA                    fdb    $10aa  EAC5                         doindx wzipad+2,IU  EAC5 C8 16                   fcb    $88+(IU<<5),(wzipad+2&$7f)                               endm                               endm >EAC7 1027 006E               lbeq   skuer1                     * set network registers  EACB 31   C8 14              leay   wzipad,u  EACE BD   F0EF               jsr    PSRDIP                     *  EAD1 EC   C8 12              ldd    wzdprt,u  check illegal port >EAD4 1027 0061               lbeq   skuer1                     *  EAD8 EC   C8 12              ldd    wzdprt,u  EADB BD   F115               jsr    PSRDPOR                     * for IPRAW set only destination IP and port  EADE E6   45                 ldb    wzstat,u  EAE0 C1   32                 cmpb   #WSIRAW  EAE2 27   11                 beq    skusnm    special                     *                     * regulare UDP, set source port if not yet assigned  EAE4 EC   C8 10              ldd    wzsprt,u  already set?  EAE7 26   09                 bne    16f  EAE9 BD   E635               jsr    sknewp    get new source port  EAEC ED   C8 10              std    wzsprt,u  EAEF ED   C8 1E              std    wzuprt,u  set also return port  EAF2 BD   F08B     16        jsr    PSRPORT                     *                     * wait for data to go out loop                     *               EAF5  skusnm    equ    *  EAF5 BD   E653     skuwr2    jsr    skfres    set socket base  EAF8 BD   E647               jsr    wzdevt    devie active >EAFB 1026 FFB8               lbne   02b       no  EAFF BD   E663               jsr    skcudp    check open methodFIO Simulation Structure             09:03:56  Dec 17, 2024   Page   73wz socket interface routines                          EB02 26   B3                 bne    02b                     *  EB04 BD   F06D               jsr    GSRSR  EB07 E7   45                 stb    wzstat,u  update status  EB09 C1   22                 cmpb   #WSUDP  EB0B 27   04                 beq    20f  EB0D C1   32                 cmpb   #WSIRAW   IPRAW  EB0F 26   28                 bne    skuer1  EB11 BD   F1D8     20        jsr    GSRTXFR   free size  EB14 10A3 C8 20              cmpd   wzurms,u  set by driver  EB18 24   12                 bhs    10f                     * no space yet                       EB1A EC   C8 26              ldd    wztype,u  EB1D 85   01                 bita   #WFNBLK  EB1F 26   07                 bne    21f                     *  EB21 108E EAF5               ldy    #skuwr2  EB25 7E   E7DC               jmp    polext    keep polling                     *  EB28 4F            21        clra  EB29 C6   13                 ldb    #R_RQWRNB non block write  EB2B 39                      rts                     *  EB2C EC   C8 20    10        ldd    wzurms,u  EB2F 1083 05C0               cmpd   #MAX_UDP  too big  EB33 22   04                 bhi    skuer1                     *  EB35 4F                      clra  EB36 C6   23                 ldb    #R_RSNDTO  EB38 39                      rts                       EB39               skuer1  EB39 C6   C0                 ldb    #E_SOCKET  EB3B 39                      rts                                                               ***************************************************************                     * skusnt,  data sendto                     *                     *                     * X hold the task table                     * U holds the sock address                     *               EB3C  skusnt    equ    *  EB3C BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EB3F BD   E647               jsr    wzdevt  EB42 1026 FDD9     02        lbne   rdrqer1  EB46 BD   E663               jsr    skcudpFIO Simulation Structure             09:03:56  Dec 17, 2024   Page   74wz socket interface routines                          EB49 26   F7                 bne    02b                     *                     * go on                     *                     * transfer fifo to socket data register  EB4B EC   C8 20              ldd    wzurms,u  total data                     *  EB4E 108E 0020               ldy    #fifo     target  EB52 BD   F342               jsr    WRFB2SK   fifo to socket  EB55 34   06                 pshs   d  EB57 EC   C8 20              ldd    wzurms,u  all loaded  EB5A A3   E1                 subd   0,s++  EB5C ED   C8 20              std    wzurms,u  EB5F 26   11                 bne    01f                       EB61 EC   C8 22              ldd    wzuwrp,u  is it used  EB64 BD   F215               jsr    PSRTXWP   set write pointer                       EB67 C6   20                 ldb    #WCSEND  EB69 E7   44                 stb    wzcmnd,u  EB6B BD   F039               jsr    PSRCR  EB6E 4F                      clra  EB6F C6   24                 ldb    #R_WSNDTO data taken  EB71 39                      rts                       EB72 4F            01        clra  EB73 C6   25                 ldb    #R_SNDTOM ask for more  EB75 39                      rts                                          ***************************************************************                     *                     * netblock, read block                     * the method is special, we need to send a request                     * over the net first (send) before new data can be returned                     * request sits at fido_us2/fifo_us3                     * X=task struct, U=wzsock                     *                     * requires exclusive and permanent access to fifo and                     * therefore a CPU09GPP/09NET combo where for this device                     * the socket drivers are not active                     *                     ***************************************************************                                    EB76  sknbrr    equ    *  EB76 BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EB79 BD   E647               jsr    wzdevt  EB7C 1026 FD9F     02        lbne   rdrqer1  EB80 BD   E65A               jsr    skctcp  EB83 26   F7                 bne    02bFIO Simulation Structure             09:03:57  Dec 17, 2024   Page   75wz socket interface routines                                             *                     *                     *  EB85 BD   F06D               jsr    GSRSR     get status  EB88 E7   45                 stb    wzstat,u  update sock  EB8A C1   17                 cmpb   #WSESTB   established  EB8C 26   46                 bne    sknbe1    error                     *  EB8E BD   F1D8               jsr    GSRTXFR   get free space  EB91 1083 0004               cmpd   #NBRQLN  EB95 25   37                 blo    sknbrp1   go poll                     *                     * read, send command info to server                     *  EB97 CC   0004               ldd    #NBRQLN   actual size of request  EB9A 108E 001C               ldy    #fifo_us2 where request is present  EB9E BD   F342               jsr    WRFB2SK  EBA1 C6   20                 ldb    #WCSEND   tell socket we put it  EBA3 E7   44                 stb    wzcmnd,u  EBA5 BD   F039               jsr    PSRCR                     *                     * read is 2 phase, receive response from server                     *  EBA8 BD   E653     sknbrp2   jsr    skfres    reset important info  EBAB BD   F224               jsr    GSRRXRS   check response  EBAE 34   06                 pshs   d  EBB0 EC   4A                 ldd    wzrqln,u  requested data  EBB2 C3   0004               addd   #NBRQLN  EBB5 10A3 E1                 cmpd   0,s++     allows for other data packet sizes  EBB8 23   1D                 bls    01f  EBBA BD   F06D               jsr    GSRSR  EBBD E7   45                 stb    wzstat,u  EBBF C1   17                 cmpb   #WSESTB   check socket state  EBC1 26   11                 bne    sknbe1  EBC3 C1   1C                 cmpb   #WSCLWT  EBC5 27   0D                 beq    sknbe1    bail out  EBC7 108E EBA8               ldy    #sknbrp2  wait until                     *                     * poll loop                     *  EBCB 7E   E7DC     02        jmp    polext                     *  EBCE 108E EB76     sknbrp1   ldy    #sknbrr  EBD2 20   F7                 bra    02b                     *  EBD4 C6   C0       sknbe1    ldb    #E_SOCKET  EBD6 39                      rts                     * we have data in socket  EBD7 C6   82       01        ldb    #R_RQRBLK  EBD9 4F                      clra  EBDA 39                      rts                     FIO Simulation Structure             09:03:57  Dec 17, 2024   Page   76wz socket interface routines                                             ***************************************************************                     * here data is moved from the socket to the fifo                     * write 4 bytes back to fifo_us2/fifo_us3                     ***************************************************************               EBDB  sknbrd    equ    *  EBDB BD   E653               jsr    skfres  EBDE BD   E647               jsr    wzdevt  EBE1 1026 FD3A     02        lbne   rdrqer1  EBE5 BD   E65A               jsr    skctcp  EBE8 26   F7                 bne    02b                     *                     * when we arrive here, the data has arrived                     *  EBEA EC   4A       01        ldd    wzrqln,u  request sets the buffer size  EBEC 34   06                 pshs   d  EBEE C3   0004               addd   #NBRQLN  EBF1 ED   4A                 std    wzrqln,u  fool RDSK2FB  EBF3 108E 001C               ldy    #fifo_us2 data contains cmd info  EBF7 BD   F2F4               jsr    RDSK2FB  EBFA C6   40                 ldb    #WCRECV   tell socket we took it  EBFC E7   44                 stb    wzcmnd,u  EBFE BD   F039               jsr    PSRCR                     * transfer only data part  EC01 35   06                 puls   d  EC03 ED   48                 std    wzxfer,u  EC05 ED   4A                 std    wzrqln,u                     *  EC07 C6   83                 ldb    #R_RDRBLK tell caller, data in fifo_us2 and fifo  EC09 39                      rts                                          ***************************************************************                     *                     * netblock, write block                     *                     ***************************************************************               EC0A  sknbsr    equ    *  EC0A BD   E653               jsr    skfres                     *                     * is the DEVICE (still) active                     *  EC0D BD   E647               jsr    wzdevt  EC10 1026 FD0B     02        lbne   rdrqer1  EC14 BD   E65A               jsr    skctcp  EC17 26   F7                 bne    02b                     *  EC19 BD   F06D               jsr    GSRSR     status  EC1C E7   45                 stb    wzstat,u  EC1E C1   17                 cmpb   #WSESTB   still there?  EC20 26   16                 bne    sknbe10                     *  EC22 BD   F1D8               jsr    GSRTXFR   get free space  EC25 34   06                 pshs   dFIO Simulation Structure             09:03:57  Dec 17, 2024   Page   77wz socket interface routines                          EC27 CC   0004               ldd    #NBRQLN  EC2A E3   4A                 addd   wzrqln,u  EC2C 10A3 E1                 cmpd   0,s++  EC2F 23   0F                 bls    70f                     *  EC31 108E EC0A               ldy    #sknbsr  EC35 7E   E7DC               jmp    polext                     *  EC38 CC   0000     sknbe10   ldd    #0  EC3B ED   48                 std    wzxfer,u  EC3D C6   C0                 ldb    #E_SOCKET  EC3F 39                      rts                       EC40 4F            70        clra  EC41 C6   80                 ldb    #R_RQSBLK  EC43 39                      rts                                          ***************************************************************                     *                     *                     ***************************************************************               EC44  sknbsd    equ    *  EC44 BD   E653               jsr    skfres  EC47 BD   E647               jsr    wzdevt  EC4A 1026 FCD1     02        lbne   rdrqer1  EC4E BD   E65A               jsr    skctcp  EC51 26   F7                 bne    02b                                          *                     * data to write, cnd +data                     *  EC53 EC   4A       70        ldd    wzrqln,u  EC55 34   06                 pshs   d  EC57 C3   0004               addd   #NBRQLN  EC5A ED   4A                 std    wzrqln,u  fool WFB2SK  EC5C 108E 001C               ldy    #fifo_us2 where cmd sits  EC60 BD   F342               jsr    WRFB2SK  EC63 C6   20                 ldb    #WCSEND   send it now  EC65 E7   44                 stb    wzcmnd,u  EC67 BD   F039               jsr    PSRCR  EC6A 35   06                 puls   d  EC6C ED   48                 std    wzxfer,u  make it correct  EC6E ED   4A                 std    wzrqln,u  EC70 4F                      clra  EC71 C6   81                 ldb    #R_SNDBLK tell host we did  EC73 39                      rts                                          ***************************************************************                     *                     * special function, tstval,x is indicator                     * X hold the task table                     * U holds the SPECIAL sock address (NO wz....  access!)FIO Simulation Structure             09:03:57  Dec 17, 2024   Page   78wz socket interface routines                                             *               EC74  skspcl    equ    *                     *  EC74 34   10                 pshs   x  EC76 E6   0C                 ldb    tstval,x  get index  EC78 C1   03                 cmpb   #MAXTBL  EC7A 22   18                 bhi    01f       illegal  EC7C 58                      aslb  EC7D 8E   EC9B               ldx    #functb  EC80 10AE 85                 ldy    b,x       get special function  EC83 27   0F                 beq    01f       not valid  EC85 35   10                 puls   x                     *  EC87 AD   A4                 jsr    0,y       do function  EC89 26   05                 bne    90f                     *  EC8B 4F                      clra  EC8C C6   0F                 ldb    #R_SPCL  EC8E 20   0A                 bra    99f                     *  EC90 86   A2       90        lda    #162  EC92 20   04                 bra    02f                     *  EC94 35   10       01        puls   x  EC96 86   A1                 lda    #161  EC98               02  EC98 C6   C0                 ldb    #E_SOCKET                     *  EC9A 39            99        rts                       EC9B ECA3          functb    fdb    wzwdev    write device settings  EC9D ECA3                    fdb    wzwdev  EC9F ECCD                    fdb    wzrdev    read device settings  ECA1 ECE9                    fdb    showrg               0003  MAXTBL    equ    ((*-functb)/2)-1                                          *                     * write W5500 basic device settings                     *                     * X hold the task table                     * U holds the special sock address                     *  ECA3               wzwdev  ECA3 C6   08                 ldb    #8  ECA5                         trfr   B,E  ECA5 1F                      fcb    $1f  ECA6 9E                      fcb    B<<4|E                               endm  ECA7 DE   1A                 ldu    fifo_us1  device info area  ECA9 31   C4                 leay   0,u       myip  ECAB BD   EED0               jsr    PCRSIP    source IP  ECAE 31   44                 leay   4,uFIO Simulation Structure             09:03:58  Dec 17, 2024   Page   79wz socket interface routines                          ECB0 BD   EE64               jsr    PCRSNM    subnet mask  ECB3 31   48                 leay   8,u  ECB5 BD   EE36               jsr    PCRGA     gateway IP  ECB8 31   4C                 leay   12,u  ECBA BD   EE9A               jsr    PCRSHA    hardware address                     *  ECBD A6   C8 12              lda    18,u      ON/OFF  ECC0 27   04                 beq    01f  ECC2 C6   F8                 ldb    #%11111000 all on  ECC4 20   02                 bra    02f  ECC6 C6   78       01        ldb    #%01111000 all off  ECC8 BD   EFEE     02        jsr    PCRPHY  ECCB 4F                      clra             no error return status  ECCC 39                      rts                                          *                     * read W5500 basic device settings                     *  ECCD               wzrdev  ECCD C6   08                 ldb    #8  ECCF                         trfr   B,E       select first socket  ECCF 1F                      fcb    $1f  ECD0 9E                      fcb    B<<4|E                               endm  ECD1 DE   1A                 ldu    fifo_us1  ECD3 31   C4                 leay   0,u       overwrite what was set  ECD5 BD   EEB9               jsr    GCRSIP  ECD8 31   44                 leay   4,u  ECDA BD   EE4D               jsr    GCRSNM  ECDD 31   48                 leay   8,u  ECDF BD   EE1F               jsr    GCRGA  ECE2 31   4C                 leay   12,u  ECE4 BD   EE7B               jsr    GCRSHA  ECE7 4F                      clra             no error return status  ECE8 39                      rts                                          *                     * debug service, read selected registers                     *  ECE9               showrg  ECE9 C6   08                 ldb    #8  ECEB                         trfr   B,E       select first socket  ECEB 1F                      fcb    $1f  ECEC 9E                      fcb    B<<4|E                               endm  ECED DE   1A                 ldu    fifo_us1  ECEF 33   C8 20              leau   32,u      skip network data area  ECF2 BD   F00C               jsr    GSRMR  ECF5 E7   C0                 stb    0,u+  ECF7 BD   F06D               jsr    GSRSR  ECFA E7   C0                 stb    0,u+  ECFC BD   F19C               jsr    GSRRBFSFIO Simulation Structure             09:03:58  Dec 17, 2024   Page   80wz socket interface routines                          ECFF E7   C0                 stb    0,u+                       ED01 C6   3D                 ldb    #'=  ED03 E7   C0                 stb    0,u+                       ED05 31   C4                 leay   0,u  ED07 BD   EEB9               jsr    GCRSIP  ED0A 33   44                 leau   4,u  ED0C 31   C4                 leay   0,u  ED0E BD   EE1F               jsr    GCRGA  ED11 33   44                 leau   4,u                       ED13 C6   23                 ldb    #'#  ED15 E7   C0                 stb    0,u+                       ED17 31   C4                 leay   0,u  ED19 BD   EE7B               jsr    GCRSHA  ED1C 33   46                 leau   6,u                       ED1E C6   23                 ldb    #'#  ED20 E7   C0                 stb    0,u+                       ED22 31   C4                 leay   0,u  ED24 BD   EE4D               jsr    GCRSNM  ED27 33   44                 leau   4,u                       ED29 C6   3D                 ldb    #'=  ED2B E7   C0                 stb    0,u+                       ED2D BD   EFFD               jsr    GCRVERS  ED30 ED   C1                 std    0,u++                       ED32 C6   23                 ldb    #'#  ED34 E7   C4                 stb    0,u  ED36 4F                      clra                       ED37 39                      rts                                                               * X hold the task table                     * U holds the sock address                     *   skintrp  ED38               skdisc  ED38               sksmac  ED38               skskep  ED38 86   FF                 lda    #255  ED3A A7   47                 sta    wzerr,u  ED3C C6   C0                 ldb    #E_SOCKET                                            ED3E 39                      rts                     FIO Simulation Structure             09:03:58  Dec 17, 2024   Page   81wzspi, basic spi routines                                          ED3F  oldorg    set    *                     *                     * hardware register orgaization                     *               8080  SPIBASE   equ    $8080     hardware base address                       0000                         org    0                     *  0000               spicmd    rmb    1         HW control register               0000  spista    equ    spicmd    HW status register  0001               spicon    rmb    1         [W]   HW aux control register  0002                         rmb    2         dummy not used                     * shift register access  0004               hibyta    rmb    1         [R/W] hibyte auto 8 clock pulses for SR  0005               lobyta    rmb    1         [R/W] lobyte auto 8 clock pulses for SR  0006               hibyts    rmb    1         [R/W] hibyte static (no clock)  0007               lobyts    rmb    1         [R/W] lobyte static (no clock)                     *               0080  QFF1      equ    %10000000 [R]                          X               0040  SPI_CS_   equ    %01000000 [R/W] spi chip CS_           1               0020  SPI_RST   equ    %00100000 [R/W] spi chip RST_          1               0010  SPI_IEN   equ    %00010000 [R/W] spi chip INT enabled   0               0008  SPI_AUT   equ    %00001000 [R/W] auto advance           0               0004  SPI_SR_   equ    %00000100 [R/W] shift register MR_     1               0002  SPI_HLD   equ    %00000010 [R/W] HOLD                   0               0001  SPI_CR_   equ    %00000001 [W]   HC163 MR_              1               0001  SPI_IRQ   equ    %00000001 [R]   /IRQ bit               1                     *               0003  RSVREG    equ    %00000011 reserved register address                       ED3F                         org    oldorg                                          *                     * spinit, init the SPI hardware                     *               ED3F  spinit    equ    *  ED3F 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_ set idle  ED41 B7   8080               sta    SPIBASE+spicmd  ED44 39                      rts                                          *                     * setup inital port for SPI access                     *                     * A,B are lost A=rwflag, F=register, X=offset                     * F=corrected register bits [7...3]                     * A= R/W flag 1=write/ 0= read                     * X,Y untouched                     *               ED45  spistr2   equ    *  ED45 CE   8080               ldu    #SPIBASE  SPI base TODO  ED48                         trfr   F,B  ED48 1F                      fcb    $1fFIO Simulation Structure             09:03:59  Dec 17, 2024   Page   82wzspi, basic spi routines                             ED49 F9                      fcb    F<<4|B                               endm  ED4A 5D                      tstb             register pointer  ED4B 27   09                 beq    01f       OK, valid  ED4D 34   04                 pshs   b  ED4F C4   03                 andb   #RSVREG   reserved loctation  ED51 5D                      tstb             xxx10xxx  is invalid!  ED52 35   04                 puls   b  ED54 27   1A                 beq    09f       invalid access                     * adjust READ/WRITE bit  ED56 4D            01        tsta             cmd flag  ED57 27   04                 beq    04f  ED59 1A   01                 sec              write   100  ED5B 20   02                 bra    05f  ED5D 1C   FE       04        clc              read    000                     *  ED5F 59            05        rolb             set READ/WRITE bit  [2...0]  ED60 58                      lslb             set variable length data [00]  ED61 58                      lslb                     *                     * here the actual SPI action starts                     *  ED62                         seti   disable   interrupts  ED62 1A   50                 orcc   #FF|IF                               endm  ED64 12                      nop                     *       lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT+SPI_IEN low  ED65 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT low  ED67 A7   C4                 sta    spicmd,u  ED69 AF   44                 stx    hibyta,u  and shift out  ED6B E7   44                 stb    hibyta,u  and shift out  ED6D 1A   04                 sez  ED6F 39                      rts  ED70 1C   FB       09        clz  ED72 39                      rts                                          *                     * X = offset, unchanged                     * F = register#                     * read BYTE from SPI                     * return B=value, D,X,Y,U preserved                     *               ED73  byterd    equ    *  ED73 34   47                 pshs   cc,d,u  ED75 4F                      clra  ED76 8D   CD                 bsr    spistr2 >ED78 1026 007F               lbne   09f  ED7C E6   44                 ldb    hibyta,u  extra clocks for first data                     *  ED7E E6   45                 ldb    lobyta,u  read byte  ED80 4F                      clra  ED81 ED   61                 std    1,sFIO Simulation Structure             09:03:59  Dec 17, 2024   Page   83wzspi, basic spi routines                             ED83 20   6A                 bra    sprend                                          *                     * X = offset                     * F = register#                     * read WORD from SPI                     * return D=value,  D,X,Y,U preserved                     *               ED85  wordrd    equ    *  ED85 34   47                 pshs   cc,d,u  ED87 4F                      clra >ED88 BD   ED45               jsr    spistr2  ED8B 26   6E                 bne    09f  ED8D E6   44                 ldb    hibyta,u  extra clocks for first data                     *  ED8F A6   45                 lda    lobyta,u  read byte  ED91 E6   45                 ldb    lobyta,u  read byte  ED93 ED   61                 std    1,s  ED95 20   58                 bra    sprend                                          *                     * bmread, spi to memory read xfer                     * Y=mem pointer, D=count (bytes)                     * F = register#                     * read bytes from SPI into memory location                     * return D,X,Y,U preserved                     *               ED97  bmread    equ    *  ED97 34   77                 pshs   cc,d,x,y,u  ED99                         pshsw  save      E:F  ED99 1038                    fdb    $1038                               endm  ED9B BD   F23B               jsr    GSRRXRP   'read' pointer  ED9E 1F   01                 tfr    d,x       keep  EDA0 CE   8080               ldu    #SPIBASE  EDA3 34   40                 pshs   u         remember  EDA5 1A   50                 orcc   #$50  EDA7 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT  EDA9 A7   C4                 sta    spicmd,u  start SPI  EDAB AF   44                 stx    hibyta,u  start address  EDAD BD   F2E5               jsr    tsk2rx    E => B  EDB0 E7   44                 stb    hibyta,u  socket register  EDB2 EC   65                 ldd    5,s       old D  EDB4                         trfr   D,W       transaction count  EDB4 1F                      fcb    $1f  EDB5 06                      fcb    D<<4|W                               endm  EDB6 E7   44                 stb    hibyta,u  dummy, shift out  EDB8 10AE 69                 ldy    9,s       old Y, mem pointer  EDBB 33   45                 leau   lobyta,u  point to data register  EDBD                         tfm4   U,Y       U => Y++  EDBD 113B                    fdb    $113bFIO Simulation Structure             09:03:59  Dec 17, 2024   Page   84wzspi, basic spi routines                             EDBF 32                      fcb    U<<4|Y                               endm  EDC0 35   40                 puls   u         restore SPIBASE  EDC2 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  EDC4 A7   C4                 sta    spicmd,u  end SPI                     * X = old read pointer, 0,s byte wount  EDC6 1F   10                 tfr    x,d       start pointer  EDC8 E3   63                 addd   3,s       move pointer with # bytes  EDCA                         pulsw  restore   E:F  EDCA 1039                    fdb    $1039                               endm  EDCC BD   F24A               jsr    PSRRXRP   update pointer  EDCF 35   F7                 puls   cc,d,x,y,u,pc                                          *                     * X = offset                     * F = register#                     * write BYTE to SPI, D,X,Y,U preserved                     *               EDD1  bytewr    equ    *  EDD1 34   47                 pshs   cc,d,u  EDD3 86   01                 lda    #1  EDD5 BD   ED45               jsr    spistr2  EDD8 26   21                 bne    09f                     *  EDDA A6   62                 lda    2,s  EDDC A7   44                 sta    hibyta,u  EDDE 20   0F                 bra    sprend                                          *                     * X = offset                     * F = register#                     * write WORD to SPI, D,X,Y,U preserved                     *               EDE0  wordwr    equ    *  EDE0 34   47                 pshs   cc,d,u  EDE2 86   01                 lda    #1  EDE4 BD   ED45               jsr    spistr2  EDE7 26   12                 bne    09f                     *  EDE9 EC   61                 ldd    1,s  EDEB A7   44                 sta    hibyta,u  EDED E7   44                 stb    hibyta,u                     *                     * common exit from SPI action                     *  EDEF 86   65       sprend    lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_                     *sprend  lda     #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_+SPI_IEN  EDF1 A7   C4                 sta    spicmd,u  EDF3 A6   E4                 lda    0,s       sez  EDF5 8A   04                 ora    #4  EDF7 A7   E4       02        sta    0,sFIO Simulation Structure             09:04:00  Dec 17, 2024   Page   85wzspi, basic spi routines                             EDF9 35   C7                 puls   cc,d,u,pc                     *  EDFB A6   E4       09        lda    0,s       clz  EDFD 84   FB                 anda   #255-4  EDFF 20   F6                 bra    02b                     FIO Simulation Structure             09:04:00  Dec 17, 2024   Page   86wzspi, basic spi routines                                                                     * register names and offset               0000  WZMR      equ    0               0001  WZGAR0    equ    1               0002  WZGAR1    equ    2               0003  WZGAR2    equ    3               0004  WZGAR3    equ    4               0005  WZSUBR0   equ    5               0006  WZSUBR1   equ    6               0007  WZSUBR2   equ    7               0008  WZSUBR3   equ    8               0009  WZSHAR0   equ    9               000A  WZSHAR1   equ    10               000B  WZSHAR2   equ    11               000C  WZSHAR3   equ    12               000D  WZSHAR4   equ    13               000E  WZSHAR5   equ    14               000F  WZSIPR0   equ    15               0010  WZSIPR1   equ    16               0011  WZSIPR2   equ    17               0012  WZSIPR3   equ    18               0013  WZILLT0   equ    19               0014  WZILLT1   equ    20               0015  WZIR      equ    21               0016  WZIMR     equ    22               0017  WZSIR     equ    23               0018  WZSIMR    equ    24               0019  WZRTR0    equ    25               001A  WZRTR1    equ    26               001B  WZRCR     equ    27               0028  WZUIPR0   equ    40               0029  WZUIPR1   equ    41               002A  WZUIPR2   equ    42               002B  WZUIPR3   equ    43               002C  WZUPRT0   equ    44               002D  WZUPRT1   equ    45               002E  WZPHY     equ    46               0039  WZVERS    equ    57                                          *                     * all commands to access common register set                     *                                          *                     * GCRMR, get byte from common registers mode register                     * return byte in B                     *  EE01 34   56       GCRMR     pshs   d,x,u  EE03 5F                      clrb  EE04                         trfr   B,F  EE04 1F                      fcb    $1f  EE05 9F                      fcb    B<<4|FFIO Simulation Structure             09:04:00  Dec 17, 2024   Page   87wzspi, basic spi routines                                                          endm  EE06 8E   0000               ldx    #WZMR  EE09 BD   ED73               jsr    byterd  EE0C ED   E4                 std    0,s  EE0E 35   D6                 puls   d,x,u,pc                                          *                     * PCRMR, put byte B into common registers mode register                     *  EE10 34   16       PCRMR     pshs   d,x  EE12 5F                      clrb  EE13                         trfr   B,F  EE13 1F                      fcb    $1f  EE14 9F                      fcb    B<<4|F                               endm  EE15 8E   0000               ldx    #WZMR  EE18 EC   E4                 ldd    0,s >EE1A BD   EDD1               jsr    bytewr  EE1D 35   96                 puls   d,x,pc                                          *                     * GCRGA, get gateway address from common regsiters                     * Y=destination address (4 bytes)                     *  EE1F 34   16       GCRGA     pshs   d,x  EE21 5F                      clrb  EE22                         trfr   B,F  EE22 1F                      fcb    $1f  EE23 9F                      fcb    B<<4|F                               endm  EE24 8E   0001               ldx    #WZGAR0  EE27 BD   ED85               jsr    wordrd  EE2A ED   A4                 std    0,y  EE2C 8E   0003               ldx    #WZGAR2  EE2F BD   ED85               jsr    wordrd  EE32 ED   22                 std    2,y  EE34 35   96                 puls   d,x,pc                                          *                     * PCRGW, put gateway address                     * Y=source address (4 bytes)                     *  EE36 34   16       PCRGA     pshs   d,x  EE38 5F                      clrb  EE39                         trfr   B,F  EE39 1F                      fcb    $1f  EE3A 9F                      fcb    B<<4|F                               endm  EE3B 8E   0001               ldx    #WZGAR0  EE3E EC   A4                 ldd    0,y >EE40 BD   EDE0               jsr    wordwr  EE43 8E   0003               ldx    #WZGAR2FIO Simulation Structure             09:04:00  Dec 17, 2024   Page   88wzspi, basic spi routines                             EE46 EC   22                 ldd    2,y >EE48 BD   EDE0               jsr    wordwr  EE4B 35   96                 puls   d,x,pc                                          *                     * GCRSNM, get subnet mask  from common regsiters                     * Y=destination address (4 bytes)                     *  EE4D 34   16       GCRSNM    pshs   d,x  EE4F 5F                      clrb  EE50                         trfr   B,F  EE50 1F                      fcb    $1f  EE51 9F                      fcb    B<<4|F                               endm  EE52 8E   0005               ldx    #WZSUBR0  EE55 BD   ED85               jsr    wordrd  EE58 ED   A4                 std    0,y  EE5A 8E   0007               ldx    #WZSUBR2  EE5D BD   ED85               jsr    wordrd  EE60 ED   22                 std    2,y  EE62 35   96                 puls   d,x,pc                                          *                     * PCRSNM, put subnet mask address                     * Y=source address (4 bytes)                     *  EE64 34   16       PCRSNM    pshs   d,x  EE66 5F                      clrb  EE67                         trfr   B,F  EE67 1F                      fcb    $1f  EE68 9F                      fcb    B<<4|F                               endm  EE69 8E   0005               ldx    #WZSUBR0  EE6C EC   A4                 ldd    0,y  EE6E BD   EDE0               jsr    wordwr  EE71 8E   0007               ldx    #WZSUBR2  EE74 EC   22                 ldd    2,y  EE76 BD   EDE0               jsr    wordwr  EE79 35   96                 puls   d,x,pc                                          *                     * GCRSHA, get gateway hardware address from common regsiters                     * Y=destination address (6 bytes)                     *  EE7B 34   16       GCRSHA    pshs   d,x  EE7D 5F                      clrb  EE7E                         trfr   B,F  EE7E 1F                      fcb    $1f  EE7F 9F                      fcb    B<<4|F                               endm  EE80 8E   0009               ldx    #WZSHAR0  EE83 BD   ED85               jsr    wordrdFIO Simulation Structure             09:04:01  Dec 17, 2024   Page   89wzspi, basic spi routines                             EE86 ED   A4                 std    0,y  EE88 8E   000B               ldx    #WZSHAR2  EE8B BD   ED85               jsr    wordrd  EE8E ED   22                 std    2,y  EE90 8E   000D               ldx    #WZSHAR4  EE93 BD   ED85               jsr    wordrd  EE96 ED   24                 std    4,y  EE98 35   96                 puls   d,x,pc                                          *                     * PCRSHA, put gateway hardware address                     * Y=source address (6 bytes)                     *  EE9A 34   16       PCRSHA    pshs   d,x  EE9C 5F                      clrb  EE9D                         trfr   B,F  EE9D 1F                      fcb    $1f  EE9E 9F                      fcb    B<<4|F                               endm  EE9F 8E   0009               ldx    #WZSHAR0  EEA2 EC   A4                 ldd    0,y  EEA4 BD   EDE0               jsr    wordwr  EEA7 8E   000B               ldx    #WZSHAR2  EEAA EC   22                 ldd    2,y  EEAC BD   EDE0               jsr    wordwr  EEAF 8E   000D               ldx    #WZSHAR4  EEB2 EC   24                 ldd    4,y  EEB4 BD   EDE0               jsr    wordwr  EEB7 35   96                 puls   d,x,pc                                          *                     * GCRSIP, get source IP address from common regsiters                     * Y=destination address (4 bytes)                     *  EEB9 34   16       GCRSIP    pshs   d,x  EEBB 5F                      clrb  EEBC                         trfr   B,F  EEBC 1F                      fcb    $1f  EEBD 9F                      fcb    B<<4|F                               endm  EEBE 8E   000F               ldx    #WZSIPR0  EEC1 BD   ED85               jsr    wordrd  EEC4 ED   A4                 std    0,y  EEC6 8E   0011               ldx    #WZSIPR2  EEC9 BD   ED85               jsr    wordrd  EECC ED   22                 std    2,y  EECE 35   96                 puls   d,x,pc                                          *                     * PCRSIP, put gateway address                     * Y=source address (4 bytes)                     *FIO Simulation Structure             09:04:01  Dec 17, 2024   Page   90wzspi, basic spi routines                             EED0 34   16       PCRSIP    pshs   d,x  EED2 5F                      clrb  EED3                         trfr   B,F  EED3 1F                      fcb    $1f  EED4 9F                      fcb    B<<4|F                               endm  EED5 8E   000F               ldx    #WZSIPR0  EED8 EC   A4                 ldd    0,y  EEDA BD   EDE0               jsr    wordwr  EEDD 8E   0011               ldx    #WZSIPR2  EEE0 EC   22                 ldd    2,y  EEE2 BD   EDE0               jsr    wordwr  EEE5 35   96                 puls   d,x,pc                                          *                     * GCRILLT, get byte from interrup low level timer register                     * return word in D                     *  EEE7 34   16       GCRILLT   pshs   d,x  EEE9 5F                      clrb  EEEA                         trfr   B,F  EEEA 1F                      fcb    $1f  EEEB 9F                      fcb    B<<4|F                               endm  EEEC 8E   0013               ldx    #WZILLT0  EEEF BD   ED85               jsr    wordrd  EEF2 ED   E4                 std    0,s  EEF4 35   96                 puls   d,x,pc                                          *                     * PCRILLT, put word D into common registers mode register                     *  EEF6 34   16       PCRILLT   pshs   d,x  EEF8 5F                      clrb  EEF9                         trfr   B,F  EEF9 1F                      fcb    $1f  EEFA 9F                      fcb    B<<4|F                               endm  EEFB 8E   0013               ldx    #WZILLT0  EEFE EC   E4                 ldd    0,s  EF00 BD   EDE0               jsr    wordwr  EF03 35   96                 puls   d,x,pc                                          *                     * GCRIR, get byte from common registers interrupt register                     * return byte in B                     *  EF05 34   16       GCRIR     pshs   d,x  EF07 5F                      clrb  EF08                         trfr   B,F  EF08 1F                      fcb    $1f  EF09 9F                      fcb    B<<4|FFIO Simulation Structure             09:04:01  Dec 17, 2024   Page   91wzspi, basic spi routines                                                          endm  EF0A 8E   0015               ldx    #WZIR  EF0D BD   ED73               jsr    byterd  EF10 ED   E4                 std    0,s  EF12 35   96                 puls   d,x,pc                                          *                     * PCRIR, put byte B into common registers interrupt register                     *  EF14 34   16       PCRIR     pshs   d,x  EF16 5F                      clrb  EF17                         trfr   B,F  EF17 1F                      fcb    $1f  EF18 9F                      fcb    B<<4|F                               endm  EF19 8E   0015               ldx    #WZIR  EF1C EC   E4                 ldd    0,s  EF1E BD   EDD1               jsr    bytewr  EF21 35   96                 puls   d,x,pc                                          *                     * GCRIMR, get byte from common registers interrupt mask register                     * return byte in B                     *  EF23 34   16       GCRIMR    pshs   d,x  EF25 5F                      clrb  EF26                         trfr   B,F  EF26 1F                      fcb    $1f  EF27 9F                      fcb    B<<4|F                               endm  EF28 8E   0016               ldx    #WZIMR  EF2B BD   ED73               jsr    byterd  EF2E ED   E4                 std    0,s  EF30 35   96                 puls   d,x,pc                                          *                     * PCRIMR, put byte B into common registers interrupt mask register                     *  EF32 34   16       PCRIMR    pshs   d,x  EF34 5F                      clrb  EF35                         trfr   B,F  EF35 1F                      fcb    $1f  EF36 9F                      fcb    B<<4|F                               endm  EF37 8E   0016               ldx    #WZIMR  EF3A EC   E4                 ldd    0,s  EF3C BD   EDD1               jsr    bytewr  EF3F 35   96                 puls   d,x,pc                                          *                     * GCRSIR, get byte from common registers socket interrupt register                     * return byte in BFIO Simulation Structure             09:04:01  Dec 17, 2024   Page   92wzspi, basic spi routines                                                *  EF41 34   16       GCRSIR    pshs   d,x  EF43 5F                      clrb  EF44                         trfr   B,F  EF44 1F                      fcb    $1f  EF45 9F                      fcb    B<<4|F                               endm  EF46 8E   0017               ldx    #WZSIR  EF49 BD   ED73               jsr    byterd  EF4C ED   E4                 std    0,s  EF4E 35   96                 puls   d,x,pc                                          *                     * PCRSIR, put byte B into common registers socket interrupt register                     *  EF50 34   16       PCRSIR    pshs   d,x  EF52 5F                      clrb  EF53                         trfr   B,F  EF53 1F                      fcb    $1f  EF54 9F                      fcb    B<<4|F                               endm  EF55 8E   0017               ldx    #WZSIR  EF58 EC   E4                 ldd    0,s  EF5A BD   EDD1               jsr    bytewr  EF5D 35   96                 puls   d,x,pc                                          *                     * GCSIMR, get byte from common registers socket interrupt mask register                     * return byte in B                     *  EF5F 34   16       GCRSIMR   pshs   d,x  EF61 5F                      clrb  EF62                         trfr   B,F  EF62 1F                      fcb    $1f  EF63 9F                      fcb    B<<4|F                               endm  EF64 8E   0018               ldx    #WZSIMR  EF67 BD   ED73               jsr    byterd  EF6A ED   E4                 std    0,s  EF6C 35   96                 puls   d,x,pc                                          *                     * PCRSIMR, put byte B into common registers socket interrupt mask register                     *  EF6E 34   16       PCRSIMR   pshs   d,x  EF70 5F                      clrb  EF71                         trfr   B,F  EF71 1F                      fcb    $1f  EF72 9F                      fcb    B<<4|F                               endm  EF73 8E   0018               ldx    #WZSIMR  EF76 EC   E4                 ldd    0,sFIO Simulation Structure             09:04:02  Dec 17, 2024   Page   93wzspi, basic spi routines                             EF78 BD   EDD1               jsr    bytewr  EF7B 35   96                 puls   d,x,pc                                          *                     * GCRRTR, get word from common registers retry register                     * return word in D                     *  EF7D 34   16       GCRRTR    pshs   d,x  EF7F 5F                      clrb  EF80                         trfr   B,F  EF80 1F                      fcb    $1f  EF81 9F                      fcb    B<<4|F                               endm  EF82 8E   0019               ldx    #WZRTR0  EF85 BD   ED85               jsr    wordrd  EF88 ED   E4                 std    0,s  EF8A 35   96                 puls   d,x,pc                                          *                     * PCRRTR, put word D into common registers retry register                     *  EF8C 34   16       PCRRTR    pshs   d,x  EF8E 5F                      clrb  EF8F                         trfr   B,F  EF8F 1F                      fcb    $1f  EF90 9F                      fcb    B<<4|F                               endm  EF91 8E   0019               ldx    #WZRTR0  EF94 EC   E4                 ldd    0,s  EF96 BD   EDE0               jsr    wordwr  EF99 35   96                 puls   d,x,pc                                          *                     * GCRRCR, get byte from common registers retry count register                     * return byte in B                     *  EF9B 34   16       GCRRCR    pshs   d,x  EF9D 5F                      clrb  EF9E                         trfr   B,F  EF9E 1F                      fcb    $1f  EF9F 9F                      fcb    B<<4|F                               endm  EFA0 8E   001B               ldx    #WZRCR  EFA3 BD   ED73               jsr    byterd  EFA6 ED   E4                 std    0,s  EFA8 35   96                 puls   d,x,pc                                          *                     * PCRRCR, put byte B into common registers retry count register                     *  EFAA 34   16       PCRRCR    pshs   d,x  EFAC 5F                      clrbFIO Simulation Structure             09:04:02  Dec 17, 2024   Page   94wzspi, basic spi routines                             EFAD                         trfr   B,F  EFAD 1F                      fcb    $1f  EFAE 9F                      fcb    B<<4|F                               endm  EFAF 8E   001B               ldx    #WZRCR  EFB2 EC   E4                 ldd    0,s  EFB4 BD   EDD1               jsr    bytewr  EFB7 35   96                 puls   d,x,pc                                          *                     * GCRURP, get word from common registers unreachable port register                     * return word in D                     *  EFB9 34   16       GCRURP    pshs   d,x  EFBB 5F                      clrb  EFBC                         trfr   B,F  EFBC 1F                      fcb    $1f  EFBD 9F                      fcb    B<<4|F                               endm  EFBE 8E   002C               ldx    #WZUPRT0  EFC1 BD   ED85               jsr    wordrd  EFC4 ED   E4                 std    0,s  EFC6 35   96                 puls   d,x,pc                                          *                     * GCRUIP, get unreachable IP address from common registers                     * Y=destination address (4 bytes)                     *  EFC8 34   16       GCRUIP    pshs   d,x  EFCA 5F                      clrb  EFCB                         trfr   B,F  EFCB 1F                      fcb    $1f  EFCC 9F                      fcb    B<<4|F                               endm  EFCD 8E   0028               ldx    #WZUIPR0  EFD0 BD   ED85               jsr    wordrd  EFD3 ED   A4                 std    0,y  EFD5 8E   002A               ldx    #WZUIPR2  EFD8 BD   ED85               jsr    wordrd  EFDB ED   22                 std    2,y  EFDD 35   96                 puls   d,x,pc                                          *                     * GCRPHY, get byte from common registers PHY config register                     * return byte in B                     *  EFDF 34   56       GCRPHY    pshs   d,x,u  EFE1 8E   002E               ldx    #WZPHY  EFE4 5F                      clrb  EFE5                         trfr   B,F  EFE5 1F                      fcb    $1f  EFE6 9F                      fcb    B<<4|FFIO Simulation Structure             09:04:02  Dec 17, 2024   Page   95wzspi, basic spi routines                                                          endm  EFE7 BD   ED73               jsr    byterd  EFEA ED   E4                 std    0,s  EFEC 35   D6                 puls   d,x,u,pc                                          *                     * PCRPHY, put byte B into common registers PHY config register                     *  EFEE 34   56       PCRPHY    pshs   d,x,u  EFF0 8E   002E               ldx    #WZPHY  EFF3 5F                      clrb  EFF4                         trfr   B,F  EFF4 1F                      fcb    $1f  EFF5 9F                      fcb    B<<4|F                               endm  EFF6 EC   E4                 ldd    0,s  EFF8 BD   EDD1               jsr    bytewr  EFFB 35   D6                 puls   d,x,u,pc                                          *                     * GCRVERS, get byte from common registers socket version register                     * return byte in B                     *  EFFD 34   56       GCRVERS   pshs   d,x,u  EFFF 8E   0039               ldx    #WZVERS  F002 5F                      clrb  F003                         trfr   B,F  F003 1F                      fcb    $1f  F004 9F                      fcb    B<<4|F                               endm  F005 BD   ED73               jsr    byterd  F008 ED   E4                 std    0,s  F00A 35   D6                 puls   d,x,u,pc                     *                     * all functions to access socket registers                     *                                          * socket register names and offsets               0000  SNMR      equ    0               0001  SNCR      equ    1               0002  SNIR      equ    2               0003  SNSR      equ    3               0004  SNPORT0   equ    4               0005  SNPORT1   equ    5               0006  SNDHAR0   equ    6               0007  SNDHAR1   equ    7               0008  SNDHAR2   equ    8               0009  SNDHAR3   equ    9               000A  SNDHAR4   equ    10               000B  SNDHAR5   equ    11               000C  SNDIPR0   equ    12               000D  SNDIPR1   equ    13FIO Simulation Structure             09:04:03  Dec 17, 2024   Page   96wzspi, basic spi routines                                          000E  SNDIPR2   equ    14               000F  SNDIPR3   equ    15               0010  SNDPOR0   equ    16               0011  SNDPOR1   equ    17               0012  SNMSSR0   equ    18               0013  SNMSSR1   equ    19               0014  SNPROTO   equ    20               0015  SNTOS     equ    21               0016  SNTTL     equ    22               001E  SNRBFSZ   equ    30               001F  SNTBFSZ   equ    31               0020  SNTXFR0   equ    32               0021  SNTXFR1   equ    33               0022  SNTXRP0   equ    34               0023  SNTXRP1   equ    35               0024  SNTXWP0   equ    36               0025  SNTXWP1   equ    37               0026  SNRXRZ0   equ    38               0027  SNRXRZ1   equ    39               0028  SNRXRP0   equ    40               0029  SNRXRP1   equ    41               002A  SNRXWP0   equ    42               002B  SNRXWP1   equ    43               002C  SNIMR     equ    44               002D  SNFRAG0   equ    45               002E  SNFRAG1   equ    46               002F  SNKATIM   equ    47                                                               *                     * all commands to access socket register set                     *                                                               *                     * GSRMR, get byte from socket registers mode register                     * E=socket#                     * return byte in B                     *  F00C 34   16       GSRMR     psh    d,x  F00E BD   F2CA               jsr    tsk2rg  F011 8E   0000               ldx    #SNMR  F014 BD   ED73               jsr    byterd  F017 ED   E4                 std    0,s  F019 35   96                 puls   d,x,pc                                          *                     * PSRMR, put byte B  to socket registers mode register                     * E=socket#                     *  F01B 34   16       PSRMR     pshs   d,x  F01D BD   F2CA               jsr    tsk2rgFIO Simulation Structure             09:04:03  Dec 17, 2024   Page   97wzspi, basic spi routines                             F020 8E   0000               ldx    #SNMR  F023 EC   E4                 ldd    0,s  F025 BD   EDD1               jsr    bytewr  F028 35   96                 puls   d,x,pc                                          *                     * GSRCR, get bytefrom socket registers command register                     * E=socket#                     * return byte in B                     *  F02A 34   16       GSRCR     pshs   d,x  F02C BD   F2CA               jsr    tsk2rg  F02F 8E   0001               ldx    #SNCR  F032 BD   ED73               jsr    byterd  F035 ED   E4                 std    0,s  F037 35   96                 puls   d,x,pc                                          *                     * PSRCR, put byte B in socket registers command register                     * E=socket#                     *  F039 34   16       PSRCR     pshs   d,x  F03B BD   F2CA               jsr    tsk2rg  F03E 8E   0001               ldx    #SNCR  F041 EC   E4                 ldd    0,s  F043 BD   EDD1               jsr    bytewr  F046 8D   E2       01        bsr    GSRCR  F048 5D                      tstb  F049 26   FB                 bne    01b       wait command to be consumed  F04B E7   61                 stb    1,s       set return  F04D 35   96                 puls   d,x,pc                                          *                     * GSRIR, get bytefrom socket registers interrupt register                     * E=socket#                     * return byte in B                     *  F04F 34   16       GSRIR     pshs   d,x  F051 BD   F2CA               jsr    tsk2rg  F054 8E   0002               ldx    #SNIR  F057 BD   ED73               jsr    byterd  F05A ED   E4                 std    0,s  F05C 35   96                 puls   d,x,pc                                          *                     * PSRIR, put byte B in socket registers interrupt register                     * E=socket#                     *  F05E 34   16       PSRIR     pshs   d,x  F060 BD   F2CA               jsr    tsk2rg  F063 8E   0002               ldx    #SNIR  F066 EC   E4                 ldd    0,sFIO Simulation Structure             09:04:03  Dec 17, 2024   Page   98wzspi, basic spi routines                             F068 BD   EDD1               jsr    bytewr  F06B 35   96                 puls   d,x,pc                                          *                     * GSRSR, get bytefrom socket registers status register                     * E=socket#                     * return byte in B                     *  F06D 34   16       GSRSR     pshs   d,x  F06F BD   F2CA               jsr    tsk2rg  F072 8E   0003               ldx    #SNSR  F075 BD   ED73               jsr    byterd  F078 ED   E4                 std    0,s  F07A 35   96                 puls   d,x,pc                                          *                     * GSRPORT, get word from socket registers source port                     * E=socket#                     * return word in D                     *  F07C 34   16       GSRPORT   pshs   d,x  F07E BD   F2CA               jsr    tsk2rg  F081 8E   0004               ldx    #SNPORT0  F084 BD   ED85               jsr    wordrd  F087 ED   E4                 std    0,s  F089 35   96                 pul    d,x,pc                                          *                     * PSRPORT, put word D into socket registers source port                     * E=socket#                     *  F08B 34   16       PSRPORT   pshs   d,x  F08D BD   F2CA               jsr    tsk2rg  F090 8E   0004               ldx    #SNPORT0  F093 EC   E4                 ldd    0,s  F095 BD   EDE0               jsr    wordwr  F098 35   96                 puls   d,x,pc                                          *                     * GSRDHAR, get destination hardware address into [Y]                     * F=sockt#, Y=destination                     *  F09A 34   16       GSRDHAR   pshs   d,x  F09C BD   F2CA               jsr    tsk2rg  F09F 8E   0006               ldx    #SNDHAR0  F0A2 BD   ED85               jsr    wordrd  F0A5 ED   A4                 std    0,y  F0A7 8E   0008               ldx    #SNDHAR2  F0AA BD   ED85               jsr    wordrd  F0AD ED   22                 std    2,y  F0AF 8E   000A               ldx    #SNDHAR4  F0B2 BD   ED85               jsr    wordrdFIO Simulation Structure             09:04:04  Dec 17, 2024   Page   99wzspi, basic spi routines                             F0B5 ED   24                 std    4,y  F0B7 35   96                 puls   d,x,pc                                          *                     * PSRDHAR, put [Y] into destination hardware address                     * F=sockt#, Y=destination                     *  F0B9 34   16       PSRDHAR   pshs   d,x  F0BB BD   F2CA               jsr    tsk2rg  F0BE 8E   0006               ldx    #SNDHAR0  F0C1 EC   A4                 ldd    0,y  F0C3 BD   EDE0               jsr    wordwr  F0C6 8E   0008               ldx    #SNDHAR2  F0C9 EC   22                 ldd    2,y  F0CB BD   EDE0               jsr    wordwr  F0CE 8E   000A               ldx    #SNDHAR4  F0D1 EC   24                 ldd    4,y  F0D3 BD   EDE0               jsr    wordwr  F0D6 35   96                 puls   d,x,pc                                          *                     * GSRDIP. get destination IP address into [Y]                     * E=socket#                     *  F0D8 34   16       GSRDIP    pshs   d,x  F0DA BD   F2CA               jsr    tsk2rg  F0DD 8E   000C               ldx    #SNDIPR0  F0E0 BD   ED85               jsr    wordrd  F0E3 ED   A4                 std    0,y  F0E5 8E   000E               ldx    #SNDIPR2  F0E8 BD   ED85               jsr    wordrd  F0EB ED   22                 std    2,y  F0ED 35   96                 puls   d,x,pc                                          *                     * PSRDIP. put destination IP address into [Y]                     * E=socket#                     *  F0EF 34   16       PSRDIP    pshs   d,x  F0F1 BD   F2CA               jsr    tsk2rg  F0F4 8E   000C               ldx    #SNDIPR0  F0F7 EC   A4                 ldd    0,y  F0F9 BD   EDE0               jsr    wordwr  F0FC 8E   000E               ldx    #SNDIPR2  F0FF EC   22                 ldd    2,y  F101 BD   EDE0               jsr    wordwr  F104 35   96                 puls   d,x,pc                                          *                     * GSRDPOR, get word from socket registers destination port                     * E=socket#                     * return word in DFIO Simulation Structure             09:04:04  Dec 17, 2024   Page  100wzspi, basic spi routines                                                *  F106 34   16       GSRDPOR   pshs   d,x  F108 BD   F2CA               jsr    tsk2rg  F10B 8E   0010               ldx    #SNDPOR0  F10E BD   ED85               jsr    wordrd  F111 ED   E4                 std    0,s  F113 35   96                 pul    d,x,pc                                          *                     * PSRDPOR, put word D into socket registers destination port                     * E=socket#                     *  F115 34   16       PSRDPOR   pshs   d,x  F117 BD   F2CA               jsr    tsk2rg  F11A 8E   0010               ldx    #SNDPOR0  F11D EC   E4                 ldd    0,s  F11F BD   EDE0               jsr    wordwr  F122 35   96                 puls   d,x,pc                                          *                     * GSRMSS, get word from socket registers max segment size                     * E=socket#                     * return word in D                     *  F124 34   16       GSRMSS    pshs   d,x  F126 BD   F2CA               jsr    tsk2rg  F129 8E   0012               ldx    #SNMSSR0  F12C BD   ED85               jsr    wordrd  F12F ED   E4                 std    0,s  F131 35   96                 pul    d,x,pc                                          *                     * PSRMSS, put word D into socket registers maximum segment size                     * E=socket#                     *  F133 34   16       PSRMSS    pshs   d,x  F135 BD   F2CA               jsr    tsk2rg  F138 8E   0012               ldx    #SNMSSR0  F13B EC   E4                 ldd    0,s  F13D BD   EDE0               jsr    wordwr  F140 35   96                 puls   d,x,pc                                          *                     * GSRPROT, get byte from socket registers PROTOCOL                     * E=socket#                     * return byte in B                     *  F142 34   16       GSRPROT   pshs   d,x  F144 BD   F2CA               jsr    tsk2rg  F147 8E   0014               ldx    #SNPROTO  F14A BD   ED73               jsr    byterd  F14D ED   E4                 std    0,sFIO Simulation Structure             09:04:04  Dec 17, 2024   Page  101wzspi, basic spi routines                             F14F 35   96                 pul    d,x,pc                                          *                     * PSRPROT, put byte B into socket registers PROTOCOL                     * E=socket#                     *  F151 34   16       PSRPROT   pshs   d,x  F153 BD   F2CA               jsr    tsk2rg  F156 8E   0014               ldx    #SNPROTO  F159 EC   E4                 ldd    0,s  F15B BD   EDD1               jsr    bytewr  F15E 35   96                 puls   d,x,pc                                          *                     * GSRTOS, get byte from socket registers TOS                     * E=socket#                     * return byte in B                     *  F160 34   16       GSRTOS    pshs   d,x  F162 BD   F2CA               jsr    tsk2rg  F165 8E   0015               ldx    #SNTOS  F168 BD   ED73               jsr    byterd  F16B ED   E4                 std    0,s  F16D 35   96                 pul    d,x,pc                                          *                     * PSRTOS, put byte B into socket registers TOS                     * E=socket#                     *  F16F 34   16       PSRTOS    pshs   d,x  F171 BD   F2CA               jsr    tsk2rg  F174 8E   0015               ldx    #SNTOS  F177 EC   E4                 ldd    0,s  F179 BD   EDD1               jsr    bytewr  F17C 35   96                 puls   d,x,pc                                          *                     * GSRTTL, get byte from socket registers TTL                     * E=socket#                     * return byte in B                     *  F17E 34   16       GSRTTL    pshs   d,x  F180 BD   F2CA               jsr    tsk2rg  F183 8E   0016               ldx    #SNTTL  F186 BD   ED73               jsr    byterd  F189 ED   E4                 std    0,s  F18B 35   96                 pul    d,x,pc                                          *                     * PSRTTL, put byte B into socket registers TTL                     * E=socket#                     *FIO Simulation Structure             09:04:05  Dec 17, 2024   Page  102wzspi, basic spi routines                             F18D 34   16       PSRTTL    pshs   d,x  F18F BD   F2CA               jsr    tsk2rg  F192 8E   0016               ldx    #SNTTL  F195 EC   E4                 ldd    0,s  F197 BD   EDD1               jsr    bytewr  F19A 35   96                 puls   d,x,pc                                          *                     * GSRRBFS, get byte from socket registers rec buf size                     * E=socket#                     * return byte in B                     *  F19C 34   16       GSRRBFS   pshs   d,x  F19E BD   F2CA               jsr    tsk2rg  F1A1 8E   001E               ldx    #SNRBFSZ  F1A4 BD   ED73               jsr    byterd  F1A7 ED   E4                 std    0,s  F1A9 35   96                 pul    d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers rec buf size                     * E=socket#                     *  F1AB 34   16       PSRRBFS   pshs   d,x  F1AD BD   F2CA               jsr    tsk2rg  F1B0 8E   001E               ldx    #SNRBFSZ  F1B3 EC   E4                 ldd    0,s  F1B5 BD   EDD1               jsr    bytewr  F1B8 35   96                 puls   d,x,pc                                          *                     * GSRTBFS, get byte from socket registers tx buf size                     * E=socket#                     * return byte in B                     *  F1BA 34   16       GSRTBFS   pshs   d,x  F1BC BD   F2CA               jsr    tsk2rg  F1BF 8E   001F               ldx    #SNTBFSZ  F1C2 BD   ED73               jsr    byterd  F1C5 ED   E4                 std    0,s  F1C7 35   96                 puls   d,x,pc                                          *                     * PSRTBFS, put byte B into socket registers tx buf size                     * E=socket#                     *  F1C9 34   16       PSRTBFS   pshs   d,x  F1CB BD   F2CA               jsr    tsk2rg  F1CE 8E   001F               ldx    #SNTBFSZ  F1D1 EC   E4                 ldd    0,s  F1D3 BD   EDD1               jsr    bytewr  F1D6 35   96                 puls   d,x,pcFIO Simulation Structure             09:04:05  Dec 17, 2024   Page  103wzspi, basic spi routines                                                                     *                     * GSRTXFR, get word from socket registers TX free size                     * E=socket#                     * return word in D                     *  F1D8 34   16       GSRTXFR   pshs   d,x  F1DA BD   F2CA               jsr    tsk2rg  F1DD 8E   0020               ldx    #SNTXFR0  [R]  F1E0 BD   ED85               jsr    wordrd  F1E3 ED   E4       01        std    0,s  F1E5 BD   ED85               jsr    wordrd  F1E8 10A3 E4                 cmpd   0,s       read more times and exit  F1EB 26   F6                 bne    01b       when 2 reads are equal  F1ED 35   96                 puls   d,x,pc                                          *                     * GSRTXRP, get word from socket registers TX read pointer                     * E=socket#                     * return word in D                     *  F1EF 34   16       GSRTXRP   pshs   d,x  F1F1 BD   F2CA               jsr    tsk2rg  F1F4 8E   0022               ldx    #SNTXRP0  [R]  F1F7 BD   ED85               jsr    wordrd  F1FA ED   E4       01        std    0,s  F1FC BD   ED85               jsr    wordrd  F1FF 10A3 E4                 cmpd   0,s       read more times and exit  F202 26   F6                 bne    01b       when 2 reads are equal  F204 35   96                 puls   d,x,pc                                          *                     * GSRTXWP, get word from socket registers TX write pointer                     * E=socket#                     * return word in D                     *  F206 34   16       GSRTXWP   pshs   d,x  F208 BD   F2CA               jsr    tsk2rg  F20B 8E   0024               ldx    #SNTXWP0  [RW]  F20E BD   ED85               jsr    wordrd  F211 ED   E4                 std    0,s  F213 35   96                 puls   d,x,pc                                          *                     * PSRTXWP, put word D into socket registers TX write pointer                     * E=socket#                     *  F215 34   16       PSRTXWP   pshs   d,x  F217 BD   F2CA               jsr    tsk2rg  F21A 8E   0024               ldx    #SNTXWP0  F21D EC   E4                 ldd    0,s  F21F BD   EDE0               jsr    wordwrFIO Simulation Structure             09:04:05  Dec 17, 2024   Page  104wzspi, basic spi routines                             F222 35   96                 puls   d,x,pc                                          *                     * GSRRXRS, get word from socket registers RX received size                     * E=socket#                     * return word in D                     *  F224 34   16       GSRRXRS   pshs   d,x  F226 BD   F2CA               jsr    tsk2rg  F229 8E   0026               ldx    #SNRXRZ0  [R]  F22C BD   ED85               jsr    wordrd  F22F ED   E4       01        std    0,s  F231 BD   ED85               jsr    wordrd  F234 10A3 E4                 cmpd   0,s       read more times and exit  F237 26   F6                 bne    01b       when 2 reads are equal  F239 35   96                 puls   d,x,pc                                          *                     * GSRRXRP, get word from socket registers RX read pointer                     * E=socket#                     * return word in D                     *  F23B 34   16       GSRRXRP   pshs   d,x  F23D BD   F2CA               jsr    tsk2rg  F240 8E   0028               ldx    #SNRXRP0  [RW]  F243 BD   ED85               jsr    wordrd  F246 ED   E4                 std    0,s  F248 35   96                 puls   d,x,pc                                          *                     * PSRRXRP, put word D into socket registers RX read pointer                     * E=socket#                     *  F24A 34   16       PSRRXRP   pshs   d,x >F24C BD   F2CA               jsr    tsk2rg  F24F 8E   0028               ldx    #SNRXRP0  F252 EC   E4                 ldd    0,s  F254 BD   EDE0               jsr    wordwr  F257 35   96                 puls   d,x,pc                                          *                     * GSRRXWP, get word from socket registers RX write pointer                     * E=socket#                     * return word in D                     *  F259 34   16       GSRRXWP   pshs   d,x >F25B BD   F2CA               jsr    tsk2rg  F25E 8E   002A               ldx    #SNRXWP0  [R]  F261 BD   ED85               jsr    wordrd  F264 ED   E4       01        std    0,s  F266 BD   ED85               jsr    wordrd  F269 10A3 E4                 cmpd   0,s       read more times and exitFIO Simulation Structure             09:04:06  Dec 17, 2024   Page  105wzspi, basic spi routines                             F26C 26   F6                 bne    01b       when 2 reads are equal  F26E 35   96                 puls   d,x,pc                                          *                     * GSRIMR, get byte from socket registers interrupt mask                     * E=socket#                     * return byte in B                     *  F270 34   16       GSRIMR    pshs   d,x >F272 BD   F2CA               jsr    tsk2rg  F275 8E   002C               ldx    #SNIMR  F278 BD   ED73               jsr    byterd  F27B ED   E4                 std    0,s  F27D 35   96                 puls   d,x,pc                                          *                     * PSRIMS, put byte B into socket registers interrupt mask                     * E=socket#                     *  F27F 34   16       PSRIMR    pshs   d,x >F281 BD   F2CA               jsr    tsk2rg  F284 8E   002C               ldx    #SNIMR  F287 EC   E4                 ldd    0,s  F289 BD   EDD1               jsr    bytewr  F28C 35   96                 puls   d,x,pc                                          *                     * GSRFRAG, get word from socket registers FRAG                     * E=socket#                     * return word in D                     *  F28E 34   16       GSRFRAG   pshs   d,x >F290 BD   F2CA               jsr    tsk2rg  F293 8E   002D               ldx    #SNFRAG0  F296 BD   ED85               jsr    wordrd  F299 ED   E4                 std    0,s  F29B 35   96                 puls   d,x,pc                                          *                     * PSRGRAG, put word D into socket registers FRAG                     * E=socket#                     *  F29D 34   16       PSRFRAG   pshs   d,x >F29F BD   F2CA               jsr    tsk2rg  F2A2 8E   002D               ldx    #SNFRAG0  F2A5 EC   E4                 ldd    0,s  F2A7 BD   EDE0               jsr    wordwr  F2AA 35   96                 puls   d,x,pc                                          *                     * GSRKATM, get byte from socket registers keep alive timer                     * E=socket#FIO Simulation Structure             09:04:06  Dec 17, 2024   Page  106wzspi, basic spi routines                                                * return byte in B                     *  F2AC 34   16       GSKATM    pshs   d,x >F2AE BD   F2CA               jsr    tsk2rg  F2B1 8E   002F               ldx    #SNKATIM  F2B4 BD   ED73               jsr    byterd  F2B7 ED   E4                 std    0,s  F2B9 35   96                 puls   d,x,pc                                          *                     * PSRKATM, put byte B into socket registers keep alive timer                     * E=socket#                     *  F2BB 34   16       PSRKATM   pshs   d,x >F2BD BD   F2CA               jsr    tsk2rg  F2C0 8E   002F               ldx    #SNKATIM  F2C3 EC   E4                 ldd    0,s  F2C5 BD   EDD1               jsr    bytewr  F2C8 35   96                 puls   d,x,pc                     *                     * data handling routines                     *                                          * translate socket register in partial address                     * prepares bits [7...5][4...3]                     * E=socket#, F=lost, B=lost               F2CA  tsk2rg    equ    *  F2CA                         trfr   E,B  F2CA 1F                      fcb    $1f  F2CB E9                      fcb    E<<4|B                               endm  F2CC 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F2CD 1C   FE                 clc              make reg bits + '01'  F2CF 59                      rolb             socket register  F2D0 1A   01                 sec  F2D2 59                      rolb             xxx 01 ...                     *  F2D3                         trfr   B,F  F2D3 1F                      fcb    $1f  F2D4 9F                      fcb    B<<4|F                               endm  F2D5 39                      rts                                          *                     * translate socket register in final address (data xfer)                     * prepares bit [7...0]                     *               F2D6  tsk2tx    equ    *  F2D6                         trfr   E,B  F2D6 1F                      fcb    $1f  F2D7 E9                      fcb    E<<4|BFIO Simulation Structure             09:04:06  Dec 17, 2024   Page  107wzspi, basic spi routines                                                          endm  F2D8 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F2D9 1A   01                 sec              make reg bits + '10'  F2DB 59                      rolb             sock TX buffer  F2DC 1C   FE                 clc  F2DE 59                      rolb                     *  F2DF 1A   01                 sec  F2E1 59                      rolb             write bit     '1'                     *  F2E2 58                      lslb             variable size '00'  F2E3 58                      lslb             xxx 10 100                     *  F2E4 39                      rts                                          *                     * translate socket register in rx buffer address (data xfer)                     * prepares bit [7...0]                     *               F2E5  tsk2rx    equ    *  F2E5                         trfr   E,B  F2E5 1F                      fcb    $1f  F2E6 E9                      fcb    E<<4|B                               endm  F2E7 5A                      decb             wzenum= 1...8, sn= 0...7                     *  F2E8 1A   01                 sec              make reg bits + '11'  F2EA 59                      rolb             sock RX buffer  F2EB 1A   01                 sec              make reg bits + '11'  F2ED 59                      rolb                     *  F2EE 1C   FE                 clc  F2F0 59                      rolb             read bit     '0'                     *  F2F1 58                      lslb             variable size '00'  F2F2 58                      lslb             xxx 11 000  F2F3 39                      rts                                          *                     * rdsk2fb, read socket data in fifo buffer                     * Y=target, U=sock info                     * E=socket#                     * entry D= available count                     * return, D=xferred count                     *  F2F4 34   76       RDSK2FB   pshs   d,x,y,u                     *  F2F6 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F2F9 23   02                 bls    01f  F2FB EC   4A                 ldd    wzrqln,u  mandatory size  F2FD 1F   01       01        tfr    D,X       save for laterFIO Simulation Structure             09:04:07  Dec 17, 2024   Page  108wzspi, basic spi routines                             F2FF ED   E4                 std    0,s       save xfrerred old  D  F301 ED   48                 std    wzxfer,u  F303 27   3B                 beq    15f       no data                     *  F305 BD   F23B               jsr    GSRRXRP  F308 34   06                 pshs   d         save socket read pointer [5,6]  F30A 1F   02                 tfr    D,Y                     *  F30C CE   8080               ldu    #SPIBASE  F30F 34   01                 pshs   cc        [4]  F311                         pshsw  [2,3]  F311 1038                    fdb    $1038                               endm  F313 34   40                 pshs   u         [0,1]  F315 1A   50                 orcc   #$50      disable interrupts  F317 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F319 A7   C4                 sta    spicmd,u  F31B 10AF 44                 sty    hibyta,u  start address                      >F31E BD   F2E5               jsr    tsk2rx    SOCK# to buffer address                       F321 E7   44                 stb    hibyta,u  F323 10AE 6B                 ldy    11,s      target  F326 E7   44                 stb    hibyta,u  shift out first data byte  F328 33   45                 leau   lobyta,u  lobyte is the first byte shifted in  F32A                         trfr   X,W  F32A 1F                      fcb    $1f  F32B 16                      fcb    X<<4|W                               endm  F32C                         tfm4   U,Y  F32C 113B                    fdb    $113b  F32E 32                      fcb    U<<4|Y                               endm  F32F 35   40                 puls   u         [0,1]  F331 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F333 A7   C4                 sta    spicmd,u  F335                         pulsw  restore   E:F              [2,3]  F335 1039                    fdb    $1039                               endm  F337 35   01                 puls   cc        [4]                     *  F339 35   06                 puls   d         old read pointer         [5,6]  F33B E3   E4                 addd   0,s       adjust transferred  F33D BD   F24A               jsr    PSRRXRP   update pointer                     *  F340 35   F6       15        puls   d,x,y,u,pc                                                               *                     * wrfb2sk,write fifo buffer to socket buffer                     * Y=target                     * E=socket#FIO Simulation Structure             09:04:07  Dec 17, 2024   Page  109wzspi, basic spi routines                                                * on entry D= total amount to xfer                     * on return D= xferred count                     *  F342 34   76       WRFB2SK   pshs   d,x,y,u  F344 10A3 4A                 cmpd   wzrqln,u  has fio max size incorporated  F347 23   02                 bls    01f  F349 EC   4A                 ldd    wzrqln,u  F34B 1F   01       01        tfr    d,x  F34D ED   E4                 std    0,s  F34F ED   48                 std    wzxfer,u  report size  F351 27   57                 beq    15f                     *  F353 10AE C8 22              ldy    wzuwrp,u  0 if not UDP or never written  F357 26   05                 bne    24f  F359 BD   F206               jsr    GSRTXWP   get write pointer  F35C 20   02                 bra    25f  F35E 1F   20       24        tfr    y,d                     *  F360 34   06       25        pshs   d  F362 1F   02                 tfr    D,Y                     *  F364 CE   8080               ldu    #SPIBASE  F367 34   01                 pshs   cc  F369                         pshsw  save      E:F  F369 1038                    fdb    $1038                               endm  F36B 34   40                 pshs   u  F36D 1A   50                 orcc   #$50  F36F 86   2D                 lda    #SPI_RST+SPI_SR_+SPI_CR_+SPI_AUT set CS low  F371 A7   C4                 sta    spicmd,u  F373 10AF 44                 sty    hibyta,u  start address                       F376 BD   F2D6               jsr    tsk2tx                       F379 E7   44                 stb    hibyta,u  F37B 10AE 6B                 ldy    11,s      target  F37E 33   44                 leau   hibyta,u  the first to shift out  F380                         trfr   X,W  F380 1F                      fcb    $1f  F381 16                      fcb    X<<4|W                               endm  F382                         tfm3   Y,U  F382 113A                    fdb    $113a  F384 23                      fcb    Y<<4|U                               endm  F385 35   40                 puls   u  F387 86   65                 lda    #SPI_CS_+SPI_RST+SPI_SR_+SPI_CR_  F389 A7   C4                 sta    spicmd,u  F38B                         pulsw  restore   E:F!!  F38B 1039                    fdb    $1039                               endm  F38D 35   01                 puls   ccFIO Simulation Structure             09:04:07  Dec 17, 2024   Page  110wzspi, basic spi routines                                                *  F38F 35   06                 puls   d         old write pointer  F391 E3   E4                 addd   0,s  F393 EE   66                 ldu    6,s       restore U  F395 AE   C8 26              ldx    wztype,u  F398 8C   0002               cmpx   #SK_DGRM  F39B 27   0A                 beq    10f  F39D 8C   0004               cmpx   #SK_IRAW  F3A0 27   05                 beq    10f  F3A2 BD   F215     11        jsr    PSRTXWP   update pointer  F3A5 20   03                 bra    15f                       F3A7 ED   C8 22    10        std    wzuwrp,u  set RAM pointer                     *                     *  F3AA 35   F6       15        puls   d,x,y,u,pcFIO Simulation Structure             09:04:07  Dec 17, 2024   Page  111Debug Interface Routines                                                   F3AC               DB_main  F3AC 8D   4F                 bsr    DB_test   see if debug routines present  F3AE 6E   9F C002            jmp    [DEBUGROM+2]  F3B2               DB_pdata  F3B2 8D   49                 bsr    DB_test   see if debug routines present  F3B4 6E   9F C004            jmp    [DEBUGROM+4]  F3B8               DB_phex  F3B8 8D   43                 bsr    DB_test   see if debug routines present  F3BA 6E   9F C006            jmp    [DEBUGROM+6]  F3BE               DB_phex2  F3BE 8D   3D                 bsr    DB_test   see if debug routines present  F3C0 6E   9F C008            jmp    [DEBUGROM+8]  F3C4               DB_pcrlf  F3C4 8D   37                 bsr    DB_test   see if debug routines present  F3C6 6E   9F C00A            jmp    [DEBUGROM+10]  F3CA               DB_check  F3CA 8D   31                 bsr    DB_test   see if debug routines present  F3CC 6E   9F C00C            jmp    [DEBUGROM+12]  F3D0               DB_config  F3D0 8D   2B                 bsr    DB_test   see if debug routines present  F3D2 6E   9F C00E            jmp    [DEBUGROM+14]  F3D6 34   17       DB_msg    pshs   cc,d,x  F3D8 AE   65                 ldx    1+2+2,s   get return address  F3DA EC   81                 ldd    ,x++      get mask word  F3DC B4   0401               anda   DB_cntrl  F3DF F4   0402               andb   DB_cntrl+1  F3E2 34   04                 pshs   b  F3E4 AA   E0                 ora    ,s+  F3E6 27   04                 beq    10f       jump if flag not set  F3E8 30   02                 leax   2,x       skip over false address & fall through  F3EA 20   02                 bra    20f  F3EC AE   84       10        ldx    ,x        get false branch label  F3EE AF   65       20        stx    1+2+2,s   fix up return address  F3F0 35   97                 puls   cc,d,x,pc return                     *  F3F2               DB_pspace  F3F2               DB_outsp  F3F2 34   16                 pshs   d,x  F3F4 8E   F3FB               ldx    #00f  F3F7 8D   B9                 bsr    DB_pdata  F3F9 35   96                 puls   d,x,pc  F3FB 20 00         00        fcc    ' ',0                       F3FD 34   07       DB_test   pshs   cc,d  F3FF FC   C000               ldd    DEBUGROM  Debug rom present?  F402 1083 1234               cmpd   #$1234    special marker  F406 27   05                 beq    99f       yes - exit  F408 35   07                 puls   cc,d      no - abort DB_xx function  F40A 32   62                 leas   2,s  F40C 39                      rts  F40D 35   87       99        puls   cc,d,pc   returnFIO Simulation Structure             09:04:08  Dec 17, 2024   Page  112Debug Interface Routines                                                 *                     * nwpspecial, routines that communicate a bit differently                     *                                                                                                                              *********************************************************************                     *                     * memp2ff, mem pointer to fifo                     * copy 512 bytes addressed by fifo_us3 to fifo                     *                     * X=taskstruct                     * U=wzsock address                     *                     *                     *********************************************************************               F40F  memp2ff   equ    *  F40F DC   1E                 ldd    fifo_us3  get address  F411 1F   98                 tfr    b,a  F413 5F                      clrb  F414 48                      lsla             512 byte chunks  F415 1F   01                 tfr    d,x  F417 FC   E074               ldd    fio_fsz  F41A                         trfr   D,W  F41A 1F                      fcb    $1f  F41B 06                      fcb    D<<4|W                               endm  F41C 108E 0020               ldy    #fifo  F420                         tfm1   X,Y  F420 1138                    fdb    $1138  F422 12                      fcb    X<<4|Y                               endm  F423 4F                      clra  F424 C6   05                 ldb    #R_RDOK  F426 39                      rts                                                         F427  netboot   equ    *  F427 39                      rts                                          ****************************************************************                     *                     * placeholder                     *                     ****************************************************************  FC00                         org    $fc00     command F8 only works with 512 boundaries! >FC00 16   0015     nboot     lbra   nboot1  FC03 0D            names     fcb    $0d  FC04 75 6E 69 66             fcc    "uniflexn"  FC0C 0000 0000               fdb    0,0,0,0,0,0FIO Simulation Structure             09:04:08  Dec 17, 2024   Page  113Debug Interface Routines                                                   FC18 30   8C E8    nboot1    leax   names,pcr  FC1B AD   9F F80A            jsr    [$f80a]  FC1F 3F                      swi                                                               ****************************************************************                                                                         end    rom_initFIO Simulation Structure             09:04:08  Dec 17, 2024   Page  114Debug Interface Routines                            Symbol Table:Absolute Symbols:A        0008   AF_INET  0002   AF_UNIX  0001   AF_UNSP  0000   B        0009   BUFSIZ   0200   CC       000A   CI_CFL   0080   CI_MP    0010   CI_POC   0020   CI_UNR   0040   CPU2DEV  0022   CPU_down E057   CPUtraps FFF0   CR       000D   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_check F3CA   DB_cntrl 0401   DB_confi F3D0   DB_iflg  0400   DB_main  F3AC   DB_msg   F3D6   DB_outsp F3F2   DB_pcrlf F3C4   DB_pdata F3B2   DB_phex  F3B8   DB_phex2 F3BE   DB_pspac F3F2   DB_test  F3FD   DBmsg00  E012   DBmsg01  E023   DBmsg02  E043   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  0021   DEV_SIZE 0006   DEV_SOCK E577   DO_HISTO 0001   DP       000B   DPR_BASE 0000   D_END    0046   D_func0  0000   D_func1  0002   D_func10 0020   D_func11 0022   D_func12 0024   D_func13 0026   D_func14 0028   D_func15 002A   D_func16 002C   D_func17 002E   D_func18 0030   D_func19 0032   D_func1A 0034   D_func1B 0036   D_func1C 0038   D_func1D 003A   D_func1E 003C   D_func1F 003E   D_func2  0004   D_func3  0006   D_func4  0008   D_func5  000A   D_func6  000C   D_func7  000E   D_func8  0010   D_func9  0012   D_funcA  0014   D_funcB  0016   D_funcC  0018   D_funcD  001A   D_funcE  001C   D_funcF  001E   D_init   0042   D_inthan 0040   D_test   0044   E        000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E2F9   FIFO_put E31E   FIFOgeta E2F0   FIFOputa E316   FIOPRI   FFCE   FIO_get  E2CE   FIO_lock 0446   FIO_rel  E2E3   GCRGA    EE1F   GCRILLT  EEE7   GCRIMR   EF23   GCRIR    EF05   GCRMR    EE01   GCRPHY   EFDF   GCRRCR   EF9B   GCRRTR   EF7D   GCRSHA   EE7B   GCRSIMR  EF5F   GCRSIP   EEB9   GCRSIR   EF41   GCRSNM   EE4D   GCRUIP   EFC8   GCRURP   EFB9   GCRVERS  EFFD   GSKATM   F2AC   GSRCR    F02A   GSRDHAR  F09A   GSRDIP   F0D8   GSRDPOR  F106   GSRFRAG  F28E   GSRIMR   F270   GSRIR    F04F   GSRMR    F00C   GSRMSS   F124   GSRPORT  F07C   GSRPROT  F142   GSRRBFS  F19C   GSRRXRP  F23B   GSRRXRS  F224   GSRRXWP  F259   GSRSR    F06D   GSRTBFS  F1BA   GSRTOS   F160   GSRTTL   F17E   GSRTXFR  F1D8   GSRTXRP  F1EF   GSRTXWP  F206   HANGS    0001   HRECSIZ  0004   H_cpu    E46F   H_fio    E493   IF       0010   INTS     0002   IO_end   E390   IO_han   E339   IRQ_han  E3AF   IRQmsg10 E3BC   IS       0003   IU       0002   IX       0000   IY       0001   LF       000A   MAXHIST  0010   MAXTBL   0003   MAX_DEV  0001   MAX_S_NU 0020   MAX_TI   0009   MAX_UDP  05C0   MAX_WZ   0008   MOD_SIZE 0004   NBRQLN   0004   NBSIZE   0204   NET      0001   NUM_TSK  040C   O_CLOSE  0020   O_INTRPT 0038   O_OPEN   0010   O_PGETD  00D0   O_PSETD  00E0   O_READ   0060   O_RQRD   0050   O_RQWR   0030   O_TTYG   00A0   O_TTYS   0090   O_WR1C   0080   O_WRITE  0040   PACK_COM 0000   PACK_FIR 0080   PACK_REM 0001   PC       0005   PCRGA    EE36   PCRILLT  EEF6   PCRIMR   EF32   PCRIR    EF14   PCRMR    EE10   PCRPHY   EFEE   PCRRCR   EFAA   PCRRTR   EF8C   PCRSHA   EE9A   PCRSIMR  EF6E   PCRSIP   EED0   PCRSIR   EF50   PCRSNM   EE64   PF_INET  0002   PF_UNIX  0001   PIPES    0006   POLPRI   FFBA   PROT_EGP 0008   PROT_ICM 0001   PROT_IGM 0002   PROT_XLT 8000   PSRCR    F039   PSRDHAR  F0B9   PSRDIP   F0EF   PSRDPOR  F115   PSRFRAG  F29D   PSRIMR   F27F   PSRIR    F05E   PSRKATM  F2BB   PSRMR    F01B   PSRMSS   F133   PSRPORT  F08B   PSRPROT  F151   PSRRBFS  F1AB   FIO Simulation Structure             09:04:09  Dec 17, 2024   Page  115Debug Interface Routines                            PSRRXRP  F24A   PSRTBFS  F1C9   PSRTOS   F16F   PSRTTL   F18D   PSRTXWP  F215   QFF1     0080   QUITS    0003   RAMend   3EFF   RAMorg   0400   RAMscrat 7000   RAMscren 7E00   RDSK2FB  F2F4   REJECT   0080   ROMLOorg E000   ROM_ERR  E0DF   ROM_VERS 0020   ROMstack 7FE0   RSVREG   0003   RUNPRI   0046   R_ACCEPT 000B   R_BIND   0009   R_CLOCK  000E   R_CLOSE  0002   R_CONNEC 0008   R_DISCON 000C   R_ERRBLK 0084   R_INTRPT 0007   R_LISTEN 000A   R_OPEN   0001   R_PDATA  000B   R_RD1C   0009   R_RDFRM  0021   R_RDOK   0005   R_RDRBLK 0083   R_READ   0006   R_READM  000C   R_REQOK  0003   R_RESET  000F   R_RQRBLK 0082   R_RQRD   0005   R_RQRDNB 0015   R_RQSBLK 0080   R_RQWR   0003   R_RQWRNB 0013   R_RRDFD  0022   R_RSNDTO 0023   R_SNDBLK 0081   R_SNDKEP 000E   R_SNDMAC 000D   R_SNDTOM 0025   R_SPCL   000F   R_TTY    000D   R_WR1C   0008   R_WRITE  0004   R_WSNDTO 0024   S        0004   SIQPRI   FFD8   SI_CON   0001   SI_DIS   0002   SI_HAN   E403   SI_Q     040E   SI_Q_ptr 0444   SI_RCV   0004   SI_SOK   0010   SI_TIM   0008   SKADLN   0010   SKPRI    FFC4   SK_DGRM  0002   SK_IRAW  0004   SK_MRAW  0003   SK_NONBL 0100   SK_SPONC 0200   SK_STRM  0001   SNCR     0001   SNDHAR0  0006   SNDHAR1  0007   SNDHAR2  0008   SNDHAR3  0009   SNDHAR4  000A   SNDHAR5  000B   SNDIPR0  000C   SNDIPR1  000D   SNDIPR2  000E   SNDIPR3  000F   SNDPOR0  0010   SNDPOR1  0011   SNFRAG0  002D   SNFRAG1  002E   SNIMR    002C   SNIR     0002   SNKATIM  002F   SNMR     0000   SNMSSR0  0012   SNMSSR1  0013   SNPORT0  0004   SNPORT1  0005   SNPROTO  0014   SNRBFSZ  001E   SNRXRP0  0028   SNRXRP1  0029   SNRXRZ0  0026   SNRXRZ1  0027   SNRXWP0  002A   SNRXWP1  002B   SNSR     0003   SNTBFSZ  001F   SNTOS    0015   SNTTL    0016   SNTXFR0  0020   SNTXFR1  0021   SNTXRP0  0022   SNTXRP1  0023   SNTXWP0  0024   SNTXWP1  0025   SPIBASE  8080   SPI_AUT  0008   SPI_CR_  0001   SPI_CS_  0040   SPI_HLD  0002   SPI_IEN  0010   SPI_IRQ  0001   SPI_RST  0020   SPI_SR_  0004   SP_EGP   0008   SP_GMP   0002   SP_ICMP  0001   SP_TCP   0006   SP_UDP   0011   S_ACCEPT 0058   S_BIND   0048   S_CLOSE  0010   S_CONNEC 0040   S_DISCON 0060   S_INTRPT 0038   S_LISTEN 0050   S_NETBOO 00F0   S_OPEN   0008   S_PG2FIF 00F8   S_RDRBLK 00D8   S_READ   0030   S_RQRBLK 00D0   S_RQRD   0028   S_RQSBLK 00C0   S_RQWR   0018   S_RRDFRM 0080   S_RREAD  0088   S_SNDBLK 00C8   S_SNDKEP 0070   S_SNDMAC 0068   S_SPCL   0078   S_WRITE  0020   S_WRQSTO 0090   S_WSNDTM 00A0   S_WSNDTO 0098   TFREE    0004   TRUN     0001   TSKSIZ   00D7   TSLEEP   0002   TSYS     0005   TWAIT    0003   U        0003   USTSIZ   00C0   V        0007   W        0006   WCACCP   0086   WCBIND   0085   WCCLOS   0010   WCCONN   0004   WCDISC   0008   WCLIST   0002   WCOPEN   0001   WCRECV   0040   WCRRQD   0081   WCSEND   0020   WCSKEP   0022   WCSNAC   0021   WCSPEC   0080   WCXMDR   0082   WFNBLK   0001   WFSPOC   0002   WRFB2SK  F342   WSCLSD   0000   WSCLSG   001A   WSCLWT   001C   WSESTB   0017   WSFWAI   0018   WSINIT   0013   WSIRAW   0032   WSLACK   001D   WSLIST   0014   WSMRAW   0042   WSRNBL   001E   WSRRQF   0081   WSSPEC   0080   WSSYNR   0016   WSSYNS   0015   WSTIMW   001B   WSUDP    0022   WSWNBL   001F   WSXMDD   0082   WZ5_name E1E1   WZBUSY   0080   WZGAR0   0001   WZGAR1   0002   WZGAR2   0003   WZGAR3   0004   WZILLT0  0013   WZILLT1  0014   WZIMR    0016   WZIR     0015   WZLCSZ   0016   WZMR     0000   WZNETOF  0370   WZPHY    002E   WZRCR    001B   WZRTR0   0019   WZRTR1   001A   WZSHAR0  0009   WZSHAR1  000A   WZSHAR2  000B   WZSHAR3  000C   WZSHAR4  000D   WZSHAR5  000E   WZSIMR   0018   WZSIPR0  000F   WZSIPR1  0010   WZSIPR2  0011   WZSIPR3  0012   WZSIR    0017   WZSIZE   002A   WZSKOFF  0220   WZSLCK   0001   WZSUBR0  0005   WZSUBR1  0006   WZSUBR2  0007   WZSUBR3  0008   WZUIPR0  0028   WZUIPR1  0029   WZUIPR2  002A   WZUIPR3  002B   WZUPRT0  002C   WZUPRT1  002D   WZVERS   0039   WZWBND   0040   WZWLCK   0010   X        0001   Y        0002   bad_cmd  E3AB   bittab   E715   bmread   ED97   bt2num   E704   byterd   ED73   bytewr   EDD1   chproc   040A   clock_ti 0455   conlb1   E7BE   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_fio3 0004   FIO Simulation Structure             09:04:09  Dec 17, 2024   Page  116Debug Interface Routines                            cpu_fio4 0006   cpu_fio5 0008   cpu_fioF 0024   dev_addr 0000   dev_brbu 0004   dev_tab  049B   dev_type 0002   end_vars 3EFF   fifo     0020   fifo_cnt 0012   fifo_get 0014   fifo_put 0016   fifo_us0 0018   fifo_us1 001A   fifo_us2 001C   fifo_us3 001E   fio_cpu  0009   fio_cpu1 000A   fio_cpu2 000C   fio_cpu3 000D   fio_cpu4 000F   fio_cpu5 0011   fio_cpuF 0023   fio_dsz  E076   fio_fsz  E074   fio_irq  E22C   fio_msg  E296   fio_rese E1EC   fio_resp E2B2   fio_star E0A7   fio_wait E20F   fiointe  E295   functb   EC9B   gtsktb   E4CB   hibyta   0004   hibyts   0006   hst_cmd  0000   hst_seq  0001   hst_tty  0002   hst_val  0003   hstbuf   0459   hstptr   0499   idle     040D   int_all  E3D4   int_buf  0447   int_ptr  0453   jobpri   0409   lobyta   0005   lobyts   0007   lstram   115A   makrd6   E4FF   makrdy   E4F6   max_trn  E078   memp2ff  F40F   mod_name 0002   mod_tbl  E1DB   mod_type 0000   names    FC03   nboot    FC00   nboot1   FC18   netboot  F427   no_dev   E15F   num2bt   E6FA   nwp_strt 0000   oldorg   ED3F   polext   E7DC   rdrqer1  E91F   rom_bad  E0DD   rom_firq E0B0   rom_init E079   rom_int  E0D2   rom_nmi  E0AA   rom_swi  E0B7   rom_swi2 E0BD   rom_swi3 E0C4   rom_trap E0CB   rsched   E4B7   rsched2  E4B9   sa_dat   0002   sa_fam   0000   sdev_sig E632   send_SI  E445   set_tabl E11D   showrg   ECE9   sin_addr 0014   sin_fam  0010   sin_port 0012   skacpt   E88B   skbind   E7FE   skclin   E739   skclos   E71E   skcner1  E7F4   skcner2  E7E4   skcner3  E7F8   skcner4  E7F0   skcner5  E7EC   skcner6  E7E8   skconn   E76B   skcraw   E670   skctcp   E65A   skcudp   E663   skdisc   ED38   skdvini  E5DA   skfres   E653   skinit   E5BD   skinthan E631   skintrp  E71E   sklist   E84F   sknbe1   EBD4   sknbe10  EC38   sknbrd   EBDB   sknbrp1  EBCE   sknbrp2  EBA8   sknbrr   EB76   sknbsd   EC44   sknbsr   EC0A   sknewp   E635   sknone   E5D7   skopen   E679   skoper1  E6F0   skoper2  E6F4   skowfo   E6CF   skrecv   E924   skreqrd  E8CC   skreqwr  E967   sksend   E9BC   skskep   ED38   sksmac   ED38   skspcl   EC74   sktest   E62E   skuer1   EB39   skurrd   EA83   skurrdf  E9FE   skurwt   EAB1   skusnm   EAF5   skusnt   EB3C   skuwr2   EAF5   sleep    E524   sleep7   E54C   slplst   0403   spicmd   0000   spicon   0001   spiint   0456   spinit   ED3F   spista   0000   spistr2  ED45   sprend   EDEF   stbinit  E0EC   sto_chk  E166   stptsk   E4DA   swtchu   E4EB   sys_vars 0400   tim_base 8400   tim_rest 8401   timerack E1CF   timerchk E1D5   timerin  E1C9   tsagin   000F   tscmd    0009   tsdev    000D   tsevnt   0006   tsk2rg   F2CA   tsk2rx   F2E5   tsk2tx   F2D6   tskindx  040B   tskinit  E174   tsktab   04C1   tslink   0000   tsprir   0005   tsseq    000A   tssgnl   0008   tsslnk   0002   tsstat   0004   tstval   000C   umark0   0013   umark1   0015   usp      0011   utask    0407   wakeu2   E50B   wakeu3   E512   wakeu4   E516   wakeu5   E518   wakeup   E500   wlocip   0370   wnboot   03B0   wordrd   ED85   wordwr   EDE0   wzanyp   0457   wzcmnd   0004   wzdctr   0001   wzdevt   E647   wzdma1   000C   wzdma2   000E   wzdprt   0012   wzdsta   0012   wzenum   0000   wzerr    0007   wzfaml   0024   wzflg    0003   wzfsta   0002   wzgwad   0008   wzhwad   000C   wzifga   E00E   wzifip   E006   wzifma   E000   wzifnm   E00A   wzipad   0014   wzmyip   0000   wzprio   0006   wzprot   0028   wzrdev   ECCD   wzrqln   000A   wzsbnm   0004   wzsflg   0018   wzsk1    0346   wzsk2    031C   wzsk3    02F2   wzsk4    02C8   wzsk5    029E   wzsk6    0274   wzsk7    024A   wzsk8    0220   wzsprt   0010   wzstat   0005   wzswap   0020   wztype   0026   wzuipa   001A   wzuprt   001E   wzurms   0020   wzuwrp   0022   wzwdev   ECA3   wzxfer   0008   xmtint   E559   