          sttl    Device     Table Structure          pag** Possible module types table*          org     $0mod_type  rmb     2          device control table addressmod_name  rmb     2          pointer to module name*MOD_SIZE  rmb     0** Device table structure*          org     0dev_addr  rmb     2          Device base addressdev_type  rmb     2          Device type tabledev_brbu  rmb     2          baudrate backup loc*DEV_SIZE  rmb     0          Size of device entry** Control structure for a device, indexed by fifo cmnd >>3* MUST match nwp_codes.h  and MAX_S_NUM !!!!*     ==>  wzsockdev.t   <==*          org     $0000D_func0   rmb     2          0  Bad CommandD_func1   rmb     2          1  S_OPEND_func2   rmb     2          2  S_CLOSED_func3   rmb     2          3  S_RQWRD_func4   rmb     2          4  S_SENDD_func5   rmb     2          5  S_RQRDD_func6   rmb     2          6  S_RECVD_func7   rmb     2          7  S_INTRPTD_func8   rmb     2          8  S_CONNECTD_func9   rmb     2          9  S_BINDD_funcA   rmb     2          10  S_LISTEND_funcB   rmb     2          11  S_ACCEPTD_funcC   rmb     2          12  S_DISCOND_funcD   rmb     2          13  S_SNDMACD_funcE   rmb     2          14  S_SNDKEPD_funcF   rmb     2          15  S_SPCL*D_func10  rmb     2          16 S_RRDFRMD_func11  rmb     2          17 S_RREADD_func12  rmb     2          18 S_WRQSTOD_func13  rmb     2          19 S_WSNDOD_func14  rmb     2       20 S_WSNDTMD_func15  rmb     2D_func16  rmb     2D_func17  rmb     2D_func18  rmb     2       24 S_RQSBLKD_func19  rmb     2       25 S_SNDBLKD_func1A  rmb     2       26 S_RQRBLKD_func1B  rmb     2       27 S_RDRBLKD_func1C  rmb     2       28D_func1D  rmb     2       29D_func1E  rmb     2       30D_func1F  rmb     2       31*D_inthan  rmb     2          14 Interrupt poller/handlerD_init    rmb     2          15 Device initializationD_test    rmb     2          16 Test for device present*D_END     rmb     0          End of common handlers