** all functions to access socket registers** socket register names and offsetsSNMR    equ     0SNCR    equ     1SNIR    equ     2SNSR    equ     3SNPORT0 equ     4SNPORT1 equ     5SNDHAR0 equ     6SNDHAR1 equ     7SNDHAR2 equ     8SNDHAR3 equ     9SNDHAR4 equ     10SNDHAR5 equ     11SNDIPR0 equ     12SNDIPR1 equ     13SNDIPR2 equ     14SNDIPR3 equ     15SNDPOR0 equ     16SNDPOR1 equ     17SNMSSR0 equ     18SNMSSR1 equ     19SNPROTO equ     20SNTOS   equ     21SNTTL   equ     22SNRBFSZ equ     30SNTBFSZ equ     31SNTXFR0 equ     32SNTXFR1 equ     33SNTXRP0 equ     34SNTXRP1 equ     35SNTXWP0 equ     36SNTXWP1 equ     37SNRXRZ0 equ     38SNRXRZ1 equ     39SNRXRP0 equ     40SNRXRP1 equ     41SNRXWP0 equ     42SNRXWP1 equ     43SNIMR   equ     44SNFRAG0 equ     45SNFRAG1 equ     46SNKATIM equ     47** all commands to access socket register set*** GSRMR, get byte from socket registers mode register* E=socket#* return byte in B*GSRMR   psh     d,x        jsr     tsk2rg        ldx     #SNMR        jsr     byterd        std     0,s        puls    d,x,pc** PSRMR, put byte B  to socket registers mode register* E=socket#*PSRMR   pshs    d,x        jsr     tsk2rg        ldx     #SNMR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRCR, get bytefrom socket registers command register* E=socket#* return byte in B*GSRCR   pshs    d,x        jsr     tsk2rg        ldx     #SNCR        jsr     byterd        std     0,s        puls    d,x,pc** PSRCR, put byte B in socket registers command register* E=socket#*PSRCR   pshs    d,x        jsr     tsk2rg        ldx     #SNCR        ldd     0,s        jsr     bytewr01      bsr     GSRCR        tstb        bne     01b             wait command to be consumed        stb     1,s             set return        puls    d,x,pc** GSRIR, get bytefrom socket registers interrupt register* E=socket#* return byte in B*GSRIR   pshs    d,x        jsr     tsk2rg        ldx     #SNIR        jsr     byterd        std     0,s        puls    d,x,pc** PSRIR, put byte B in socket registers interrupt register* E=socket#*PSRIR   pshs    d,x        jsr     tsk2rg        ldx     #SNIR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRSR, get bytefrom socket registers status register* E=socket#* return byte in B*GSRSR   pshs    d,x        jsr     tsk2rg        ldx     #SNSR        jsr     byterd        std     0,s        puls    d,x,pc** GSRPORT, get word from socket registers source port* E=socket#* return word in D*GSRPORT pshs    d,x        jsr     tsk2rg        ldx     #SNPORT0        jsr     wordrd        std     0,s        pul     d,x,pc** PSRPORT, put word D into socket registers source port* E=socket#*PSRPORT pshs    d,x        jsr     tsk2rg        ldx     #SNPORT0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GSRDHAR, get destination hardware address into [Y]* F=sockt#, Y=destination*GSRDHAR pshs    d,x        jsr     tsk2rg        ldx     #SNDHAR0        jsr     wordrd        std     0,y        ldx     #SNDHAR2        jsr     wordrd        std     2,y        ldx     #SNDHAR4        jsr     wordrd        std     4,y        puls    d,x,pc** PSRDHAR, put [Y] into destination hardware address* F=sockt#, Y=destination*PSRDHAR pshs    d,x        jsr     tsk2rg        ldx     #SNDHAR0        ldd     0,y        jsr     wordwr        ldx     #SNDHAR2        ldd     2,y        jsr     wordwr        ldx     #SNDHAR4        ldd     4,y        jsr     wordwr        puls    d,x,pc** GSRDIP. get destination IP address into [Y]* E=socket#*GSRDIP  pshs    d,x        jsr     tsk2rg        ldx     #SNDIPR0        jsr     wordrd        std     0,y        ldx     #SNDIPR2        jsr     wordrd        std     2,y        puls    d,x,pc** PSRDIP. put destination IP address into [Y]* E=socket#*PSRDIP  pshs    d,x        jsr     tsk2rg        ldx     #SNDIPR0        ldd     0,y        jsr     wordwr        ldx     #SNDIPR2        ldd     2,y        jsr     wordwr        puls    d,x,pc** GSRDPOR, get word from socket registers destination port* E=socket#* return word in D*GSRDPOR pshs    d,x        jsr     tsk2rg        ldx     #SNDPOR0        jsr     wordrd        std     0,s        pul     d,x,pc** PSRDPOR, put word D into socket registers destination port* E=socket#*PSRDPOR pshs    d,x        jsr     tsk2rg        ldx     #SNDPOR0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GSRMSS, get word from socket registers max segment size* E=socket#* return word in D*GSRMSS  pshs    d,x        jsr     tsk2rg        ldx     #SNMSSR0        jsr     wordrd        std     0,s        pul     d,x,pc** PSRMSS, put word D into socket registers maximum segment size* E=socket#*PSRMSS  pshs    d,x        jsr     tsk2rg        ldx     #SNMSSR0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GSRPROT, get byte from socket registers PROTOCOL* E=socket#* return byte in B*GSRPROT  pshs    d,x        jsr     tsk2rg        ldx     #SNPROTO        jsr     byterd        std     0,s        pul     d,x,pc** PSRPROT, put byte B into socket registers PROTOCOL* E=socket#*PSRPROT pshs    d,x        jsr     tsk2rg        ldx     #SNPROTO        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRTOS, get byte from socket registers TOS* E=socket#* return byte in B*GSRTOS  pshs    d,x        jsr     tsk2rg        ldx     #SNTOS        jsr     byterd        std     0,s        pul     d,x,pc** PSRTOS, put byte B into socket registers TOS* E=socket#*PSRTOS  pshs    d,x        jsr     tsk2rg        ldx     #SNTOS        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRTTL, get byte from socket registers TTL* E=socket#* return byte in B*GSRTTL  pshs    d,x        jsr     tsk2rg        ldx     #SNTTL        jsr     byterd        std     0,s        pul     d,x,pc** PSRTTL, put byte B into socket registers TTL* E=socket#*PSRTTL  pshs    d,x        jsr     tsk2rg        ldx     #SNTTL        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRRBFS, get byte from socket registers rec buf size* E=socket#* return byte in B*GSRRBFS pshs    d,x        jsr     tsk2rg        ldx     #SNRBFSZ        jsr     byterd        std     0,s        pul     d,x,pc** PSRTBFS, put byte B into socket registers rec buf size* E=socket#*PSRRBFS pshs    d,x        jsr     tsk2rg        ldx     #SNRBFSZ        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRTBFS, get byte from socket registers tx buf size* E=socket#* return byte in B*GSRTBFS pshs    d,x        jsr     tsk2rg        ldx     #SNTBFSZ        jsr     byterd        std     0,s        puls    d,x,pc** PSRTBFS, put byte B into socket registers tx buf size* E=socket#*PSRTBFS pshs    d,x        jsr     tsk2rg        ldx     #SNTBFSZ        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRTXFR, get word from socket registers TX free size* E=socket#* return word in D*GSRTXFR pshs    d,x        jsr     tsk2rg        ldx     #SNTXFR0     [R]        jsr     wordrd01      std     0,s        jsr     wordrd        cmpd    0,s          read more times and exit        bne     01b          when 2 reads are equal        puls     d,x,pc** GSRTXRP, get word from socket registers TX read pointer* E=socket#* return word in D*GSRTXRP pshs    d,x        jsr     tsk2rg        ldx     #SNTXRP0    [R]        jsr     wordrd01      std     0,s        jsr     wordrd        cmpd    0,s          read more times and exit        bne     01b          when 2 reads are equal        puls    d,x,pc** GSRTXWP, get word from socket registers TX write pointer* E=socket#* return word in D*GSRTXWP pshs    d,x        jsr     tsk2rg        ldx     #SNTXWP0    [RW]        jsr     wordrd        std     0,s        puls    d,x,pc** PSRTXWP, put word D into socket registers TX write pointer* E=socket#*PSRTXWP pshs    d,x        jsr     tsk2rg        ldx     #SNTXWP0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GSRRXRS, get word from socket registers RX received size* E=socket#* return word in D*GSRRXRS pshs    d,x        jsr     tsk2rg        ldx     #SNRXRZ0     [R]        jsr     wordrd01      std     0,s        jsr     wordrd        cmpd    0,s          read more times and exit        bne     01b          when 2 reads are equal        puls     d,x,pc** GSRRXRP, get word from socket registers RX read pointer* E=socket#* return word in D*GSRRXRP pshs    d,x        jsr     tsk2rg        ldx     #SNRXRP0     [RW]        jsr     wordrd        std     0,s        puls    d,x,pc** PSRRXRP, put word D into socket registers RX read pointer* E=socket#*PSRRXRP pshs    d,x        jsr     tsk2rg        ldx     #SNRXRP0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GSRRXWP, get word from socket registers RX write pointer* E=socket#* return word in D*GSRRXWP pshs    d,x        jsr     tsk2rg        ldx     #SNRXWP0     [R]        jsr     wordrd01      std     0,s        jsr     wordrd        cmpd    0,s          read more times and exit        bne     01b          when 2 reads are equal        puls    d,x,pc** GSRIMR, get byte from socket registers interrupt mask* E=socket#* return byte in B*GSRIMR  pshs    d,x        jsr     tsk2rg        ldx     #SNIMR        jsr     byterd        std     0,s        puls    d,x,pc** PSRIMS, put byte B into socket registers interrupt mask* E=socket#*PSRIMR  pshs    d,x        jsr     tsk2rg        ldx     #SNIMR        ldd     0,s        jsr     bytewr        puls    d,x,pc** GSRFRAG, get word from socket registers FRAG* E=socket#* return word in D*GSRFRAG pshs    d,x        jsr     tsk2rg        ldx     #SNFRAG0        jsr     wordrd        std     0,s        puls    d,x,pc** PSRGRAG, put word D into socket registers FRAG* E=socket#*PSRFRAG pshs    d,x        jsr     tsk2rg        ldx     #SNFRAG0        ldd     0,s        jsr     wordwr        puls    d,x,pc** GSRKATM, get byte from socket registers keep alive timer* E=socket#* return byte in B*GSKATM  pshs    d,x        jsr     tsk2rg        ldx     #SNKATIM        jsr     byterd        std     0,s        puls    d,x,pc** PSRKATM, put byte B into socket registers keep alive timer* E=socket#*PSRKATM pshs    d,x        jsr     tsk2rg        ldx     #SNKATIM        ldd     0,s        jsr     bytewr        puls    d,x,pc