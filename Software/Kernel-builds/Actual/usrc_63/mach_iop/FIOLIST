                                                               *                     * configuration file which determines the final                     * kernel drivers contents                     *                                          *                     * the next 3 devices are declared FIXED as /dev                     *                     * is set up for these already               0001  IDE       set    1         (*) IDE support                     * loopdrvr has major 1               0001  LOOP      set    1         (*) LOOP device                     * ram disk               0001  RAMDSK    set    1         (*)                                                               *                     * set 1 for ONLY console CPU09MON                     *               0000  NOACIA    set    0                     *               0001  IOP       set    1         IO Processor                     *                     **GPP     set     0                     *               0000  ROMDBG    set    0                     *                     * flpdrvr has own GPP type driver present maj 2                     *               0000  FLP       set    0         GPP/FLP                     *               0000  ECN       set    0                     *               0000  NET       set    0                     *               0000  SPI       set    0                     *               0000  UIO       set    0         user IO                     *               0000  VID       set    0         VIDEO driver                                          * debug for GPP via dbgio               0001  GPPDBG    set    1                                          * set here if debug acia is present               0000  DBGA      set    0         0=no debug acia, 1= debug acia present                                    0000  DBG       set    0                               opt    pag UniFLEX    Operating System (C)1     03:22:00  Sep 08, 2023   Page    1UniFLEX    Operating System (C)1     03:22:00  Sep 08, 2023   Page    2System     Parameters                                                                         *                     * System Parameters - adjust accordingly                     *                                    0003  DSKADS    equ    3         disk address size in bytes               000E  DIRSIZ    equ    14        directory entry size (name)               000C  SIGCNT    equ    12        number of system signals               000D  MAPSIZ    equ    13        file map size in fdn               1000  PAGSIZ    equ    4096      smallest allocated memory page               0200  BUFSIZ    equ    512       buffer size               0100  MAXPAG    equ    256       max 4K segments in mainframe               0100  PRCSIZ    equ    256       max size of terminal line               0100  SMAPSZ    equ    256       size of swap allocation area               0032  CFDN      equ    50        max in core fdns               0064  CDBLKS    equ    100       max in core disk blocks               0010  MAXPAGES  equ    16        Max 4K Pages in 64K               0009  RESTM     equ    9         max system residence time (ticks)               1000  MAXPIP    equ    4096      max data in a pipe (don't go over 5120!)               000A  DPLCNT    equ    10        data pool buffer count               0009  DPLSIZ    equ    9         data pool buffer size               0008  EXCSIZ    equ    8         size of exec name entry               0010  UNFILS    equ    16        max open files / user                     UniFLEX    Operating System (C)1     03:22:00  Sep 08, 2023   Page    3System     Parameters                                                                         * memory associated values                                    0000  SYSPAG    equ    $00       system page               0000  SYSLOC    equ    $00       system segment in system space               0001  STABPG    equ    $01       system table page               0005  SYSTXT    equ    $05       system text start               0009  DRVPAG    equ    $09       drivers segment               000B  USRLOC    equ    $0B       user segment in system space               000C  SBUF      equ    $0C       system buffer segment               000D  XBUF      equ    $0D       cross buffer segment               D000  XBUFFR    equ    XBUF<<12  cross buffer begin               C000  SBUFFR    equ    SBUF<<12  system buffer begin                     * check ust.h !               0F38  STKOFS    equ    $F38      offset to usp/sysstk               BF38  USERBL    equ    (USRLOC<<12)+STKOFS user block location               0E00  USTKO     equ    $E00      user stack offset in ublock               BF38  SYSSTK    equ    (USRLOC<<12)+STKOFS system stack per task               000F  SYSBLK    equ    $0F       system page 0                                    00F8  NONRAM    equ    $F8       pages F8 up to FF are NO RAM                                          * character definitions                                    0009  TABCH     equ    $9        tab character               0020  SPACE     equ    $20       space character               000A  NL        equ    $a        new line               000D  CR        equ    $d        carriage return               001B  HOLDC     equ    $1b       ESC - suspend output               0011  XONC      equ    $11       XON - restart output               0013  XOFFC     equ    $13       XOFFF - suspend output               001C  QUITC     equ    $1c       FS character               0003  INTRC     equ    $03       DEL character               0004  EOTCH     equ    $04       EOT character               007F  BSPCH     equ    $7f       back space character               0018  CNCLC     equ    $18       line cancel char                                          * Constants                                    0080  EBIT      equ    %10000000 entire state status bit (cc)               0001  CBIT      equ    %00000001 carry bit in cc (error bit)               0008  REGSIZ    equ    8         space: CC, D, X, PC, PB               FFFF  NODEV     equ    -1        no device specifier               0002  BADBFD    equ    2         fdn for .badblocks (should be!)                     UniFLEX    Operating System (C)1     03:22:01  Sep 08, 2023   Page    4System     Parameters                                                                         * Register offset to SP for parameters                                    0000  UCC       equ    0         condition codes               0001  UA        equ    1         a register               0002  UB        equ    2         b register               0003  UX        equ    3         x register               0005  UPC       equ    5         pc register               0007  UPB       equ    7         os call post byte               0001  UD        equ    UA        d register                                          * signals                                    0001  HANGS     equ    1         hangup signal               0002  INTS      equ    2         interrupt signal               0003  QUITS     equ    3         quit signal               0004  EMTS      equ    4         emt trap signal (swi)               0005  KILLS     equ    5         kill signal               0006  WPIPES    equ    6         illegal pipe write signal                     * SWTPC vii special               0007  FALTS     equ    7         memory fault               0008  EMT2S     equ    8         emt2 trap (swi2)                     * non SWTPC vii               0007  BARGS     equ    7         bad argument signal               0008  TRACS     equ    8         trace job signal                     *               0009  TIMES     equ    9         time limit signal               000A  ALARMS    equ    10        alarm signal               000B  TERMS     equ    11        termination interrupt               000C  USERS     equ    12        user defined interrupt                                                               * priorities                                    0078  SWAPPR    equ    120       swap task               0064  FDNPR     equ    100       fdn update               0050  NFDNPR    equ    80        fdn wait priority               0032  BUFPR     equ    50        block io task               001E  WBUFPR    equ    30        buffer wait               FFFB  PIPEPR    equ    -5        pipe i/o               FFFB  WMEMPR    equ    -5        wait memory               FFF6  TTYIPR    equ    -10       tty wait               FFEC  TTYOPR    equ    -20       tty wait output               FFD8  WAITPR    equ    -40       task wait               FFB0  SLEPPR    equ    -80       sleeping               FFA6  USERPR    equ    -90       max user priority                                          UniFLEX    Operating System (C)1     03:22:01  Sep 08, 2023   Page    5System     Parameters                                                                         * errors                                    0001  EIO       equ    1         io error               0002  EFAULT    equ    2         system fault               0003  EDTOF     equ    3         data section overflow               0004  ENDR      equ    4         not a directory               0005  EDFUL     equ    5         disk full               0006  ETMFL     equ    6         too many files               0007  EBADF     equ    7         bad file               0008  ENOFL     equ    8         no file               0009  EMSDR     equ    9         missing directory               000A  EPRM      equ    10        file permission               000B  EFLX      equ    11        file exists               000C  EBARG     equ    12        bad argument               000D  ESEEK     equ    13        seek error               000E  EXDEV     equ    14        crossed devices               000F  ENBLK     equ    15        not a block special file               0010  EBSY      equ    16        device is busy               0011  ENMNT     equ    17        file not mounted               0012  EBDEV     equ    18        bad device specified               0013  EARGC     equ    19        too many arguments               0014  EISDR     equ    20        file is a directory               0015  ENOTB     equ    21        file not binary               0016  EBBIG     equ    22        binary file too big               0017  ESTOF     equ    23        stack overflow               0018  ENCHD     equ    24        no children living               0019  ETMTS     equ    25        too mant tasks active               001A  EBDCL     equ    26        bad system call               001B  EINTR     equ    27        interrupted system call               001C  ENTSK     equ    28        no task found               001D  ENTTY     equ    29        not a tty               001E  EPIPE     equ    30        write to broken pipe               001F  ELOCK     equ    31        record locking error                     *               0020  ESOCK     equ    32        socket error                     *                     * detailed socket errors passed in hibyte of D on return                     * but ONLY if the primary error is ESOCK !!                     *                               opt    exp                               opt    lis                                                         0002  TRM_IOP   equ    NUM_TRM   decouple defined items form global namesu                                                    global fio_irq,fio_msg                               global TRM_IOP,FIO_FSZ                                          * keep this at zero if you share normal serial ports with IO_CPU ports               0000  ACT_COST  set    0         Activity cost for IO_CPU transaction  0000 00            fio_wait  fcb    0         Count of tasks waiting for FIO access (global)FIO Simulation Structure             03:22:03  Sep 08, 2023   Page    6FIO Routines                                                                                                       *                     * fio_irq - Process FIO interrupt, testing for INT already reset the IRQ                     *   Y - FIO Control structure                     *  0001 34   70       fio_irq   pshs   x,y,u  0003 EE   24                 ldu    fio_dba,y  0005 A6   43                 lda    fio_cpu2,u move transaction data (interrupt#)  0007 34   02                 pshs   a         -- Transaction specific value  0009 6F   E2                 clr    ,-s       ** Filler **  000B A6   41                 lda    fio_cpu1,u (terminal#)  000D 34   02                 pshs   a         -- Sequence #  000F A6   C4                 lda    fio_cpu,u (response)  0011 34   02                 pshs   a         -- Response code  0013 AE   28                 ldx    fio_dsz,y should work for all FIFO sizes  0015 30   1E                 leax   -2,x      point to fio_cpuF  0017                         addr   U,X       U + X > X  0017 1030                    fdb    $1030  0019 31                      fcb    U<<4|X                               endm  001A 6F   84                 clr    0,x       indicate message received                     *                     * stack contains resp code, seq#, fil, data, x ,y                     *  001C A6   E4                 lda    0,s       get response code  001E 81   07                 cmpa   #R_INTRPT  0020 26   17                 bne    10f                     *                     * handle INTERRUPT from tty, now bytes have different meaning                     * but only for a TTY device                     *  0022 E6   61       05        ldb    1,s       relative terminal #X 0024 BD   0000               jsr    find_dn   compute absolute terminal #X 0027 BE   0000               ldx    ttytab    compute TTY table addressX 002A 86   00                 lda    #TTYSIZ  002C 3D                      mul  002D 30   8B                 leax   d,x  002F 4F                      clra  0030 E6   63                 ldb    3,s       get interrupt codeX 0032 BD   0000               jsr    intrpt    send interrupt to this terminal  0035 32   64                 leas   4,s       clean up stack  0037 20   27                 bra    99f       exit                     *                     * 0,s - response code                     * 1,s - sequence #                     * 2,s  dummy                     * 3,s - transaction specific returned value                     *  0039 E6   2A       10        ldb    fio_mxtrn,y MAX_TRAN  003B 31   2D                 leay   fio_tran,y point to transaction list  003D 34   04                 pshs   bFIO Simulation Structure             03:22:03  Sep 08, 2023   Page    7FIO Routines                                          003F A6   62       15        lda    2,s       check transaction #  0041 27   04                 beq    16f       empty?  0043 A1   A4                 cmpa   tran_seq,y match?  0045 27   0A                 beq    20f       yes - go                     *  0047 31   28       16        leay   TRAN_SIZ,y next transaction  0049 6A   E4                 dec    0,s       any more?  004B 26   F2                 bne    15b                     * -- Unsolicited response!  004D 32   65                 leas   5,s       clean up stack  004F 20   0F                 bra    99f       exit                     *  0051 35   04       20        puls   b         clean up stack  0053 A6   E4                 lda    0,s       get response code  0055 A7   22                 sta    tran_resp,y save response code  0057 A6   63                 lda    3,s       get response value  0059 A7   23                 sta    tran_val,y  005B 32   64                 leas   4,s       clean up stackX 005D BD   0000               jsr    wakeup    wake up sender  0060 35   F0       99        puls   x,y,u,pc  return                                          *                     * fio_msg - Send a value via the FIO Mailbox & wait for response                     *   U - maj/min                     *   D - Value to send (B = Command, A = Specific data)                     *   Y - FIO control block                     *   jsr fio_msg                     *   D - Value returned (B = Error response, A = Specific data)                     *  0062 34   77       fio_msg   pshs   cc,d,x,y,u save registers                     * -- Find an empty transaction box  0064               10        seti   turn      off interrupts  0064 1A   50                 orcc   #FF|IF                               endm  0066 10AE 65                 ldy    5,s       get FIO control address+ 0069 BD   022D               jsr    MBX_lock  get access to FIO  006C 17   0160               lbsr   find_slot go find a slot  006F 27   17                 beq    15f       jump if one found                     *  0071 10AE 65                 ldy    5,s       restore FIO structure pointer+ 0074 BD   0261               jsr    MBX_unlock give up FIO until slot available  0077 17   0155               lbsr   find_slot make sure no slots available  007A 27   E8                 beq    10b       jump if there is one                     *  007C 10AE 65                 ldy    5,s       get FIO pointer  007F 31   2C                 leay   fio_tflg,y sleep on transaction slots  0081 C6   0F                 ldb    #FIOPRI+ 0083 BD   012C               jsr    Q_sleep   wait for available message slot  0086 20   DC                 bra    10b       try for a transaction slot                     *X 0088 F6   0001     15        ldb    utask+1   set sequence # in slot ???  008B CA   01                 orb    #1FIO Simulation Structure             03:22:03  Sep 08, 2023   Page    8FIO Routines                                          008D E7   A4                 stb    tran_seq,y  008F E6   E4                 ldb    0,s       enable (old) interrupts  0091 1F   9A                 tfr    b,cc  0093 34   20                 pshs   y         save transaction slot pointer  0095 E6   64                 ldb    4,s       restore message code (B)  0097 A6   63                 lda    3,s       restore specific data (A)  0099 1E   03                 exg    d,uX 009B B6   0001               lda    utask+1  009E 8A   01                 ora    #1        set sequence #  00A0 E7   26                 stb    tran_dev,y minor device  00A2 1E   03                 exg    d,u  00A4 A7   24                 sta    tran_oval,y (A)  00A6 E7   25                 stb    tran_msg,y (B)  00A8 10AE 67                 ldy    7,s       restore FIO structure pointer  00AB 17   0097               lbsr   fio_send+ 00AE BD   0261               jsr    MBX_unlock release mailbox                     *  00B1 35   20       20        puls   y         get transaction slot address  00B3                         seti   mask      interrupts  00B3 1A   50                 orcc   #FF|IF                               endm  00B5 6D   22                 tst    tran_resp,y any response yet?  00B7 26   48                 bne    30f       yes - go process                     *  00B9 AE   65                 ldx    5,s       get FIO control address  00BB EC   02                 ldd    fio_fifo,x does this task own the FIFO?  00BD 26   39                 bne    25f       yes - don't allow interrupts!                     *  00BF 34   60                 pshs   y,u       save registersX 00C1 FC   0000               ldd    umark1    set up to allow interruptable sleep  00C4 34   06                 pshs   d+ 00C6 8E   00DB               ldx    #27f      interrupt handling label  00C9 34   10                 pshs   xX 00CB 10FF 0000               sts    umark1  00CF C6   F6                 ldb    #TTYIPR   set interruptable priority+>00D1 BD   012F               jsr    A_sleep   wait for IO_CPU response  00D4 35   76                 puls   d,x,y,u   restore registersX 00D6 BF   0000               stx    umark1    restore interrupt point  00D9 20   26                 bra    30f       continue                     *  00DB 35   70       27        puls   x,y,u     Interrupt happened! - (D) already poppedX 00DD BF   0000               stx    umark1    restore stack mark  00E0 86   BF                 lda    #E_ABORT  aborted transaction!  00E2 A7   22                 sta    tran_resp,y  00E4 C6   70                 ldb    #O_INTRPT  00E6 34   20                 pshs   y         save transaction slot pointer  00E8 10AE 67                 ldy    7,s       restore FIO control pointer+ 00EB BD   022D               jsr    MBX_lock  get access to mailbox+>00EE BD   0145               jsr    fio_send+ 00F1 BD   0261               jsr    MBX_unlock release mailbox  00F4 35   20                 puls   y         restore transaction slot pointer  00F6 20   09                 bra    30fFIO Simulation Structure             03:22:04  Sep 08, 2023   Page    9FIO Routines                                                             *  00F8 C6   0F       25        ldb    #FIOPRI  00FA 34   70                 pshs   x,y,u     save registers+>00FC BD   012F               jsr    A_sleep  00FF 35   70                 puls   x,y,u     restore registers                     *X 0101 BE   0000     30        ldx    utask  0104                         seti   turn      off interrupts while fiddling with transaction slots  0104 1A   50                 orcc   #FF|IF                               endm                     * -- See if there is a response.  It is possible to                     * -- get here without one if an interrupt happened which                     * -- was being ignored.  In this case, the IO_CPU doesn't                     * -- need to be notified of any interrupt, but we must                     * -- wait for the IO_CPU response to actually arrive.  0106 E6   22                 ldb    tran_resp,y get response code  0108 26   04                 bne    35f       jump if response present                     *  010A 34   20                 pshs   y         reset stack  010C 20   A3                 bra    20b       wait for response                     *  010E 4F            35        clra             release transaction slot  010F A7   A4                 sta    tran_seq,y  0111 6F   22                 clr    tran_resp,y  0113 A6   23                 lda    tran_val,y get response value  0115 ED   61                 std    1,s       set return value (resp val,resp. code)  0117 10AE 65                 ldy    5,s       wake anybody waiting for this slot  011A 31   2C                 leay   fio_tflg,yX 011C BD   0000               jsr    wakeup  011F A6   62                 lda    2,s       interrupted transaction?  0121 81   BF                 cmpa   #E_ABORT  0123 26   05                 bne    50f       no - continue                     *X 0125 10FE 0000               lds    umark1    yes - get out  0129 39                      rts                     *  012A 35   F7       50        puls   cc,d,x,y,u,pc return                                                               *                     * generic FIO routines                     *                                          *                     * Q_sleep - Sleep until event with decreased activity                     *X 012C 7E   0000     Q_sleep   jmp    sleep                                          *                     * A_sleep - Sleep until event with no decrease in activity                     *X 012F BD   0000     A_sleep   jsr    sleep     wait for eventFIO Simulation Structure             03:22:04  Sep 08, 2023   Page   10FIO Routines                                          0132 34   12                 pshs   a,x       upgrade activityX 0134 BE   0000               ldx    utask  0137 A6   88 12              lda    tsact,x  013A 8B   00                 adda   #ACT_COST  013C 24   02                 bcc    00f                     *  013E 86   FF                 lda    #$FF                     *  0140 A7   88 12    00        sta    tsact,x  0143 35   92                 puls   a,x,pc                                                               *       if      ((IOP|UIO)=1)                                                    global fio_send,FIFO_get,FIFOgeta,FIFO_put,FIFOputa                               global MBX_lock,MBX_unlock,find_slot                               global get_F_S,FIFO_put,FIFO_get,FIFO_unlock                                          *                     * fio_send - Send a message via the FIO Mailbox                     *   Y - FIO control block                     *   B - Message code to send (one byte)                     *   A - Message specific data                     *   U - Sequence #/Terminal #                     *   bsr fio_send                     *  0145 34   57       fio_send  pshs   cc,d,x,u  save register  0147 EE   24                 ldu    fio_dba,y  0149                         seti   mask      interrupts!  0149 1A   50                 orcc   #FF|IF                               endm  014B                         LEDON  LB_FIO0  014B 71                      fcb    $71  014C 80                      fcb    LB_FIO0  014D F006                    fdb    LIGHTS                               endm  014F E7   45                 stb    cpu_fio,u set up mailbox value  0151 A7   48                 sta    cpu_fio2,u message specific data  0153 EC   65                 ldd    5,s       (old U) sequence #/terminal #  0155 A7   46                 sta    cpu_fio1,u  0157 E7   49                 stb    cpu_fio3,u  0159 86   FF                 lda    #$FF      tell IO_CPU mailbox full  015B AE   28                 ldx    fio_dsz,y  015D 30   19                 leax   -FIOTVSZ,x                     * X will be used where U can't  015F                         addr   X,U       X + U > U  015F 1030                    fdb    $1030  0161 13                      fcb    X<<4|U                               endm  0162 A7   46                 sta    cpu_fioF,u let the IO_CPU know it's there                     * LOOP until IO_CPU consumes malibox  0164 8E   FFFF     05        ldx    #$FFFF    time-out counterFIO Simulation Structure             03:22:04  Sep 08, 2023   Page   11FIO Routines                                          0167 A6   46       10        lda    cpu_fioF,u wait till value consumed  0169 27   06                 beq    20f       jump if consumed  016B 30   1F                 leax   -1,x      time-out yet?  016D 26   F8                 bne    10b  016F 20   F3                 bra    05b       try again  0171               20  0171                         LEDOFF LB_FIO0  0171 72                      fcb    $72  0172 7F                      fcb    255-LB_FIO0  0173 F006                    fdb    LIGHTS                               endm  0175 35   D7                 puls   cc,d,x,u,pc                                          *                     * FIFO_get - Fetch character from FIFO                     *   Y - FIO control block                     *   B - Character fetched                     *  0177 34   04       FIFOgeta  pshs   b  0179 8D   05                 bsr    FIFO_get  017B 35   02                 puls   a  017D 1E   89                 exg    a,b  017F 39                      rts                     *                     *   Y - FIO control block                     *-- Pointers in FIFO are relative to 0                     *  0180 34   71       FIFO_get  pshs   cc,x,y,u  0182                         seti   --        interrupts must be masked  0182 1A   50                 orcc   #FF|IF                               endm  0184 EE   24                 ldu    fio_dba,y point to hardware  0186 E6   4A                 ldb    fifo_cnt,u any data?  0188 27   1A                 beq    99f       no - exit                     *  018A 5A                      decb             yes - adjust count  018B E7   4A                 stb    fifo_cnt,u  018D AE   4B                 ldx    fifo_get,u get consumer pointer  018F 34   10                 pshs   x  0191                         addr   U,X       U+X => X  0191 1030                    fdb    $1030  0193 31                      fcb    U<<4|X                               endm  0194 E6   88 10              ldb    fifo,x    fetch byte  0197 35   10                 puls   x  0199 30   01                 leax   1,x       bump pointer  019B AC   26                 cmpx   fio_fsz,y end of fifo?  019D 25   03                 blo    10f                     *  019F 8E   0000               ldx    #0        reset pointer                     *  01A2 AF   4B       10        stx    fifo_get,uFIO Simulation Structure             03:22:04  Sep 08, 2023   Page   12FIO Routines                                                             *  01A4 35   F1       99        puls   cc,x,y,u,pc                                          *                     * FIFO_put - Place character into FIFO                     *   Y - FIO control block                     *   B - Character fetched                     *  01A6 34   04       FIFOputa  pshs   b  01A8 1F   89                 tfr    a,b  01AA 8D   02                 bsr    FIFO_put  01AC 35   84                 puls   b,pc                     *                     *   Y - FIO control block                     *  01AE 34   51       FIFO_put  pshs   cc,x,u  01B0                         seti   --        interrups must be masked  01B0 1A   50                 orcc   #FF|IF                               endm  01B2 EE   24                 ldu    fio_dba,y point to hardware  01B4 AE   4D                 ldx    fifo_put,u get consumer pointer  01B6 34   10                 pshs   x  01B8                         addr   U,X       U + X => X  01B8 1030                    fdb    $1030  01BA 31                      fcb    U<<4|X                               endm  01BB E7   88 10              stb    fifo,x    store byte  01BE 35   10                 puls   x  01C0 30   01                 leax   1,x       bump pointer  01C2 AC   26                 cmpx   fio_fsz,y end of fifo?  01C4 25   03                 blo    10f  01C6 8E   0000               ldx    #0        reset pointer                     *  01C9 AF   4D       10        stx    fifo_put,u  01CB 6C   4A                 inc    fifo_cnt,u update count                     *  01CD 35   D1       99        puls   cc,x,u,pc                                          *                     * find_slot - find a transaction slot                     *   Y - FIO control address                     *   jsr find_slot                     *   Y - Transaction slot                     *   <NE> if none available                     *  01CF 34   26       find_slot pshs   d,y       save register  01D1 E6   2A                 ldb    fio_mxtrn,y MAX_TRAN  01D3 31   2D                 leay   fio_tran,y point to transactions  01D5 5D                      tstb  01D6 34   04                 pshs   b  01D8 27   24                 beq    40f                     * look for OUR slot firstFIO Simulation Structure             03:22:05  Sep 08, 2023   Page   13FIO Routines                                        X 01DA B6   0001     10        lda    utask+1   check for busy entries  01DD 8A   01                 ora    #1  01DF A1   A4                 cmpa   tran_seq,y  01E1 27   1F                 beq    30f       yes - use it!  01E3 31   28                 leay   TRAN_SIZ,y  01E5 6A   E4                 dec    0,s       any more?  01E7 26   F1                 bne    10b                     *  01E9 10AE 63                 ldy    3,s       restore FIO pointer  01EC E6   2A                 ldb    fio_mxtrn,y MAX_TRAN  01EE 31   2D                 leay   fio_tran,y point to transactions  01F0 E7   E4                 stb    0,s  01F2 27   0A                 beq    40f                     * next search free slot  01F4 A6   A4       20        lda    tran_seq,y entry busy?  01F6 27   0A                 beq    30f       no - use it!  01F8 31   28                 leay   TRAN_SIZ,y  01FA 6A   E4                 dec    0,s       any more?  01FC 26   F6                 bne    20b                     *  01FE 86   01       40        lda    #1        return NE - no slot  0200 20   04                 bra    99f                     *  0202 10AF 63       30        sty    3,s       return slot  0205 4F                      clra             return EQ - slot found                     *  0206 32   61       99        leas   1,s       remove counter  0208 35   A6                 puls   d,y,pc    clean stack & return                                          *                     *  get_F_S - Allocate a transaction slot and the FIFO                     *    Y - FIO control                     *  020A 34   77       get_F_S   pshs   cc,d,x,y,u save registers  020C                         seti   mask      interrupts  020C 1A   50                 orcc   #FF|IF                               endm+>020E BD   01CF               jsr    find_slot allocate transaction slot  0211 27   0E                 beq    10f       jump if one found                     *  0213 10AE 65                 ldy    5,s       wait for slot  0216 31   2C                 leay   fio_tflg,y  0218 C6   0F                 ldb    #FIOPRI+ 021A BD   012C               jsr    Q_sleep  021D 35   77                 puls   cc,d,x,y,u restore registers  021F 20   E9                 bra    get_F_S   try again                     *X 0221 F6   0001     10        ldb    utask+1   "allocate" slot  0224 CA   01                 orb    #1  0226 E7   A4                 stb    tran_seq,y  0228 35   77                 puls   cc,d,x,y,u restore interrupts/registers+>022A 7E   0289               jmp    FIFO_lock lock FIO accessFIO Simulation Structure             03:22:05  Sep 08, 2023   Page   14FIO Routines                                                                                  *                     * MBX_lock - Lock the FIO interface                     *    Y - FIO Control address                     *  022D 34   77       MBX_lock  pshs   cc,d,x,y,u save registers  022F                         seti   mask      interrupts  022F 1A   50                 orcc   #FF|IF                               endmX 0231 BE   0000               ldx    utask     get task pointer  0234 EC   A4                 ldd    fio_mbx,y mailbox already locked?  0236 27   05                 beq    10f       no - go check FIFO                     *  0238 10A3 0A                 cmpd   tstid,x   locked by me?  023B 26   09                 bne    20f       no - must wait                     *  023D EC   22       10        ldd    fio_fifo,y FIFO locked?  023F 27   18                 beq    50f       no - go lock mailbox                     *  0241 10A3 0A                 cmpd   tstid,x   locked by me?  0244 27   13                 beq    50f       yes - still OK                     *+ 0246 7C   0000     20        inc    fio_wait  0249 C6   0F                 ldb    #FIOPRI  024B 34   20                 pshs   y         preserve register+ 024D BD   012C               jsr    Q_sleep   yes - sleep until available  0250 35   20                 puls   y         restore register+ 0252 7A   0000               dec    fio_wait  0255 35   77                 puls   cc,d,x,y,u restore environ  0257 20   D4                 bra    MBX_lock  try again                     *  0259 EC   0A       50        ldd    tstid,x   lock mailbox  025B ED   A4                 std    fio_mbx,y  025D 6F   2B                 clr    fio_ict,y no missed interrupts                     *  025F 35   F7       99        puls   cc,d,x,y,u,pc return                                          *                     * MBX_unlock - unlock the FIO interface                     *                     *    Y - FIO Control address                     *  0261 34   77       MBX_unlock pshs  cc,d,x,y,u  0263                         seti   turn      off interrupts  0263 1A   50                 orcc   #FF|IF                               endm  0265 A6   2B                 lda    fio_ict,y did we miss an interrupt?  0267 27   03                 beq    05f       no - continue                     *+ 0269 BD   0001               jsr    fio_irq   yes - pretend we're seeing it now!                     *  026C 6F   2B       05        clr    fio_ict,y reset flagFIO Simulation Structure             03:22:05  Sep 08, 2023   Page   15FIO Routines                                          026E CC   0000               ldd    #0  0271 ED   A4                 std    fio_mbx,y reset lockX 0273 BD   0000               jsr    wakeup    wake up anybody waiting on this FIO  0276 10AE 65                 ldy    5,s       restore pointer+ 0279 B6   0000               lda    fio_wait  was anybody waiting?  027C 27   09                 beq    10f       no - exitX 027E BE   0000               ldx    utask     reset priorityX 0281 BD   0000               jsr    fixpriX 0284 BD   0000               jsr    change    let somebody else run                     *  0287 35   F7       10        puls   cc,d,x,y,u,pc return                                          *                     * FIFO_lock - Lock the FIO FIFO buffer                     *    Y - FIO Control address                     *  0289 34   77       FIFO_lock pshs   cc,d,x,y,u save registers  028B                         seti   mask      interrupts  028B 1A   50                 orcc   #FF|IF                               endmX 028D BE   0000               ldx    utask     get task pointer  0290 EC   22                 ldd    fio_fifo,y FIFO locked?  0292 27   05                 beq    10f       no - go check mailbox                     *  0294 10A3 0A                 cmpd   tstid,x   locked by me?  0297 26   09                 bne    20f       no - must wait                     *  0299 EC   A4       10        ldd    fio_mbx,y mailbox already locked?  029B 27   18                 beq    50f       no - go lock FIFO                     *  029D 10A3 0A                 cmpd   tstid,x   locked by me?  02A0 27   13                 beq    50f       yes - still OK                     *  02A2 C6   0F       20        ldb    #FIOPRI+ 02A4 7C   0000               inc    fio_wait  mark somebody waiting  02A7 34   20                 pshs   y         save pointer+ 02A9 BD   012C               jsr    Q_sleep   yes - sleep until available  02AC 35   20                 puls   y         restore pointer+ 02AE 7A   0000               dec    fio_wait  02B1 35   77                 puls   cc,d,x,y,u restore environ  02B3 20   D4                 bra    FIFO_lock try again                     *  02B5 EC   0A       50        ldd    tstid,x   lock FIFO  02B7 ED   22                 std    fio_fifo,y                     *  02B9 35   F7       99        puls   cc,d,x,y,u,pc return                                          *                     * FIFO_unlock - unlock the FIO FIFO buffer                     *                     *    Y - FIO Control address                     *FIO Simulation Structure             03:22:06  Sep 08, 2023   Page   16FIO Routines                                          02BB 34   77       FIFO_unlock pshs cc,d,x,y,u  02BD                         seti   turn      off interrupts  02BD 1A   50                 orcc   #FF|IF                               endm  02BF CC   0000               ldd    #0  02C2 ED   22                 std    fio_fifo,y reset lockX 02C4 BD   0000               jsr    wakeup    wake up anybody waiting on this FIFO  02C7 10AE 65                 ldy    5,s       restore pointer+ 02CA B6   0000               lda    fio_wait  was anybody waiting?  02CD 27   09                 beq    10f       no - exitX 02CF BE   0000               ldx    utask     reset priorityX 02D2 BD   0000               jsr    fixpriX 02D5 BD   0000               jsr    change    let somebody else run                     *  02D8 35   F7       10        puls   cc,d,x,y,u,pc return                                                    end0 Error(s) detected     5 Excessive BRANCH/JUMP(S) detectedLength of Text Segment: 0000Length of Data Segment: 02DALength of Bss Segment:  0000FIO Simulation Structure             03:22:06  Sep 08, 2023   Page   17FIO Routines                                        Symbol Table:Absolute Symbols:A        0008   ACT_COST 0000   ALARMS   000A   B        0009   BADBFD   0002   BARGS    0007   BASACI   F000   BSPCH    007F   BUFPR    0032   BUFSIZ   0200   CBIT     0001   CC       000A   CDBLKS   0064   CFDN     0032   CHRLIM   00FE   CLKCON   0001   CLKLAT   F004   CLKMSK   0080   CLKSEL   F005   CLOCK    F004   CNCLC    0018   CPU2DEV  0004   CPUID    18A5   CPUTYP   0003   CR       000D   D        0000   DATBOX   F400   DBG      0000   DBGA     0000   DEV2CPU  0003   DIRSIZ   000E   DP       000B   DPLCNT   000A   DPLSIZ   0009   DRVPAG   0009   DSKADS   0003   E        000E   EARGC    0013   EBADF    0007   EBARG    000C   EBBIG    0016   EBDCL    001A   EBDEV    0012   EBIT     0080   EBSY     0010   ECN      0000   EDFUL    0005   EDTOF    0003   EFAULT   0002   EFLX     000B   EINTR    001B   EIO      0001   EISDR    0014   ELOCK    001F   EMSDR    0009   EMT2S    0008   EMTS     0004   ENBLK    000F   ENCHD    0018   ENDR     0004   ENMNT    0011   ENOFL    0008   ENOTB    0015   ENTSK    001C   ENTTY    001D   EOTCH    0004   EPIPE    001E   EPRM     000A   ESEEK    000D   ESOCK    0020   ESTOF    0017   ETMFL    0006   ETMTS    0019   EXCSIZ   0008   EXDEV    000E   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SOCKET 00C0   E_SYSBSY 0082   F        000F   FALTS    0007   FDNPR    0064   FF       0040   FIOPRI   000F   FIOTVSZ  0007   FIO_FSZ  0080   FIO_SIZE 000F   FIO_SMSZ 0100   FLP      0000   GPPDBG   0001   HANGS    0001   HOLDC    001B   HZTIM    0009   IDE      0001   IF       0010   INTRC    0003   INTS     0002   IOP      0001   IOP0BASE F200   IOPTDMIN 0009   IS       0003   IU       0002   IX       0000   IY       0001   KILLS    0005   LB_BLKIO 0008   LB_FIO0  0080   LB_IDLE  0001   LB_SWOUT 0004   LB_SWPIN 0002   LIGHTS   F006   LOOP     0001   MAPSIZ   000D   MAXJOB   0014   MAXPAG   0100   MAXPAGES 0010   MAXPIP   1000   MAX_TRAN 0018   NBLKS    0010   NET      0000   NFDNPR   0050   NL       000A   NOACIA   0000   NODEV    FFFF   NONRAM   00F8   NUM_CL   0001   NUM_NEC  0003   NUM_PPR  0004   NUM_TRM  0002   NUM_TSK  0000   OQHI     0077   OQLO     000F   O_CLOSE  0020   O_INTRPT 0070   O_OPEN   0010   O_PGETD  00A0   O_PSETD  00B0   O_RQRD   0050   O_RQWR   0030   O_SEND   0060   O_TTYG   00E0   O_TTYS   00D0   O_WRC    00F0   O_WRITE  0040   PAGSIZ   1000   PC       0005   PIPEPR   FFFB   PRCSIZ   0100   QUITC    001C   QUITS    0003   RAMDSK   0001   REGSIZ   0008   REJECT   0080   RESTM    0009   ROMDBG   0000   ROM_VERS 0020   R_CLOCK  000E   R_CLOSE  0002   R_INTRPT 0007   R_OPEN   0001   R_PDATA  0009   R_RD1C   000B   R_RDOK   0005   R_REQOK  0003   R_RESET  000D   R_SKOK   000A   R_SNDMC  0008   R_SNDNC  0006   R_TTY    000C   R_WRITE  0004   S        0004   SBUF     000C   SBUFFR   C000   SIGCNT   000C   SLEPPR   FFB0   SMAPSZ   0100   SPACE    0020   SPI      0000   SPI0BASE E000   SSIZE    0001   STABPG   0001   STKOFS   0F38   STKREG   000E   SWAPPR   0078   SYSBLK   000F   SYSLOC   0000   SYSPAG   0000   SYSSTK   BF38   SYSTXT   0005   S_ACCEPT 00B0   S_BIND   0090   S_CLOSE  0020   S_CONNEC 0080   S_DISCON 00C0   S_INTRPT 0070   S_LISTEN 00A0   S_OPEN   0010   S_RECV   0060   S_RQRD   0050   S_RQWR   0030   S_SEND   0040   S_SNDKEP 00E0   S_SNDMAC 00D0   S_SPCL   00F0   TABCH    0009   TARGX    0020   TCORE    0001   TCREAT   0004   TERMS    000B   TIMES    0009   TLOCK    0002   TNOMAP   0040   TRACS    0008   TRAN_SIZ 0008   TRM_IOP  0002   TRUN     0001   TSKSIZ   001D   TSLEEP   0002   TSWAPO   0010   TSYSTM   0004   FIO Simulation Structure             03:22:06  Sep 08, 2023   Page   18FIO Routines                                        TTERM    0005   TTRACE   0006   TTRACP   0008   TTYIPR   FFF6   TTYOPR   FFEC   TWAIT    0003   U        0003   UA       0001   UB       0002   UCC      0000   UD       0001   UIO      0000   UIO0BASE F300   UNFILS   0010   UPB      0007   UPC      0005   USERBL   BF38   USERPR   FFA6   USERS    000C   USRHIP   000F   USRHIP_4 00F0   USRHIP_F 00FC   USRLOC   000B   USTKO    0E00   UX       0003   V        0007   VID      0000   W        0006   WAITPR   FFD8   WBUFPR   001E   WMEMPR   FFFB   WPIPES   0006   X        0001   XBUF     000D   XBUFFR   D000   XOFFC    0013   XONC     0011   Y        0002   cpu_fio  0005   cpu_fio1 0006   cpu_fio2 0008   cpu_fio3 0009   cpu_fioF 0006   cuddwn   FE01   fifo     0010   fifo_cnt 000A   fifo_get 000B   fifo_put 000D   fio_cpu  0000   fio_cpu1 0001   fio_cpu2 0003   fio_cpu3 0004   fio_cpuF 0005   fio_dba  0004   fio_dsz  0008   fio_fifo 0002   fio_fsz  0006   fio_ict  000B   fio_mbx  0000   fio_mxtr 000A   fio_tflg 000C   fio_tran 000D   k_u_map  FE02   timctrl  F005   timdata  F004   tlatch   FE03   tran_dev 0006   tran_msg 0005   tran_ova 0004   tran_res 0002   tran_seq 0000   tran_val 0003   trpctrl  F007   trpdata  F006   tsact    0012   tsage    0013   tsalrm   001B   tsevnt   0014   tslink   0000   tsmode   0006   tsprb    0011   tsprir   0007   tssgnl   0010   tssize   001A   tsslnk   0002   tsstat   0005   tsswap   0018   tstext   0016   tstid    000A   tstidp   000C   tstty    000E   tsuid    0008   tsutop   0004   uisctr   FE00   Text Segment Symbols:     NoneData Segment Symbols:A_sleep  012F   FIFO_get 0180   FIFO_loc 0289   FIFO_put 01AE   FIFO_unl 02BB   FIFOgeta 0177   FIFOputa 01A6   MBX_lock 022D   MBX_unlo 0261   Q_sleep  012C   find_slo 01CF   fio_irq  0001   fio_msg  0062   fio_send 0145   fio_wait 0000   get_F_S  020A   Bss Segment Symbols:     NoneExternal Symbols:TTYSIZ   0000   change   0000   find_dn  0000   fixpri   0000   intrpt   0000   sleep    0000   ttytab   0000   umark1   0000   utask    0000   wakeup   0000   