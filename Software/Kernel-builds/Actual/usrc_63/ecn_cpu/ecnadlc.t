        sttl    ecoadlc************************************************************ send a Frame, X=end of buffer, Y=start of buffer* on return: X=last buffer loc, D=error status***********************************************************txFrame pshs    d,x,y        ldy     #MC6854        lda     #CR1_RRX         select CR2 and holds RX reset        sta     cr1_reg,y        disable RX ints        ldx     4,s             start of buffer* wait for xmit ready and reset ADLC         lda     #(CR2_RTS|CR2_CRX|CR2_FMI|CR2_PSE)         sta     cr2_reg,y02       lda     #(CR2_CRX|CR2_FMI|CR2_PSE)         sta     cr2_reg,y         lda     sr1_reg,y         bita    #SR1_TRA         bne     10f         bita    #SR1_IRQ|SR1_CTS         beq     02b* abort transmission        ldb     #(CR1_RTX|CR1_RRX|CR1_ACS)        stb     cr1_reg,y        ldb     #(CR4_TW1|CR4_TW2|CR4_RW1|CR4_RW2|CR4_ABT)        stb     cr4_reg,y        bra     04f           error*50      lda     sr1_reg,y      read SR1        bita    #SR1_TRA        bne     10f        bita    #SR1_IRQ|SR1_CTS        beq     50b* error exit04      sta     0,s        lda     #(CR1_RTX|CR1_RRX)        sta     cr1_reg,y        ldb     #$ff        stb     1,s        puls    d,x,y,pc     STATUS*10      lda     0,x+        sta     xmt_reg,y        cmpx    2,s        blo     50b* data finished, close up20      lda     #(CR2_CRX|CR2_TLD|CR2_FCT|CR2_PSE)        sta     cr2_reg,y     writeCR2        pshs    cc        sei        lda     #(CR1_TIE|CR1_RRX)        sta     cr1_reg,y     writeCR1*30      lda     sr1_reg,y        bita    #SR1_IRQ        beq     30b*        lda     #CR1_RRX     disable IRQ        sta     cr1_reg,y        puls    cc*        lda     sr1_reg,y   readSR1        bita    #!SR1_TRA     frame complete, errors?        bne     04b*        lda     #(CR1_RTX|CR1_RRX)        sta     cr1_reg,y     writeCR1        clr     1,s        puls    d,x,y,pc************************************************************ receive a frame, X=end of buffer, Y=start of buffer* on return, X=last buffer loc, D=error status***********************************************************rxFrame pshs    cc,d,x,y        ldy     #MC6854        lda     #CR1_RTX         select CR2 and holds TX reset        sta     cr1_reg,y        disable TX ints        ldx     5,s              buffer start* wait for data ready and reset ADLC        lda     #(CR2_CTX|CR2_CRX) reset status        sta     cr2_reg,y        empty FIFO02      lda     #(CR2_CTX)       reset status        sta     cr2_reg,y        empty FIFO        lda     extabt        bne     04f             external abort flag        lda     sr2_reg,y        bita    #(SR2_RDA|SR2_ADP) first data        bne     12f        bita    #SR2_DCD        beq     02b        bra     04f             error*50      lda     sr2_reg,y            wait for frame to end        bita    #(SR2_RDA|SR2_ADP)        bne     10f        bita    #SR2_FVL             valid frame?        bne     30f        bita    #(SR2_OVR|SR2_ERR|SR2_ABR|SR2_DCD)        beq     50b* error exit04      sta     1,s       save result A        lda     #(CR1_RRX|CR1_RTX)        sta     cr1_reg,y        stx     3,s             X        ldb     #$ff        stb     2,s             B        puls    cc,d,x,y,pc     STATUS* disable INT in tight loop12      sei*10      lda     rec_reg,y    get data        cmpx    3,s        bhs     11f          skip on buffer overflow        sta     0,x+         save in buffer11      bra     50b*30      lda     #(CR1_RRX|CR1_RTX)  receiver reset        sta     cr1_reg,y        clr     2,s        stx     3,s             return end        puls    cc,d,x,y,pc************************************************************ init econet hardware***********************************************************ecoini  ldx     #MC6854        lda     #(CR1_RRX|CR1_RTX|CR1_ACS)              reset RX, TX and select cr3/cr4        sta     cr1_reg,x        clra        sta     cr3_reg,x                               nothing set here        lda     #(CR4_TW1|CR4_TW2|CR4_RW1|CR4_RW2)        sta     cr4_reg,x                               8 bit        lda     #(CR1_RRX|CR1_RTX)        sta     cr1_reg,x                               reset TX, RX and select cr2        rts