 lib environment.h lib ../include/macdefs.h lib ../include/inttab.h lib ../include/sysdefs.h lib ../include/fio_dev.h lib ../include/fio.h data sttl Machine Dependent Routines pag name mach global clkinz,mchint,endinit** clkinz** Initialize system clock.*clkinz ldb #0 clear out lbolt counter stb lbolt lda stup set auto update counter sta tmtuct lda #1 select timer 1 sta timdata clra reset the clock sta timdata lda #$05 sta timctrl rts return** mchint** Initialize all hardware junk and try to find* the existing acias.  The ones that aren't there* need to have their mask bits cleared.*mchint       clr    strm     # terminals calculated here!       lda    cputyp    get cpu info from UniBUG       bita   #%01000000 is it 50 HZ?       beq   mchin1       sta    sphz     set 50 HZ flagmchin1mchin2       ldx    #inttab    point to int table       ldb    ,x+        pick up number of devices       pshs   bmchin3       ldd    indev,x    check device # for TTYxx  maj/min       cmpd   #$0100       bhs    0f         jump if not TTYxx*       inc    strm*0      lda    intype,x   get interrupt device type       cmpa   #0         ACIA?       bne    mchin4     no** Initialize ACIA port*       ldu    instat,x   get ACIA address       clr    2,u        baudrate latch       lda    #$43       set up reset code       sta    0,u        reset acia       pshs   d          delay       puls   d       lda    0,u        check response       beq    0f*       anda   #%11110011       beq    0f*9      clr    inmask,x   zero int mask*0      cmpu   scon       was this the system console       bne    1f         no - continue*       pshs   x          save registers       jsr    syscon     yes - go reinitialize console       puls   x          restore registers*1      lbra   mchin10    continue initialization** Initialize PIA port*mchin4 cmpa   #1         PIA?       bne    mchin5     no*       clr    inmask,x    zero int mask0      lbra   mchin10     continue initializationmchin5** Initialize 8274 port*       cmpa   #5          8274 port?       bne    mchin6      no*mchin6** Initialize NEC port*        cmpa     #3        NEC special        bne      mchin7**mchin7mchin10 leax     INTSIZ,x  bump to next entry        dec      0,s       end?        lbne     mchin3        puls     b         reset stack** before kernel starts to setup tables* modify strm so that the total is adjusted*        if      (IOP=1)        lda     #IOPTDMIN        sta     strm4iop*        pshs    x,y        ldy     #IOP0         base parms        ldx     fio_dsz,y        leax    -FIOTVSZ,x        ldy     fio_dba,y        addr    Y,X           Y + X -> X        adda    NUM_TRM,x        puls    x,y*        sta     strm       create right number of tables        endif* attempt to remove any possible IRQ from present boards        lda     $E3FE      remove interrupts        lda     $E7FE      from GPP type devices        lda     $EBFE        lda     $EFFE      if present*        lda     $F2FE      same for IOP        lda     $F3FE*        rts** 8274 configuration datacnfstr fcb $02,$14,$04,$4c,$03,$E1,$05,$ea,$01,$04,$10,$30,$28,$F8       fcb $82,$00,$84,$4c,$83,$E1,$85,$ea,$81,$04,$90,$30,$A8,$F8       fcb 0** end of machine initialisation* kernel has build all its tables* add here code for specific hardware that should be setup* before the kernel is fired up*endinit tst $f000  reset interrupts*** undo the strm change we did above*       if       (IOP=1)       lda      strm4iop       ldb      strm       sta      strm       stb      strm4iop  save value** If the IOP would support a Realtime clock* this is the moment to start it**      ldy      #IOP0*       ldu     iop_dba,y*       lda     iop_cpuF,u   reset IRQ*       ldd   #O_CLOCK   start IOP clock*       ldu     #0       sequence/terminal*       jsr     fio_send        endif** in case we use a 'debug' acia, which falls outside* the regular tty devices*   if     (DBG=1)    jsr debugini   endif** last duties before the kernel starts*        ldd     timdata        std     rndval          try to 'seed' the random numbers* arm the memory traps        pshs    cc        orcc    #$50        lda     #$05        sta     trpctrl          enable mem trap        lda     trpdata          remove relic        puls  cc,pc