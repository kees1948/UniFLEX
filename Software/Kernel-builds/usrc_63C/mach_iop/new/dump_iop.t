 ttl DUMP IOP Control Tables pagUniFLEX set 1 lib fio lib sysdef text define** dump_iop*   Read control tables from 'smem' into local storage*   Display formatted tables*dump_iop sys open,smem,0 std fd_smem sys ind,seek1 -- read iop_wait ldd fd_smem sys read,NUM_TRAN,1 ldd fd_smem sys ind,seek2 -- read control tables ldd fd_smem sys read,IOP0,IOP_SIZE+1 ldy #IOP0 jsr dump_IOP jsr Flush ldd #0 sys term** dump_IOP - Print IOP control info*   Y - IOP control structure*dump_IOP pshs d,x,y,u ldx #00f jsr Pdata ldx #01f jsr Pdata ldd iop_mbx,y jsr Phex2 ldx #02f jsr Pdata ldd iop_fifo,y jsr Phex2 ldx #07f jsr Pdata lda iop_wait jsr Phex leay iop_tran,y ldb NUM_TRAN pshs b ldx #03f jsr Pdata10 ldx #04f jsr Pdata tfr y,d jsr Phex2 ldb #5 jsr spaces lda tran_seq,y jsr Phex ldb #5 jsr spaces lda tran_msg,y jsr Phex ldb #5 jsr spaces lda tran_dev,y jsr Phex ldb #5 jsr spaces lda tran_oval,y jsr Phex ldb #5 jsr spaces lda tran_resp,y jsr Phex leay TRAN_SIZ,y dec 0,s bne 10b puls b clean up stack99 puls d,x,y,u,pc return00 fcc $d,'IOP Control:',001 fcc $d,'   Mailbox lock = ',002 fcc $d,'   FIFO lock    = ',007 fcc $d,'   Waiting      = ',003 fcc $d,'   Slot    Seq #  Msg    Dev    Val    Resp'   fcc $d,'   ====    ===    ===    ===    ===    ====',004 fcc $d,'   ',005 fcc '   ',006 fcc '         ',0*spaces pshs d10 lda #$20 jsr Pchar dec b bne 10b puls d,pc** Pdata - Print a string*   X - string address*Pdata pshs d,x10 lda ,x+ beq 90f jsr Pchar bra 10b90 puls d,x,pc** Phex2 - Print a value in hex*   D - value to print*Phex2 pshs d jsr Phex tfr b,a jsr Phex puls d,pc** Phex - Print a value in hex*   A - value to print*Phex pshs d,x pshs a lsra lsra lsra lsra jsr Pnib puls a anda #$0F jsr Pnib puls d,x,pc*Pnib ldx #00f leax a,x lda 0,x jsr Pchar rts*00 fcc '0123456789ABCDEF'** Pchar - Print a character*   A - character to print*Pchar pshs d,x ldx obuf_ptr cmpx #OBUF_END blo 10f jsr Flush ldx #OBUF10 sta ,x+ stx obuf_ptr puls d,x,pc** Flush - Flush output buffer*Flush pshs d,x ldd obuf_ptr subd #OBUF std obuf_size ldd #1 sys ind,write1 puls d,x,pc datasmem fcc '/dev/smem',0fd_smem fdb 0*seek1 fcb seek fdb 0,$9F39  -- Location of iop_wait fdb 0*seek2 fcb seek fdb 0,$8F78  -- Location of IOP0 fdb 0*obuf_ptr fdb OBUF*write1 fcb write fdb OBUFobuf_size fdb 0 bssiop_wait rmb 1IOP0 rmb IOP_SIZENUM_TRAN rmb 1*OBUF rmb 512OBUF_END rmb 0 end dump_iop