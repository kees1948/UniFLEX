  0000                         absSWTPc      Intelligent I/O Proce     11:49:23  Jun 16, 2021   Page    1Hardware   Definitions                                                                                                                  *       lib ../include/sysdefs.h                               opt    lisSWTPc      Intelligent I/O Proce     11:49:24  Jun 16, 2021   Page    2Device     Table Structure                                                                    *                     * Possible module types table                     *                       0000                         org    $0  0000               mod_type  rmb    2         device control table address  0002               mod_name  rmb    2         pointer to module name                     *  0004               MOD_SIZE  rmb    0                                                               *                     * Device table structure                     *                       0000                         org    0  0000               dev_addr  rmb    2         Device base address  0002               dev_type  rmb    2         Device type table  0004               dev_brbu  rmb    2         baudrate backup loc                     *  0006               DEV_SIZE  rmb    0         Size of device entry                                          *                     * Control structure for a device                     *                       0000                         org    $0000  0000                         rmb    2         0  0002               D_OPEN    rmb    2         1  0004               D_CLOSE   rmb    2         2  0006               D_TTYS    rmb    2         3  0008               D_TTYG    rmb    2         4  000A               D_RQWR    rmb    2         5  000C               D_WRITE   rmb    2         6  000E               D_WRC     rmb    2         7  0010               D_RQRD    rmb    2         8  0012               D_SEND    rmb    2         9  0014               D_INTRPT  rmb    2         A  0016               D_GETD    rmb    2         B  0018               D_SETD    rmb    2         C  001A                         rmb    2         D  001C                         rmb    2         E  001E               D_CLOCK   rmb    2         F  0020               D_inthan  rmb    2         10 Interrupt poller/handler  0022               D_init    rmb    2         11 Device initialization  0024               D_test    rmb    2         12 Test for device present                     *  0026               D_END     rmb    0         End of common handlers                                          *                     * TTY Specific device routinesSWTPc      Intelligent I/O Proce     11:49:24  Jun 16, 2021   Page    3Device     Table Structure                                               *  0026                         org    D_END  0026               D_ttconf  rmb    2  0028               D_ttputc  rmb    2  002A               D_ttgetc  rmb    2  002C               D_ttenxr  rmb    2  002E               D_ttdisx  rmb    2  0030               D_ttenr   rmb    2  0032               D_ttenx   rmb    2  0034               D_ttenno  rmb    2  0036               D_ttxbsy  rmb    2  0038               D_tttstx  rmb    2  003A               D_ttiscts rmb    2  003C               D_tttstr  rmb    2  003E               D_tttstb  rmb    2  0040               D_tttsts  rmb    2  0042               D_tttstc  rmb    2  0044               D_tttstd  rmb    2  0046               D_tttste  rmb    2  0048               D_ttend   rmb    2  004A               D_ttwcts  rmb    2  004C               D_ttwdcd  rmb    2                     SWTPc      Intelligent I/O Proce     11:49:24  Jun 16, 2021   Page    4IOP        Memory Layout                                                 *                     * Basic Memory Layout                     *               0400  RAMorg    equ    $0400     28K of RAM - Thru $6FFF               6FFF  RAMend    equ    $6FFF               7000  RAMscratch equ   $7000     4K of scratchpad RAM               7F00  RAMscrend equ    $7F00               7FFF  ROMstack  equ    $7FFF     High end of ROM Stack               E000  ROMLOorg  equ    $E000     8K of ROM - $E000-$FFFF               C000  DEBUGROM  equ    $C000     8K of Debug ROM $C000-$DFFF               FFF0  CPUtraps  equ    $FFF0     CPU Trap Vectors                                          *                     * layout of hardware, up to 6 IO boards                     *               8000  BASE_SLOT equ    $8000     Base address for I/O slots               0010  NEXT_SLOT equ    $0010     Offest between slots                                          * clock hardware               8070  CLOCK     equ    $8070     hardware clock, status and control               8071  CLOCKI    equ    $8071     interrupt resetTask       Structure                 11:49:24  Jun 16, 2021   Page    5IOP        Memory Layout                                                 *                     * Task Table                     *                       0000                         org    0                                          * struct task                                    006C  USTSIZ    equ    108       User Stack Size (big enough??)                     *  0000               tslink    rmb    2         list link of running tasks  0002               tsslnk    rmb    2         list link of sleeping tasks  0004               tsstat    rmb    1         * see below *  0005               tsprir    rmb    1         priority - negative is low  0006               tsevnt    rmb    2         event task is waiting on  0008               tsdev     rmb    1         Terminal task is servicing  0009               tssgnl    rmb    1         Signal waiting for task  000A               tscmd     rmb    1         Saved mailbox command  000B               tsseq     rmb    2         Saved message sequence #  000D               tstval    rmb    1         Saved transaction value  000E               usp       rmb    2         Saved User Stack Pointer  0010               umark0    rmb    2         Stack Frame Markers  0012               umark1    rmb    2  0014                         rmb    USTSIZ    space for per/process stack                                    0080  TSKSIZ    equ    *         task structure size                     * stat codes                                    0001  TRUN      equ    1         running               0002  TSLEEP    equ    2         sleep with high priority               0003  TWAIT     equ    3         sleep with low priority               0004  TFREE     equ    4         task is free (uncommitted)               0005  TSYS      equ    5         system taskTask       Structure                 11:49:25  Jun 16, 2021   Page    6Variable   Space                                                           0400                         org    RAMorg                       0400               sys_vars  rmb    0         -- start of system variables                                          * Configuration "constants"  0400               OBUF_SIZE rmb    2         Size of TTY Output Queues  0402               OQHI      rmb    2         Output Queue High-water mark  0404               OQLO      rmb    2         Output Queue Low-water mark  0406               slot_tbl  rmb    2*SR4_SLOTS slot configuration***  Undefined symbol***  Undefined in pass 1                       0406               DB_iflg   rmb    1         Debug terminal initialized  0407               DB_cntrl  rmb    2         Debug control flags                     *  0409               runlst    rmb    2         Pointer to active tasks  040B               slplst    rmb    4         Pointer to waiting tasks  040F               utask     rmb    2         Currently executing task  0411               jobpri    rmb    1         Current job priority (for scheduling)  0412               chproc    rmb    1         Set if must switch users of CPU (reschedule)  0413               cfreel    rmb    2         Pointer to first free Clist buffer  0415               cbufct    rmb    1         Count of Clist buffers in use  0416               lcbuf     rmb    1         Limit on Clist buffers  0417               idle      rmb    1         idle loop flag for scheduler  0418               TI_Q      rmb    2*MAX_TI  Max Terminal Interrupts  042C               TI_Q_ptr  rmb    2         current Q pointer  042E               FIO_lock  rmb    1         FIO in use lock  042F               int_buf   rmb    4         Current Message in  0433               int_ptr   rmb    2         Message in pointer  0435               clock_tick rmb   1         Clock tick counter  0436               prcbuf    rmb    PRCSIZ    buffer for erase and kill                       0536               hstbuf    rmb    HRECSIZ*MAXHIST***  Undefined symbol***  Syntax error***  Undefined in pass 1  0536               hstptr    rmb    2         next "put" pointer in history queue                                          * Pointers to system tables - configuration dependent  0538               CLISTS    rmb    2         Space for Clists  053A               TTYTABS   rmb    2         Terminal tables  053C               TTYQS     rmb    2         TTY Input Queue Headers  053E               OBUFRS    rmb    2         TTY Output Queues  0540               tsktab    rmb    2         Task Control Tables  0542               tskend    rmb    2         End of task table  0544               PPstr     rmb    2         Pointer to parallel device tables  0546               NECstr    rmb    2         Pointer to NEC device tables  0548               dev_tab   rmb    DEV_SIZE*MAX_DEV system configuration table  0596               NEC_IQ    rmb    2         Pointer to NEC input queue  0598               NECADR    rmb    2         Address of NEC printer                     *Task       Structure                 11:49:25  Jun 16, 2021   Page    7Variable   Space                                      059A               brbutb    rmb    MAX_TTY/2 baudrate latch backup table                     *  05A0               SYS_TABS  rmb    0         Start of dynamic system tables                                    6FFF  end_vars  equ    RAMend    End of System Variables                     *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the top locations hold the Interrupt handshake registers                     *                                    0001  MAXECN    equ    1         number of network ports                                                         E400  ECN0BASE  equ    $E400     kernel memory                                                         0210  ECN_FSZ   equ    512+16    data exchange  buffer                                    0400  ECN_SMSZ  equ    1024      size of shared memory               0400  DPR_SMSZ  equ    ECN_SMSZFIO Simulation Structure             11:49:25  Jun 16, 2021   Page    8Variable   Space                                                                              *                     * is now performed by CY7C130 dual port RAM where (1024 * 8)                     * the RAM size is limited to the (upper) 256 bytes, which                     * contains the Interrupt handshake locations                     *                     *                       0000                         org    $0000     -- Shared Dual Port RAM                                          ************************************************************  0000               fio_cpu   rmb    1         FIO -> CPU Mailbox cell  0001               fio_cpu1  rmb    1         -- Additional cell  0002               fio_cpu2  rmb    1         --  0003               fio_cpu3  rmb    1         --  0004               fio_cpu4  rmb    1  0005               fio_cpu5  rmb    1  0006               fio_cpu6  rmb    1  0007               fio_cpu7  rmb    1                     ************************************************************  0008               cpu_fio   rmb    1         CPU -> FIO Mailbox cell          message code  0009               cpu_fio1  rmb    1         -- Additional cell    sequence #  000A               cpu_fio2  rmb    1         --                    message specific data  000B               cpu_fio3  rmb    1         --                    terminal #  000C               cpu_fio4  rmb    1  000D               cpu_fio5  rmb    1  000E               cpu_fio6  rmb    1  000F               cpu_fio7  rmb    1                     ************************************************************  0010               fifo_cnt  rmb    1         Count of data in FIFO  0011               fifo_get  rmb    2         FIFO consumer pointer  0013               fifo_put  rmb    2         FIFO producre pointer  0015                         rmb    32-(*-fio_cpu) ** Filler **                       0020               fifo      rmb    1                     *                     * the  address of the top variables is calculated                     * from the total device size down-wards                     *                     * define filler  0021                         rmb    DPR_SMSZ-7-fifo (FIOTVSZ)!  Shared Dual Port RAM                     * FIO Configuration constants  03FA               NUM_TSK   rmb    1         Number of tasks  03FB               NUM_CL    rmb    1         Number of CLISTS  03FC               NUM_TRM   rmb    1         Number of terminals              initialized from FIO                     *               03FD  DEV2CPU   equ    *         debug data from IOP/GPP  03FD               NUM_NEC   rmb    1         Number of NEC/Qume printers               03FE  CPU2DEV   equ    *         debug data to IOP/GPP  03FE               NUM_PPR   rmb    1         Number of parallel printers                     * should end up at the two top locations in the DUALPORT RAM  03FF               fio_cpuF  rmb    1         INT + non-zero   contains info AND set CPU IRQ when writtenFIO Simulation Structure             11:49:25  Jun 16, 2021   Page    9Variable   Space                                      0400               cpu_fioF  rmb    1         INT + non-zero   contains info AND set FIO IRQ when written                     **************************************************************               0401  FIOTVSZ   equ    *         top variables size                                          *                     * IOP ROM Version #                     *               0012  ROM_VERSION equ  $12       Major/Minor Version of IOP ROM                                          *                     * Error codes                     *               0080  REJECT    equ    %10000000 Error/Reject bit in command response               0081  E_BADCMD  equ    REJECT+$01 Illegal command               0082  E_SYSBSY  equ    REJECT+$02 IOP saturated               0083  E_NTOPEN  equ    REJECT+$03 Selected device not open               0084  E_BADDEV  equ    REJECT+$04 Illegal device # (=3)               0085  E_DEVBSY  equ    REJECT+$05 Device is already open (exclusieve)               0086  E_IOERR   equ    REJECT+$06 Some osrt of IO error               00BE  E_INTRPT  equ    REJECT+$3E Terminal interrupt (send by IOP to UniFLEX)               00BF  E_ABORT   equ    REJECT+$3F Transaction aborted by UniFLEX (not sent by IOP)                                          *                     * Normal responses                     *               0001  R_RESET   equ    $01       System reset & functioning               0002  R_OPEN    equ    $02       Device open successful               0003  R_CLOSE   equ    $03       Device close successful               0004  R_REQOK   equ    $04       Write request now granted               0005  R_WRITE   equ    $05       Write data complete               0006  R_TTY     equ    $06       TTYSET/GET complete               0007  R_RDOK    equ    $07       Read data now available               0008  R_SNDNC   equ    $08       Read data in FIFO & no more data is available               0009  R_RD1C    equ    $09       Single character available               000A  R_INTRPT  equ    $0A       Interrupt complete               000B  R_SNDMC   equ    $0B       Read data in FIFO & there is more available               000C  R_CLOCK   equ    $0C       Interval Timer Tick               000D  R_PDATA   equ    $0D       port data transaction succes                                          *                     * Request codes (from Main CPU) is index in DEV_XXXX table at IOP                     *               0010  O_OPEN    equ    $10       Open device               0020  O_CLOSE   equ    $20       Close device               0030  O_TTYS    equ    $30       TTY Set               0040  O_TTYG    equ    $40       TTY Get               0050  O_RQWR    equ    $50       Request write               0060  O_WRITE   equ    $60       Write data               0070  O_WRC     equ    $70       Write single character               0080  O_RQRD    equ    $80       Request read data               0090  O_SEND    equ    $90       Send data for read               00A0  O_INTRPT  equ    $A0       Interrupt all tasks on a terminalFIO Simulation Structure             11:49:26  Jun 16, 2021   Page   10Variable   Space                                                   00B0  O_PGETD   equ    $B0       Read baudrate settings               00C0  O_PSETD   equ    $C0       Write baudrate settings                                          *                                          FIO Simulation Structure             11:49:26  Jun 16, 2021   Page   11CPU        Vectors                                                         FFF0                         org    CPUtraps                       FFF0 E0A0                    fdb    rom_trap  Unused  FFF2 E099                    fdb    rom_swi3  SWI3  FFF4 E092                    fdb    rom_swi2  SWI2  FFF6 E085                    fdb    rom_firq  FIRQ  FFF8 E4B1                    fdb    IRQ_han   IRQ  FFFA E08C                    fdb    rom_swi   SWI  FFFC E07F                    fdb    rom_nmi   NMI  FFFE E05A                    fdb    rom_init  Reset                     FIO Simulation Structure             11:49:26  Jun 16, 2021   Page   12System     RESET Code                                                      E000                         org    ROMLOorg                       E000 0D 49 4F 50   DBmsg00   fcc    $d,'IOP ROM',0  E009 0D 53 79 73   DBmsg01   fcc    $d,'System Initialization Complete',0  E029 0D 43 50 55   DBmsg02   fcc    $d,'CPU RESET Complete',0  E03D 0D 0D 53 79   CPU_down  fcc    $d,$d,'System CPU not functioning',0                                          *                     * System RESET code                     *  E05A 10CE 7FFF     rom_init  lds    #ROMstack initialize stack pointer  E05E                         ldmd   3                       E061 8E   0000               ldx    #0        clear all of RAM, including FIFO  E064 CC   0000               ldd    #0  E067 ED   81       10        std    ,x++  E069 8C   6FFF               cmpx   #end_vars  E06C 25   F9                 blo    10b                                           >E06E 17   0050     20        lbsr   stbinit   go initialize system memory                                            E071 10FE 0540     30        lds    tsktab    Task 0 Stack  E075 32   E9 0080            leas   TSKSIZ,s  E079 17   02CD               lbsr   fio_reset                                          *                     * Initialization complete - Start executing commands                     *  E07C               fio_start                     *         ldb     #ROM_VERSION                     *         stb     fio_cpu1                     *         ldb     #R_RESET   send "system reset & running" message                     *         lbsr    fio_msg                                            E07C 7E   E59D     10        jmp    rsched                     FIO Simulation Structure             11:49:26  Jun 16, 2021   Page   13ROM        Interrupt Fielders                                              E07F 8D   26       rom_nmi   bsr    rom_int  E081 4E 4D 49 00             fcc    'NMI',0  E085 8D   20       rom_firq  bsr    rom_int  E087 46 49 52 51             fcc    'FIRQ',0  E08C 8D   19       rom_swi   bsr    rom_int  E08E 53 57 49 00             fcc    'SWI',0  E092 8D   13       rom_swi2  bsr    rom_int  E094 53 57 49 32             fcc    'SWI2',0  E099 8D   0C       rom_swi3  bsr    rom_int  E09B 53 57 49 33             fcc    'SWI3',0  E0A0 8D   05       rom_trap  bsr    rom_int  E0A2 54 52 41 50             fcc    'TRAP',0                       E0A7 8E   E0B4     rom_int   ldx    #ROM_ERR  E0AA BD   0000               jsr    DB_pdata***  Undefined symbol  E0AD 35   10                 puls   x  E0AF BD   0000               jsr    DB_pdata***  Undefined symbol  E0B2 20   FE       rom_bad   bra    *                     *  E0B4 0D 52 4F 4D   ROM_ERR   fcc    $d,'ROM Error: ',0FIO Simulation Structure             11:49:26  Jun 16, 2021   Page   14Table      Initialization                                                                                                               *                     * stbinit - Initialize System Memory Tables                     *  E0C1 8E   0400     stbinit   ldx    #sys_vars clear all variables  E0C4 CC   0000               ldd    #0  E0C7 ED   81       10        std    ,x++  E0C9 8C   6FFF               cmpx   #end_vars done yet?  E0CC 25   F9                 blo    10b  E0CE CC   0D04               ldd    #DEBUG  E0D1 FD   0407               std    DB_cntrl >E0D4 17   001F               lbsr   set_tables go figure out configuration, tables, etc                                          ***+++                     * Initialize history queue  E0D7 8E   0536               ldx    #hstbuf  E0DA BF   0536               stx    hstptr                     ***---                                          ***+++                     ***---                                          * Initialize Terminal Interrupt Queue  E0DD 8E   0418     15        ldx    #TI_Q     set queue empty  E0E0 BF   042C               stx    TI_Q_ptr  E0E3 8E   042F               ldx    #int_buf  reset message in pointer  E0E6 BF   0433               stx    int_ptr  E0E9 17   0168               lbsr   clinit    initialize Clists                                          ***+++                     ***---                       E0EC 17   018B     16        lbsr   ttyinit   initialize TTY tables                                          ***+++                     ***---                       E0EF 17   01F3     17        lbsr   tskinit   initialize tasks                                          ***+++                     ***---                      >E0F2 17   0000     18        lbsr   DB_config display configuration***  Undefined symbol  E0F5 39                      rts                                                                                    *                     * Set up system tablesFIO Simulation Structure             11:49:27  Jun 16, 2021   Page   15Table      Initialization                                                *  E0F6               set_tables                                          ***+++                     ***---                                          * -- Force in the on-board PIA                     *09        ldd     #PIA_SLOT                     *          jsr     [D_test+DEV_L2]                     * -- Force in the TOD interface                     *          ldy     #dev_tab+((MAX_DEV-1)*DEV_SIZE)                     *          ldx     #DEV_TOD                     *          stx     dev_type,y                                                               * Compute configuration  E0F6 86   00                 lda    #SR4_SLOTS***  Undefined symbol  E0F8 34   02                 pshs   a  E0FA CC   8000               ldd    #BASE_SLOT set port address  E0FD 8E   0406               ldx    #slot_tbl  E100 34   10                 pshs   x  E102 CE   E23F     10        ldu    #no_dev  E105 EF   84                 stu    0,x  E107 CE   E33A               ldu    #mod_tbl  tables with module refs  E10A AE   C4       12        ldx    mod_type,u  E10C 27   0D                 beq    20f       jump if end of module table  E10E AD   98 24              jsr    [D_test,x] check for device  E111 25   04                 bcs    15f       jump if found  E113 33   44                 leau   MOD_SIZE,u  E115 20   F3                 bra    12b  E117 AE   42       15        ldx    mod_name,u  E119 AF   F4                 stx    [0,s]  E11B C3   0010     20        addd   #NEXT_SLOT advance address  E11E AE   E4                 ldx    0,s       update slot table pointer  E120 30   02                 leax   2,x  E122 AF   E4                 stx    0,s  E124 6A   62                 dec    2,s       any more slots  E126 26   DA                 bne    10b  E128 35   12                 puls   a,x                     * -- All done setting up configuration                                          ***+++                     ***---                                          * Set up constants based on configuration  E12A 86   7C       22        lda    #MAX_CL  E12C B7   03FB               sta    NUM_CL                     *                     *         lda     #MAX_TSK  E12F 86   00                 lda    #MAX_TRAN reserve for system tasks***  Undefined symbolFIO Simulation Structure             11:49:27  Jun 16, 2021   Page   16Table      Initialization                             E131 8B   04                 adda   #4  E133 B7   03FA               sta    NUM_TSK                     *  E136 CC   0400               ldd    #MAX_OB  E139 FD   0400               std    OBUF_SIZE                     * Now figure out where system tables go, based on configuration  E13C FC   0400     30        ldd    OBUF_SIZE  E13F 83   000A               subd   #10  E142 FD   0402               std    OQHI  E145 83   0000               subd   #(FIFO_SIZE+5)***  Undefined symbol***  Syntax error  E148 FD   0404               std    OQLO  E14B CC   05A0               ldd    #SYS_TABS start of system tables                     * -- Round up to CBSIZE boundary  E14E C3   0000               addd   #CBSIZE-1***  Undefined symbol***  Syntax error  E151 C4   00                 andb   #!(CBSIZE-1)***  Undefined symbol***  Syntax error  E153 1F   03                 tfr    d,u                     * -- CLISTS  E155 86   00                 lda    #CBSIZE***  Undefined symbol  E157 F6   03FB               ldb    NUM_CL  E15A 3D                      mul  E15B FF   0538               stu    CLISTS  E15E 17   00E5               lbsr   sto_chk   check for system table space overflow >E161 1025 0052               lbcs   40f       jump if it happens                     * -- TTY Control tables  E165 86   00                 lda    #TTYSIZ***  Undefined symbol  E167 F6   03FC               ldb    NUM_TRM  E16A 3D                      mul  E16B FF   053A               stu    TTYTABS   point to tty table  E16E 17   00D5               lbsr   sto_chk   check for system table space overflow  E171 25   44                 bcs    40f       jump if it happens                     * -- TTY Queue headers  E173 86   00                 lda    #2*QH_SIZE***  Undefined symbol  E175 F6   03FC               ldb    NUM_TRM  E178 3D                      mul  E179 FF   053C               stu    TTYQS  E17C 17   00C7               lbsr   sto_chk   check for system table space overflow  E17F 25   36                 bcs    40f       jump if it happens  E181 86   00                 lda    #OQH_SIZE***  Undefined symbol  E183 F6   03FC               ldb    NUM_TRM  E186 3D                      mul  E187 17   00BC               lbsr   sto_chk   check for system table space overflow  E18A 25   2B                 bcs    40f       jump if it happensFIO Simulation Structure             11:49:27  Jun 16, 2021   Page   17Table      Initialization                                                * -- TTY Output Queues  E18C 4F                      clra  E18D F6   03FC               ldb    NUM_TRM  E190 1F   01                 tfr    d,x  E192 CC   0000               ldd    #0  E195 F3   0400     10        addd   OBUF_SIZE  E198 30   1F                 leax   -1,x  E19A 26   F9                 bne    10b  E19C FF   053E               stu    OBUFRS  E19F 17   00A4               lbsr   sto_chk   check for system table space overflow  E1A2 25   13                 bcs    40f       jump if it happens                     * -- Task table  E1A4 86   80                 lda    #TSKSIZ  E1A6 F6   03FA               ldb    NUM_TSK  E1A9 3D                      mul  E1AA FF   0540               stu    tsktab  E1AD 17   0096               lbsr   sto_chk   check for system table space overflow  E1B0 25   05                 bcs    40f       jump if it happens  E1B2 FF   0542               stu    tskend                     *  E1B5 20   57                 bra    60f                     * -- System table space has overflowed!                     * -- Try adjusting some parameters to get it under control  E1B7 FC   0400     40        ldd    OBUF_SIZE first step, reduce output buffer size  E1BA 83   0020               subd   #32  E1BD FD   0400               std    OBUF_SIZE  E1C0 1083 0120               cmpd   #MIN_OB  E1C4 2C   45                 bge    50f       jump if still something left  E1C6 CC   0400               ldd    #MAX_OB   start over & try something else  E1C9 FD   0400               std    OBUF_SIZE  E1CC B6   03FA               lda    NUM_TSK   try reducing # tasks  E1CF 80   01                 suba   #1  E1D1 B7   03FA               sta    NUM_TSK  E1D4 F6   03FC               ldb    NUM_TRM  E1D7 FB   03FE               addb   NUM_PPR  E1DA FB   03FD               addb   NUM_NEC  E1DD CB   03                 addb   #3  E1DF 34   04                 pshs   b  E1E1 A1   E0                 cmpa   ,s+  E1E3 2C   26                 bge    50f  E1E5 86   28                 lda    #MAX_TSK  E1E7 B7   03FA               sta    NUM_TSK  E1EA B6   03FB               lda    NUM_CL    crank back on # clists  E1ED 80   01                 suba   #1  E1EF B7   03FB               sta    NUM_CL  E1F2 B1   03FC               cmpa   NUM_TRM  E1F5 2C   14                 bge    50f  E1F7 C6   7C                 ldb    #MAX_CL  E1F9 F7   03FB               stb    NUM_CL  E1FC 8E   E228               ldx    #00f  E1FF BD   0000               jsr    DB_pdata***  Undefined symbolFIO Simulation Structure             11:49:28  Jun 16, 2021   Page   18Table      Initialization                             E202 BD   0000               jsr    DB_config***  Undefined symbol  E205 BD   0000               jsr    DB_main***  Undefined symbol  E208 7E   E05A               jmp    rom_init  ... what else can I do???  E20B 16   FF2E     50        lbra   30b       go try it all again                     *-- Initialize devices  E20E CE   0548     60        ldu    #dev_tab                                            E211 5F            62        clrb  E212 34   04       70        pshs   b  E214 AE   C4                 ldx    dev_addr,u get device address  E216 27   06                 beq    75f       jump if none there  E218 10AE 42                 ldy    dev_type,u get device kind                                            E21B AD   B8 22              jsr    [D_init,y] go initialize device  E21E 33   46       75        leau   DEV_SIZE,u  E220 35   04                 puls   b  E222 5C                      incb  E223 C1   0C                 cmpb   #MAX_DEV-1  E225 26   EB                 bne    70b                     * -- All done  E227 39            90        rts                     *  E228 0D 2E 2E 2E   00        fcc    $d,"...Can't size tables!",0                     *  E23F 2E 2E 4E 6F   no_dev    fcc    '..None',0                                                                                                         *                     * Allocate some system table space                     *   D - Space being consumed                     *   U - Current end of table space                     *   jsr sto_chk (System Table Overflow check)                     *   <CS> if overflow                     *  E246 33   CB       sto_chk   leau   d,u       compute new end pointer  E248 1183 6FFF               cmpu   #end_vars overflow?  E24C 22   03                 bhi    10f       yes - return error  E24E 1C   FE                 clc              no         - return OK  E250 39                      rts  E251 1A   01       10        sec              ..         bad owies  E253 39                      rts                                          *                     * clinit                     *                     * Initialize character buffer lists.  This routineFIO Simulation Structure             11:49:28  Jun 16, 2021   Page   19Table      Initialization                                                * is only called once at startup time.                     *                       E254 BE   0538     clinit    ldx    CLISTS    point to clist  E257 F6   03FB               ldb    NUM_CL    set count  E25A BF   0413               stx    cfreel    set head pointer  E25D 31   89 0000  clini2    leay   CBSIZE,x***  Undefined symbol  E261 10AF 84                 sty    0,x       set fwd link  E264 1F   21                 tfr    y,x       advance to next  E266 5A                      decb  E267 26   F4                 bne    clini2  E269 B6   03FB               lda    NUM_CL    get buffer count  E26C 80   02                 suba   #2  E26E B7   0416               sta    lcbuf     set max count  E271 4F                      clra             make       d=0  E272 ED   89 0000            std    -CBSIZE,x clear last link***  Undefined symbol  E276 7F   0415               clr    cbufct  E279 39                      rts              all        done!                                          *                     * ttyinit                     *                     * Init the tty tables and queues.                     *                       E27A 10BE 053C     ttyinit   ldy    TTYQS     point to q tables  E27E 6F   E2                 clr    ,-s       terminal # counter  E280 F6   03FC               ldb    NUM_TRM   get terminal count  E283 34   04                 pshs   b  E285 FE   053E               ldu    OBUFRS    output buffer  E288 BE   053A               ldx    TTYTABS   point to TTY Tables  E28B 10AF 89 0000  10        sty    tqin,x    set input q***  Undefined symbol  E290 31   A9 0000            leay   QH_SIZE,y get next q***  Undefined symbol  E294 10AF 89 0000            sty    tqproc,x  set pr q***  Undefined symbol  E299 31   A9 0000            leay   QH_SIZE,y set next q***  Undefined symbol  E29D 10AF 89 0000            sty    tqout,x   set output q***  Undefined symbol  E2A2 EF   A9 0000            stu    oq_buf,y  ** Init output Q *****  Undefined symbol  E2A6 EF   A9 0000            stu    oq_get,y***  Undefined symbol  E2AA EF   A9 0000            stu    oq_put,y***  Undefined symbol  E2AE FC   0400               ldd    OBUF_SIZE  E2B1 33   CB                 leau   d,u  E2B3 EF   A9 0000            stu    oq_end,yFIO Simulation Structure             11:49:28  Jun 16, 2021   Page   20Table      Initialization                           ***  Undefined symbol  E2B7 31   A9 0000            leay   OQH_SIZE,y get next q***  Undefined symbol  E2BB 86   00                 lda    #AC_SET   #%101<<2   8 bits, no parity, 1 stop bit***  Undefined symbol  E2BD A7   89 0000            sta    tbaud,x   set conf word***  Undefined symbol  E2C1 A6   61                 lda    1,s       get terminal #  E2C3 A7   89 0000            sta    tdevic,x  set in table***  Undefined symbol  E2C7 34   46                 pshs   d,u  E2C9 C6   06                 ldb    #DEV_SIZE  E2CB 3D                      mul  E2CC CE   0548               ldu    #dev_tab  E2CF 33   CB                 leau   d,u  E2D1 EC   C4                 ldd    dev_addr,u -- device address  E2D3 ED   89 0000            std    taddr,x***  Undefined symbol  E2D7 35   46                 puls   d,u  E2D9 6C   61                 inc    1,s       bump terminal #  E2DB 30   89 0000            leax   TTYSIZ,x  next tty entry***  Undefined symbol  E2DF 6A   E4                 dec    0,s       dec the count  E2E1 26   A8                 bne    10b       repeat?  E2E3 35   86                 puls   d,pc      clean up stack & return                                          *                     * tskinit - Initialize all tasks                     *  E2E5 BE   0540     tskinit   ldx    tsktab  E2E8 BF   040F               stx    utask  E2EB F6   03FA               ldb    NUM_TSK   # tasks in system  E2EE 34   04                 pshs   b  E2F0 10BE 0540               ldy    tsktab    task 1  E2F4 31   A9 0080            leay   TSKSIZ,y  E2F8               10                                            E2F8 86   04       11        lda    #TFREE    mark all tasks free  E2FA BC   0540               cmpx   tsktab    is this the system task?  E2FD 26   02                 bne    15f  E2FF 86   05                 lda    #TSYS     the system task is never free  E301 A7   04       15        sta    tsstat,x  E303 86   FF                 lda    #$FF      not associated with a terminal  E305 A7   08                 sta    tsdev,x  E307 33   89 0080            leau   TSKSIZ,x  initialize stack  E30B CC   E437               ldd    #IO_han  E30E 34   20                 pshs   y  E310 AC   E1                 cmpx   ,s++      task 1?  E312 26   03                 bne    20f       no - normal I/O handling task  E314 CC   0000               ldd    #TI_HAN   yes - special terminal interrupt handling task***  Undefined symbolFIO Simulation Structure             11:49:28  Jun 16, 2021   Page   21Table      Initialization                             E317 36   06       20        pshu   d  E319 EF   0E                 stu    usp,x  E31B EF   88 10              stu    umark0,x  E31E 30   89 0080            leax   TSKSIZ,x  E322 6A   E4                 dec    0,s       done?  E324 26   D2                 bne    10b  E326 32   61                 leas   1,s       clean up stack  E328 CC   0000               ldd    #0        nothing running or sleeping  E32B FD   0409               std    runlst  E32E FD   040B               std    slplst  E331 FD   040D               std    slplst+tsslnk  E334 30   A4                 leax   0,y       start interrupt handling task  E336 BD   E643               jsr    makrdy  E339 39                      rts                     FIO Simulation Structure             11:49:29  Jun 16, 2021   Page   22IOP        Configuration                                                                      *                     * define which type of boards are present                     *               E33A  mod_tbl   equ    *  E33A 0000 E340               fdb    DEV_6850,SR4_name***  Undefined symbol  E33E 0000                    fdb    0                     *  E340 43 50 55 30   SR4_name  fcc    'CPU09SR4',0FIO Simulation Structure             11:49:29  Jun 16, 2021   Page   23FIO        Simulation Routines                                                                *                     * Reset CPU-IOP Interface                     *  E349               fio_reset  E349 8E   0000               ldx    #fio_cpu  clear control structure                     *  E34C 6F   80       00        clr    ,x+  E34E 8C   0020               cmpx   #fifo  E351 26   F9                 bne    00b                     *  E353 8E   0000               ldx    #0  E356 9F   11                 stx    fifo_get  set Q pointers  E358 9F   13                 stx    fifo_put                     *#        lda     #$99       tell CPU I'm ready                     *#        sta     fio_cpuF  E35A CE   0400               ldu    #1024     -- Reset Time-Out value                     *  E35D C6   FF       fio_wait  ldb    #255      Spin counter                     *  E35F               00  E35F 7D   03FF               tst    fio_cpuF  E362 27   16                 beq    10f                     *  E364 5A                      decb  E365 26   F8                 bne    00b       jump back if not ready                     *  E367 33   5F                 leau   -1,u  E369 1183 0000               cmpu   #0  E36D 26   EE                 bne    fio_wait  E36F 8E   E03D               ldx    #CPU_down >E372 17   0000               lbsr   DB_pdata***  Undefined symbol >E375 17   0000               lbsr   DB_main***  Undefined symbol  E378 20   CF                 bra    fio_reset  E37A 39            10        rts                                          *                     * fio_msg - Send a message via the FIO Mailbox                     *   B - Message code to send (one byte)                     *   fio_cpu1..3 already set up                     *                                          ***+++                     ***---                                            E37B 34   14       fio_msg   pshs   b,x       save register  E37D D7   00                 stb    fio_cpu   set up mailbox value                                          ***+++FIO Simulation Structure             11:49:29  Jun 16, 2021   Page   24FIO        Simulation Routines                                           ***---                       E37F 86   FF       5         lda    #$FF      tell CPU mailbox full  E381 B7   03FF               sta    fio_cpuF  E384 8E   FFFF     05        ldx    #$FFFF    time-out counter                     *  E387 B6   03FF     10        lda    fio_cpuF  wait till value consumed  E38A 27   14                 beq    20f       jump if consumed                     *  E38C 30   1F                 leax   -1,x      time-out yet?  E38E 26   F7                 bne    10b                     *  E390 8E   E3A2               ldx    #00f  E393 BD   0000               jsr    DB_pdata***  Undefined symbol  E396 A6   E4                 lda    0,s  E398 BD   0000               jsr    DB_phex***  Undefined symbol >E39B 17   0000               lbsr   DB_main***  Undefined symbol  E39E 20   E4                 bra    05b       try again                     *  E3A0 35   94       20        puls   b,x,pc                     *  E3A2 0D 46 49 4F   00        fcc    $d,'FIO Time-out, Value = $',0                                          *                     * fio_response - Return a response code/sequence #                     *    B - Response code                     *    A - Transaction specific value                     *  E3BB 34   16       fio_response pshs d,x  E3BD 8D   12                 bsr    FIO_get   access FIO  E3BF BE   040F               ldx    utask  E3C2 A6   0B                 lda    tsseq,x  E3C4 97   01                 sta    fio_cpu1  E3C6 A6   E4                 lda    0,s       get transaction specific value  E3C8 97   02                 sta    fio_cpu2 >E3CA BD   E37B               jsr    fio_msg  E3CD 8D   17                 bsr    FIO_rel   release FIO  E3CF 35   96                 puls   d,x,pc    return                                          *                     * FIO_get - Get access to FIO device                     * -- Sleep till available                     *  E3D1 34   76       FIO_get   pshs   d,x,y,u   save registers  E3D3 108E 042E     10        ldy    #FIO_lock is the device locked  E3D7 6D   A4                 tst    0,y  E3D9 27   07                 beq    20f       no - go get it                     *  E3DB C6   CE                 ldb    #FIOPRI   waiting for the FIOFIO Simulation Structure             11:49:29  Jun 16, 2021   Page   25FIO        Simulation Routines                        E3DD BD   E67D               jsr    sleep  E3E0 20   F1                 bra    10b       try again                     *  E3E2 6C   A4       20        inc    0,y       mark in use  E3E4 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIO_rel - Release access to FIO                     *  E3E6 34   76       FIO_rel   pshs   d,x,y,u  E3E8 108E 042E               ldy    #FIO_lock  E3EC 6F   A4                 clr    0,y  E3EE BD   E659               jsr    wakeup  E3F1 35   F6                 puls   d,x,y,u,pc return                                          *                     * FIFO_get - Fetch character from FIFO                     *   B - Character fetched                     *  E3F3 34   04       FIFOgeta  pshs   b  E3F5 8D   05                 bsr    FIFO_get  E3F7 35   02                 puls   a  E3F9 1E   89                 exg    a,b  E3FB 39                      rts                     *  E3FC 34   10       FIFO_get  pshs   x  E3FE D6   10                 ldb    fifo_cnt  any data?  E400 27   14                 beq    99f       no - exit                     *  E402 5A                      decb             yes        - adjust count  E403 D7   10                 stb    fifo_cnt  E405 9E   11                 ldx    fifo_get  get consumer pointer  E407 E6   88 20              ldb    fifo,x    fetch byte  E40A 30   01                 leax   1,x       bump pointer  E40C 8C   0000               cmpx   #FIFO_SIZE end of fifo?***  Undefined symbol  E40F 26   03                 bne    10f                     *  E411 8E   0000               ldx    #0        reset pointer                     *  E414 9F   11       10        stx    fifo_get                     *  E416 35   90       99        puls   x,pc                                          *                     * FIFO_put - Place character into FIFO                     *   B - Character fetched                     *  E418 34   04       FIFOputa  pshs   b  E41A 1F   89                 tfr    a,b  E41C 8D   02                 bsr    FIFO_put  E41E 35   84                 puls   b,pcFIO Simulation Structure             11:49:29  Jun 16, 2021   Page   26FIO        Simulation Routines                                           *  E420 34   10       FIFO_put  pshs   x  E422 9E   13                 ldx    fifo_put  get consumer pointer  E424 E7   88 20              stb    fifo,x    store byte  E427 30   01                 leax   1,x       bump pointer  E429 8C   0000               cmpx   #FIFO_SIZE end of FIFO?***  Undefined symbol  E42C 26   03                 bne    10f                     *  E42E 8E   0000               ldx    #0        reset pointer  E431 9F   13       10        stx    fifo_put                     *  E433 0C   10                 inc    fifo_cnt  update count  E435 35   90       99        puls   x,pcFIO Simulation Structure             11:49:30  Jun 16, 2021   Page   27IO         Command Handler                                                                    *                     * IO_han - I/O Command Handler                     *   This routine comprises the main processing loop                     * for each task in the system.  Whenever an I/O command                     * is detected (via the message interrupt), a task will                     * be scheduled to process it.  This is that task.                     *   The command is saved in the "tscmd" field of the                     * task control block.                     *                                          ***+++                     ***---                                            E437               IO_han    clri   allow     interrupts  E439 BE   040F               ldx    utask     get task control block address  E43C A6   0A                 lda    tscmd,x   get I/O command                                          ***+++                     ***---                                          *                     * The command byte is shifted and used as an index                     * in a DEV_XXXX tab                     *  E43E 44            10        lsra             isolate    command  E43F 44                      lsra  E440 44                      lsra  E441 44                      lsra  E442 E6   08                 ldb    tsdev,x   get device #  E444 C1   0D                 cmpb   #MAX_DEV  check for legal device #  E446 25   04                 blo    10f       jump if OK                     *  E448 C6   84                 ldb    #E_BADDEV return illegal device error  E44A 20   23                 bra    20f       exit                     *  E44C 48            10        lsla             --   word index on command  E44D 8E   0548               ldx    #dev_tab  E450 34   06                 pshs   d  E452 86   06                 lda    #DEV_SIZE  E454 3D                      mul  E455 30   8B                 leax   d,x  E457 AE   02                 ldx    dev_type,x get handler table address  E459 35   06                 puls   d  E45B 10AE 86                 ldy    a,x       get processor address  E45E 4F                      clra                     *  E45F 8E   E472     10        ldx    #IO_end   interrupt handler address  E462 34   10                 pshs   x  E464 BE   040F               ldx    utask  E467 10EF 88 12              sts    umark1,xFIO Simulation Structure             11:49:30  Jun 16, 2021   Page   28IO         Command Handler                                               *                     * CALL HANDLER: X=utask, Y=handler address, U=                     *  E46B AD   A4                 jsr    0,y       perform operation & return status  E46D 32   62                 leas   2,s       clean up stack                     *  E46F BD   E3BB     20        jsr    fio_response                     *  E472               IO_end    seti   mask      interrupts  E474 BE   040F               ldx    utask     restore task control block address  E477 A7   0D                 sta    tstval,x  remember transaction value sent  E479 E7   0A                 stb    tscmd,x   and command response  E47B 86   04                 lda    #TFREE    mark task "terminated & free"  E47D A7   04                 sta    tsstat,x  E47F 86   FF                 lda    #$FF      disassociate from any terminal  E481 A7   08                 sta    tsdev,x  E483 6F   09                 clr    tssgnl,x  no waiting signals  E485 BD   E59D               jsr    rsched    run other tasks >E488 16   FFAC               lbra   IO_han                                          *                     * Illegal command                     *  E48B               bad_cmd  E48B C6   81                 ldb    #E_BADCMD error code  E48D 39                      rtsFIO Simulation Structure             11:49:30  Jun 16, 2021   Page   29Device     Table for Illegal Device                                        E48E               DEV_BAD     E48E E4AE                    fdb    bad_dev   0  E490 E4AE                    fdb    bad_dev   1  E492 E4AE                    fdb    bad_dev   2  E494 E4AE                    fdb    bad_dev   3  E496 E4AE                    fdb    bad_dev   4  E498 E4AE                    fdb    bad_dev   5  E49A E4AE                    fdb    bad_dev   6  E49C E4AE                    fdb    bad_dev   7  E49E E4AE                    fdb    bad_dev   8  E4A0 E4AE                    fdb    bad_dev   9  E4A2 E4AE                    fdb    bad_dev   A  E4A4 E4AE                    fdb    bad_dev   B  E4A6 E4AE                    fdb    bad_dev   C  E4A8 E4AE                    fdb    bad_dev   D  E4AA E4AE                    fdb    bad_dev   E  E4AC E4AE                    fdb    bad_dev   F                                          *  E4AE C6   84       bad_dev   ldb    #E_BADDEV  E4B0 39                      rtsFIO Simulation Structure             11:49:30  Jun 16, 2021   Page   30Interrupt  Processing                                                                         *                     * This routine handles all IRQ interrupts                     *                                          ***+++                     ***---                                          *  E4B1               IRQ_han                     *-- Check for clock interrupt                     *          lda     #%10000000 get clock mask                     *          bita    CLOCK      check clock int                     *          beq     00f        no - try something else                     *                     *          sta     CLOCKI     reset interrupt                     *          jsr     clkint     go process interrupt                     *          lbra    99f        exit                     *  E4B1 CE   0548     00        ldu    #dev_tab  scan devices  E4B4 CC   0000               ldd    #0        start with device 0                     *  E4B7 AE   C4       10        ldx    dev_addr,u get device address  E4B9 27   0A                 beq    20f       jump if none there                     *  E4BB 10AE 42                 ldy    dev_type,u get device type                                          ***+++                     ***---                       E4BE AD   B8 20    15        jsr    [D_inthan,y] call interrupt poller/handler  E4C1 1025 0092               lbcs   99f       exit if interrupt serviced                     *  E4C5 C3   0001     20        addd   #1        next device  E4C8 33   46                 leau   DEV_SIZE,u  E4CA 1083 000D               cmpd   #MAX_DEV  any more devices?  E4CE 25   E7                 blo    10b                     * Check for FIO Mailbox interrupt  E4D0 B6   0400               lda    cpu_fioF  see if mailbox interrupt  E4D3 27   7A                 beq    50f       no - move on                                          ***+++  E4D5 BD   0000               jsr    H_cpu     record transaction in history Queue***  Undefined symbol                     ***---                                          ***+++                     ***---                       E4D8 BE   0433     25        ldx    int_ptr   input message pointer  E4DB 96   08                 lda    cpu_fio   move message  E4DD A7   80                 sta    ,x+FIO Simulation Structure             11:49:30  Jun 16, 2021   Page   31Interrupt  Processing                                 E4DF 96   09                 lda    cpu_fio1  E4E1 A7   80                 sta    ,x+  E4E3 96   0A                 lda    cpu_fio2  E4E5 A7   80                 sta    ,x+  E4E7 96   0B                 lda    cpu_fio3  E4E9 A7   80                 sta    ,x+                     *#          tst     irq_gen    reset interrupt  E4EB 7F   0400               clr    cpu_fioF  indicate message consumed  E4EE BF   0433               stx    int_ptr   update pointer  E4F1 108E 042F               ldy    #int_buf  get message from buffer  E4F5 A6   A4                 lda    0,y       -- Send interrupt command?  E4F7 81   A0                 cmpa   #O_INTRPT  E4F9 26   10                 bne    30f                     *  E4FB 10BF 0433               sty    int_ptr   reset pointer  E4FF E6   23                 ldb    3,y       get terminal #  E501 F1   03FC               cmpb   NUM_TRM   is this a TTY device?  E504 24   51                 bhs    99f       no - ignore message                     *  E506 BD   0000               jsr    send_int***  Undefined symbol  E509 20   4C                 bra    99f       exit                     *  E50B BE   0540     30        ldx    tsktab    search for an available task  E50E F6   03FA               ldb    NUM_TSK   Number of tasks in system                     *  E511 A6   04       32        lda    tsstat,x  E513 81   04                 cmpa   #TFREE    looking for a "free" task  E515 27   1B                 beq    40f                     *  E517 30   89 0080            leax   TSKSIZ,x  E51B 5A                      decb  E51C 26   F3                 bne    32b                     *  E51E 34   16                 pshs   d,x  E520 8E   E563               ldx    #00f  E523 BD   0000               jsr    DB_pdata***  Undefined symbol  E526 BD   0000               jsr    DB_main***  Undefined symbol  E529 35   16                 puls   d,x  E52B C6   82                 ldb    #E_SYSBSY can't process - IOP saturated!  E52D BD   E37B               jsr    fio_msg  E530 20   25                 bra    99f       exit                     *  E532 108E 042F     40        ldy    #int_buf  get message from buffer  E536 10BF 0433               sty    int_ptr   reset pointer  E53A E6   A0                 ldb    ,y+       command byte  E53C E7   0A                 stb    tscmd,x   save for task  E53E A6   A0                 lda    ,y+       sequence #  E540 A7   0B                 sta    tsseq,x  E542 E6   A0                 ldb    ,y+       command specific dataFIO Simulation Structure             11:49:31  Jun 16, 2021   Page   32Interrupt  Processing                                 E544 E7   0D                 stb    tstval,x  E546 A6   A0                 lda    ,y+       associate with terminal  E548 A7   08                 sta    tsdev,x                     ** -- Removed 2/21/85                     ** lda #RUNPRI make highest possible priority                     ** sta tsprir,x  E54A BD   E643               jsr    makrdy    make task ready to run                     ** ldx utask don't switch if this was the system running                     ** cmpx tsktab                     ** beq 99f                     ** jsr change -- whatever I was doing can wait...  E54D 20   08                 bra    99f       exit                     * >E54F 17   0000     50        lbsr   DB_check  enter debugger?***  Undefined symbol  E552 24   03                 bcc    99f                     * >E554 17   0000               lbsr   DB_main***  Undefined symbol                     *  E557 3B            99        rti              return     from interrupt                     *  E558 0D 49 4F 50   IRQmsg10  fcc    $d,'IOP Got: ',0  E563 2D 2D 20 4E   00        fcc    '-- No tasks!',0FIO Simulation Structure             11:49:31  Jun 16, 2021   Page   33Interrupt  All Tasks                                                                          *                     * Interrupt all tasks associated with a given device                     *   A - Device #                     *   jsr int_all                     * Note: The current task is skipped, along with                     * the system and the interrupt handler task (1).                     *  E570 34   36       int_all   pshs   d,x,y  E572 F6   03FA               ldb    NUM_TSK  E575 C0   02                 subb   #2  E577 BE   0540               ldx    tsktab  E57A 30   89 0100            leax   2*TSKSIZ,x                     *  E57E A1   08       10        cmpa   tsdev,x   is this guy associated with the device?  E580 26   0C                 bne    20f                     *  E582 BC   040F               cmpx   utask     make sure I don't get blown away  E585 27   07                 beq    20f                     *  E587 34   16                 pshs   d,x  E589 BD   E6B2               jsr    xmtint    interrupt task  E58C 35   16                 puls   d,x                     *  E58E 30   89 0080  20        leax   TSKSIZ,x  next task  E592 5A                      decb             any        more tasks?  E593 26   E9                 bne    10b                     *  E595 35   B6                 puls   d,x,y,pc  returnFIO Simulation Structure             11:49:31  Jun 16, 2021   Page   34Scheduler  routines                                                                           *                     * All routines in this file pertain to scheduling                     * operations.                     *                                          *                     * change & rsched                     *                     * Change will change tasks.  The current task is put                     * back on the linked list of running tasks.                     * Rsched will reschedule the cpu giving control to                     * another ready task.  If no tasks are ready, idle                     * looping is done until one becomes ready.  Rsched                     * does not put the current task back on the ready list!                     * This routine returns one to the caller.  All registers                     * are destroyed.                     *                       E597 BE   040F     change    ldx    utask     point to task table entry >E59A 17   006D               lbsr   putrun    put on ready list                     *  E59D               rsched    seti   mask      interrupts  E59F BE   040F               ldx    utask     point to current task  E5A2 10EF 88 10              sts    umark0,x  save stack pointers  E5A6 BE   0540               ldx    tsktab    point to task table  E5A9 8D   23                 bsr    swtchu    switch users  E5AB 7F   0417               clr    idle      reset idle/running flag                     *  E5AE 7F   0412     rsche2    clr    chproc    reset change flag >E5B1 17   0025               lbsr   getjob    get a new task  E5B4 26   0C                 bne    rsche3    find one?                                          ***+++                     ***---                       E5B6 86   7F       05        lda    #127      set higheset priority  E5B8 B7   0411               sta    jobpri    set as current  E5BB                         clri   clear     interrupts                     * idle work could go on here  E5BD 12                      nop  E5BE                         seti  E5C0 20   EC                 bra    rsche2    loop til find a ready one                     *  E5C2 F7   0411     rsche3    stb    jobpri    set new priority  E5C5 8D   07                 bsr    swtchu    switch users top page  E5C7 BE   040F               ldx    utask     point to task                     ** -- I don't think this will ever happen                     ** tst tssgnl,x any waiting signals?                     ** lbne sleep yes - this will blow task away...  E5CA CC   0001               ldd    #1        return 1 to new task  E5CD 39                      rts              return    FIO Simulation Structure             11:49:31  Jun 16, 2021   Page   35Scheduler  routines                                                                           *                     * Switch users                     *   X - Task entry for new task                     *  E5CE 35   20       swtchu    puls   y         get return address  E5D0 BF   040F               stx    utask     set up new running task  E5D3 10EE 88 10              lds    umark0,x  reset stack                                          ***+++                     ***---                       E5D7 6E   A4                 jmp    0,y       return to caller                                          ***+++                     ***---                                                                                    ***+++                     ***---                                          FIO Simulation Structure             11:49:32  Jun 16, 2021   Page   36Scheduler  routines                                                                           *                     * getjob                     *                     * Search ready list for ready task.  If none found,                     * return 'EQ' status.  Otherwise return task table                     * entry address in x.                     *                       E5D9 5F            getjob    clrb             clear      flag  E5DA BE   0409               ldx    runlst    point to head of list  E5DD 27   1F                 beq    getjo6    empty list?                     *  E5DF A6   04       getjo1    lda    tsstat,x  get status byte  E5E1 81   01                 cmpa   #TRUN     is it in run state?  E5E3 26   1B                 bne    getjo8                     *  E5E5 5D                      tstb             first      in list?  E5E6 27   06                 beq    getjo2                     *  E5E8 EC   84                 ldd    tslink,x  remove from list  E5EA ED   A4                 std    tslink,y  E5EC 20   07                 bra    getjo4                     *  E5EE 10AE 84       getjo2    ldy    tslink,x  remove from list head  E5F1 10BF 0409               sty    runlst    set new head                     *  E5F5 E6   05       getjo4    ldb    tsprir,x  get priority  E5F7 6F   84                 clr    tslink,x  zero out link  E5F9 6F   01                 clr    tslink+1,x so not run list  E5FB 86   FF                 lda    #$ff      set ne status  E5FD 39                      rts              return                         *  E5FE 4F            getjo6    clra             set        eq status  E5FF 39                      rts                     *  E600 1F   12       getjo8    tfr    x,y       save old pos  E602 AE   84                 ldx    tslink,x  follow link  E604 27   F8                 beq    getjo6                     *  E606 C6   01                 ldb    #1        set flag  E608 20   D5                 bra    getjo1    repeat loop                     FIO Simulation Structure             11:49:32  Jun 16, 2021   Page   37Scheduler  routines                                                                           *                     * putrun                     *                     * Put current task on ready list.  The list is                     * arranged with higher priority tasks at the top.                     * If equal priorities are found, the new one is                     * put at the end of the block.  On entry, x points                     * to the task table entry.  All registers are                     * destroyed except x.                     *                       E60A 34   01       putrun    pshs   cc        save status  E60C                         seti   mask      interrupts  E60E 10BE 0409               ldy    runlst    point to head  E612 26   0A                 bne    putru2  E614 BF   0409               stx    runlst    set new head                     *  E617 CC   0000     putru1    ldd    #0        set last link  E61A ED   84                 std    tslink,x  E61C 35   81                 puls   cc,pc     return                     *  E61E E6   05       putru2    ldb    tsprir,x  get priority  E620 E1   25                 cmpb   tsprir,y  look for correct prior slot  E622 2F   08                 ble    putru4                     *  E624 FC   0409               ldd    runlst  E627 BF   0409               stx    runlst    set new head  E62A 20   0F                 bra    putru5    link in rest                     *  E62C 1F   23       putru4    tfr    y,u       save last look  E62E 10AE A4                 ldy    tslink,y  follow link  E631 27   0C                 beq    putru6                     *  E633 E1   25                 cmpb   tsprir,y  check priority  E635 2F   F5                 ble    putru4                     *  E637 EC   C4                 ldd    tslink,u  link into list here  E639 AF   C4                 stx    tslink,u                     *  E63B ED   84       putru5    std    tslink,x  E63D 35   81                 puls   cc,pc     return                     *  E63F AF   C4       putru6    stx    tslink,u  E641 20   D4                 bra    putru1    go zero last link                     FIO Simulation Structure             11:49:32  Jun 16, 2021   Page   38Scheduler  routines                                                                           *                     * makrdy                     *                     * Make a task ready to run.  Enter with x                     * pointing to task table entry.  If new tasks                     * priority is higher than current, set the                     * 'chproc' flag so the system can change tasks.                     *                       E643 86   01       makrdy    lda    #TRUN     set status  E645 A7   04                 sta    tsstat,x  E647 CC   0000               ldd    #0        clear events flag  E64A ED   06                 std    tsevnt,x  E64C 8D   BC                 bsr    putrun    put on ready list  E64E E6   05                 ldb    tsprir,x  get priority  E650 F1   0411               cmpb   jobpri    higher than current?  E653 2F   03                 ble    makrd6                     *  E655 7C   0412               inc    chproc    set change flag                     *  E658 39            makrd6    rts              return    FIO Simulation Structure             11:49:32  Jun 16, 2021   Page   39Sleep      and Wakeup routines                                                                *                     * wakeup                     *                     * Wakeup all tasks waiting the event designated                     * in the y register.  The x reg is preserved.                     *                       E659 34   57       wakeup    pshs   cc,d,x,u  save registers  E65B                         seti   mask      interupts  E65D CE   040B               ldu    #slplst  E660 AE   42                 ldx    tsslnk,u  point to sleep list  E662 27   0B                 beq    wakeu4                     *  E664 10AC 06       wakeu2    cmpy   tsevnt,x  check event  E667 27   08                 beq    wakeu5  E669 33   84                 leau   0,x       mark this entry                     *  E66B AE   02       wakeu3    ldx    tsslnk,x  follow chain  E66D 26   F5                 bne    wakeu2    end of list?                     *  E66F 35   D7       wakeu4    puls   cc,d,x,u,pc return                     *  E671 34   70       wakeu5    pshs   x,y,u     save registers  E673 EC   02                 ldd    tsslnk,x  remove from list  E675 ED   42                 std    tsslnk,u  E677 8D   CA                 bsr    makrdy    put on ready list  E679 35   70                 puls   u,x,y  E67B 20   EE                 bra    wakeu3    repeat                     FIO Simulation Structure             11:49:32  Jun 16, 2021   Page   40Sleep      and Wakeup routines                                                                *                     * sleep                     *                     * Sleep will put this task to sleep with priority                     * specified in the b register.  On entry, y is pointing                     * to the event which will be awakened.                     *                                          ***+++                     ***---                       E67D 34   51       sleep     pshs   cc,x,u    save registers  E67F BE   040F               ldx    utask     point to task                                          ***+++                     ***---                       E682 6D   09                 tst    tssgnl,x  any signals waiting?  E684 26   1F                 bne    sleep7                     *  E686                         seti   mask      ints  E688 E7   05                 stb    tsprir,x  set priority  E68A 10AF 06                 sty    tsevnt,x  set event  E68D 86   02                 lda    #TSLEEP   set status  E68F A7   04                 sta    tsstat,x  E691 FC   040D               ldd    slplst+tsslnk get head of list  E694 ED   02                 std    tsslnk,x  set new link  E696 BF   040D               stx    slplst+tsslnk set new head  E699 17   FF01               lbsr   rsched    reschedule cpu                                          ***+++                     ***---                       E69C BE   040F     20        ldx    utask     get task entry  E69F 6D   09                 tst    tssgnl,x  any signals waiting?  E6A1 26   02                 bne    sleep7                     *  E6A3 35   D1                 puls   cc,x,u,pc return                     *  E6A5 BE   040F     sleep7    ldx    utask     reset signal  E6A8 6F   09                 clr    tssgnl,x  E6AA EC   88 12              ldd    umark1,x  stack reset point  E6AD 35   51                 puls   cc,x,u    reset cc and registers  E6AF 1F   04                 tfr    d,s       change stacks  E6B1 39                      rts              return    FIO Simulation Structure             11:49:33  Jun 16, 2021   Page   41Sleep      and Wakeup routines                                                                *                     * xmtint - Send an interrupt to a task                     *  X - Task entry                     *  jsr xmtint                     *  E6B2 34   76       xmtint    pshs   d,x,y,u   save registers  E6B4 A6   04                 lda    tsstat,x  get task state  E6B6 81   01                 cmpa   #TRUN     running?  E6B8 26   06                 bne    10f       no - try something else                     *  E6BA 86   01                 lda    #1        set signal  E6BC A7   09                 sta    tssgnl,x  E6BE 20   0E                 bra    99f       exit                     *  E6C0 81   02       10        cmpa   #TSLEEP   task sleeping?  E6C2 26   0A                 bne    99f       no - can't send interrupt                     *  E6C4 86   01                 lda    #1        set signal  E6C6 A7   09                 sta    tssgnl,x  E6C8 10AE 06                 ldy    tsevnt,x  wake task up >E6CB 17   FF8B               lbsr   wakeup                     *  E6CE 35   F6       99        puls   d,x,y,u,pc return                                                                         end55 Error(s) detected    14 Excessive BRANCH/JUMP(S) detectedFIO Simulation Structure             11:49:33  Jun 16, 2021   Page   42Sleep      and Wakeup routines                      Symbol Table:Absolute Symbols:A        0008   B        0009   BASE_SLO 8000   BSPCH    007F   CC       000A   CHRLIM   00FE   CLISTS   0538   CLOCK    8070   CLOCKI   8071   CLOCKPR  FFC4   CNCLC    0018   CPU2DEV  03FE   CPU_down E03D   CPUtraps FFF0   CR       000D   D        0000   DBG_8274 0002   DBG_CMD  0100   DBG_HAN  0020   DBG_INIT 0400   DBG_INT  0004   DBG_IO   0010   DBG_MSG  0200   DBG_OPEN 0800   DBG_SLP  0040   DBG_SYS  0001   DBG_TASK 0080   DBG_TRMI 0008   DB_cntrl 0407   DB_iflg  0406   DBmsg00  E000   DBmsg01  E009   DBmsg02  E029   DEBUG    0D04   DEBUGROM C000   DEBUG_CO 0000   DEV2CPU  03FD   DEV_BAD  E48E   DEV_SIZE 0006   DLE      0010   DO_HISTO 0001   DO_IXON  0000   DP       000B   DPR_SMSZ 0400   D_CLOCK  001E   D_CLOSE  0004   D_END    0026   D_GETD   0016   D_INTRPT 0014   D_OPEN   0002   D_RQRD   0010   D_RQWR   000A   D_SEND   0012   D_SETD   0018   D_TTYG   0008   D_TTYS   0006   D_WRC    000E   D_WRITE  000C   D_init   0022   D_inthan 0020   D_test   0024   D_ttconf 0026   D_ttdisx 002E   D_ttend  0048   D_ttenno 0034   D_ttenr  0030   D_ttenx  0032   D_ttenxr 002C   D_ttgetc 002A   D_ttisct 003A   D_ttputc 0028   D_tttstb 003E   D_tttstc 0042   D_tttstd 0044   D_tttste 0046   D_tttstr 003C   D_tttsts 0040   D_tttstx 0038   D_ttwcts 004A   D_ttwdcd 004C   D_ttxbsy 0036   E        000E   ECN0BASE E400   ECN_FSZ  0210   ECN_SMSZ 0400   EOTCH    0004   E_ABORT  00BF   E_BADCMD 0081   E_BADDEV 0084   E_DEVBSY 0085   E_INTRPT 00BE   E_IOERR  0086   E_NTOPEN 0083   E_SYSBSY 0082   F        000F   FF       0040   FIFO_get E3FC   FIFO_put E420   FIFOgeta E3F3   FIFOputa E418   FIOPRI   FFCE   FIOTVSZ  0401   FIO_get  E3D1   FIO_lock 042E   FIO_rel  E3E6   HANGS    0001   HOLDC    001B   IF       0010   INTRC    0003   INTS     0002   IO_end   E472   IO_han   E437   IRQ_han  E4B1   IRQmsg10 E558   MAXECN   0001   MAX_CL   007C   MAX_DEV  000D   MAX_NEC  0000   MAX_OB   0400   MAX_PPR  0000   MAX_TI   000A   MAX_TSK  0028   MAX_TTY  000C   MIN_OB   0120   MIN_TSK  0020   MOD_SIZE 0004   NECADR   0598   NEC_IQ   0596   NECstr   0546   NEXT_SLO 0010   NL       000A   NUM_CL   03FB   NUM_NEC  03FD   NUM_PPR  03FE   NUM_TRM  03FC   NUM_TSK  03FA   OBUFRS   053E   OBUF_SIZ 0400   OQHI     0402   OQLO     0404   O_CLOSE  0020   O_INTRPT 00A0   O_OPEN   0010   O_PGETD  00B0   O_PSETD  00C0   O_RQRD   0080   O_RQWR   0050   O_SEND   0090   O_TTYG   0040   O_TTYS   0030   O_WRC    0070   O_WRITE  0060   PC       0005   PPstr    0544   PRCSIZ   0100   QUITC    001C   QUITS    0003   RAMend   6FFF   RAMorg   0400   RAMscrat 7000   RAMscren 7F00   REJECT   0080   ROMLOorg E000   ROM_ERR  E0B4   ROM_VERS 0012   ROMstack 7FFF   RUNPRI   0046   R_CLOCK  000C   R_CLOSE  0003   R_INTRPT 000A   R_OPEN   0002   R_PDATA  000D   R_RD1C   0009   R_RDOK   0007   R_REQOK  0004   R_RESET  0001   R_SNDMC  000B   R_SNDNC  0008   R_TTY    0006   R_WRITE  0005   S        0004   SPACE    0020   SR4_name E340   SYS_TABS 05A0   TABCH    0009   TFREE    0004   TIQPRI   FFD8   TI_Q     0418   TI_Q_ptr 042C   TRUN     0001   TSKSIZ   0080   TSLEEP   0002   TSYS     0005   TTYIPR   FFF6   TTYLOCK  FFDD   TTYOPR   FFEC   TTYQS    053C   TTYSPR   FFE2   TTYTABS  053A   TWAIT    0003   U        0003   USTSIZ   006C   V        0007   W        0006   X        0001   XOFFC    0013   XONC     0011   Y        0002   bad_cmd  E48B   bad_dev  E4AE   brbutb   059A   cbufct   0415   cfreel   0413   change   E597   chproc   0412   clini2   E25D   clinit   E254   clock_ti 0435   cpu_fio  0008   cpu_fio1 0009   cpu_fio2 000A   cpu_fio3 000B   cpu_fio4 000C   cpu_fio5 000D   cpu_fio6 000E   FIO Simulation Structure             11:49:33  Jun 16, 2021   Page   43Sleep      and Wakeup routines                      cpu_fio7 000F   cpu_fioF 0400   dev_addr 0000   dev_brbu 0004   dev_tab  0548   dev_type 0002   end_vars 6FFF   fifo     0020   fifo_cnt 0010   fifo_get 0011   fifo_put 0013   fio_cpu  0000   fio_cpu1 0001   fio_cpu2 0002   fio_cpu3 0003   fio_cpu4 0004   fio_cpu5 0005   fio_cpu6 0006   fio_cpu7 0007   fio_cpuF 03FF   fio_msg  E37B   fio_rese E349   fio_resp E3BB   fio_star E07C   fio_wait E35D   getjo1   E5DF   getjo2   E5EE   getjo4   E5F5   getjo6   E5FE   getjo8   E600   getjob   E5D9   hstbuf   0536   hstptr   0536   idle     0417   int_all  E570   int_buf  042F   int_ptr  0433   jobpri   0411   lcbuf    0416   makrd6   E658   makrdy   E643   mod_name 0002   mod_tbl  E33A   mod_type 0000   no_dev   E23F   prcbuf   0436   putru1   E617   putru2   E61E   putru4   E62C   putru5   E63B   putru6   E63F   putrun   E60A   rom_bad  E0B2   rom_firq E085   rom_init E05A   rom_int  E0A7   rom_nmi  E07F   rom_swi  E08C   rom_swi2 E092   rom_swi3 E099   rom_trap E0A0   rsche2   E5AE   rsche3   E5C2   rsched   E59D   runlst   0409   set_tabl E0F6   sleep    E67D   sleep7   E6A5   slot_tbl 0406   slplst   040B   stbinit  E0C1   sto_chk  E246   swtchu   E5CE   sys_vars 0400   tscmd    000A   tsdev    0008   tsevnt   0006   tskend   0542   tskinit  E2E5   tsktab   0540   tslink   0000   tsprir   0005   tsseq    000B   tssgnl   0009   tsslnk   0002   tsstat   0004   tstval   000D   ttyinit  E27A   umark0   0010   umark1   0012   usp      000E   utask    040F   wakeu2   E664   wakeu3   E66B   wakeu4   E66F   wakeu5   E671   wakeup   E659   xmtint   E6B2   