        lib     environment.h sttl DPR Routines pag        global  dpr_reset,mbx_put        ifc     &a,'GPPCPU'** Wait for DPR to reset interface*  Y points to DPR control block*dpr_reset        pshs    x,y*        ldx     dpr_dba,y        addr    Y,X*00      lda     dpr_cpuF,x       wait until magic value appears        cmpa    #$99        bne     00b        lda     dpr_cpu1,x      -- Version #        sta     rom_version        clr     dpr_cpuF,x      let DPR know I'm ready        puls    x,y,pc        endif** mbx_put - Send a message via the DPR Mailbox*   B - Message code to send (one byte)*   X - Transaction slot*   Y - base address of DPR chip*   bsr mbx_put*mbx_put pshs    cc,d,x          save register        seti                    mask interrupts!        ldd     tran_val0,x     code/sequence        std     cpu_dpr,y       set up mailbox value        ldd     tran_val2,x     size / block #H        std     cpu_dpr2,y        ldd     tran_val4,x     block #M / block #L        std     cpu_dpr4,y        ldd     tran_val6,x     none        std     cpu_dpr6,y        lda     2,s             tell IOP mailbox full        sta     cpu_dprF,y05      ldx     #$FFFF          time-out counter10      lda     cpu_dprF,y      wait till value consumed        beq     20f             jump if consumed        leax    -1,x            time-out yet?        bne     10b        bra     05b             try again20        puls    cc,d,x,pc**-- Pointers in FIFO are relative to 0*DPRF_get pshs cc,x        seti                    -- interrupts must be masked        ldd     dpr_f_cnt,y      any data?        beq     99f             no - exit**99      puls    cc,x,pc*DPRF_put pshs   cc,x        seti                    -- interrups must be masked*        std     dpr_f_cnt,y        update count*99      puls    cc,x,pc