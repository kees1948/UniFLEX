Adding new devices to your machine and make your kernel work with them is an interresting and educative job.

For a multi-user/multi-tasking operating sytem like UniFLEX you need to consider a couple of things.

1) The device sould show up in the designated IO space. In the CPU09 system this area is at $F000-$F3FF. The MONitor board 
already has split this up in smaller parts. While I have 'assigned' some area's to certain targets, you are free to do otherwise.

2) Interaction between kernel and device should be so efficient as possible. The driver should be able exchange its data fast
with the device. The device should be able to signal the kernel with interrupt(s). 'POLLING' is possible but the price is
loss of overall efficiency and responsiveness. It should be avoided at all cost.

Depending on the data structure you could use a 'block' driver or a 'character' driver. Block drivers handle large chunks
of data per session while Character drivers may handle a byte value as minimum. Block drivers should preferably use DMA(*) to
transfer their data. Examples of block devices: harddisk, floppy disk. Examples of Character devices: terminal, user-io, clock, printer.

The kernel has for both types tables to locate the devices and drivers.

In the CPU09 system all of these tables are to be found in ../mach_m1/mdevtab.t

A character device table entry consists of 5 pointers. Each point to a specific function of the driver.
<ptr_to_open>, <ptr_to_close>, <ptr_to_read>, <ptr_to_write>, <ptr_to_special>

<ptr_to_open> ponts to the open function of the driver. This function initializes some housekeeping, checking for validity
of caller parameters. It should return an error on any faulty input. There could be multiple calls to open.

<ptr_to_close> tells the driver to shutdown. This is done when the last connection is terminated.

<ptr_to_read> is used to transfer data from the device.

<ptr_to_write> is used to transfer data to the device.

<ptr_to_special> points to a function that can read/write 6 special bytes, these can be used to change settings in hardware or
drivers. i.e. ttyset/ttyget for terminals. density/side flags for floppy.

Which pointer-set the kernel picks from the table depends on the 'device major' value. If you look into the /dev directory 
there are all sorts of entries which start with 'c'. Those are character type devices. 

++ ls -l /dev
total 183
drwxr-x 2 root       1296 Jun 22 15:33 .
drwxrwx25 root        672 Aug 02 07:51 ..
-rw-r-- 1 root        318 Dec 29  2022 README
-rw-r-- 1 root        281 Dec 29  2022 README.bak
crw-r-- 1 root      8,  0 Jan 23  2021 dbgio0
crw-r-- 1 root      8,  1 Jan 23  2021 dbgio1
crw-r-- 1 root      8,  2 Jan 23  2021 dbgio2
crw-r-- 1 root      8,  3 Jan 23  2021 dbgio3
crw-r-- 1 root      8,  4 Jan 23  2021 dbgio4
crw-r-- 1 root      8,  5 Jan 23  2021 dbgio5
brw---- 1 root      3,  0 Aug 02 12:15 fd0
brw---- 1 root      3,  1 Jul 17 13:42 fd1
brw---- 1 root      3,  2 Dec 29  2022 fd2
brw---- 1 root      3,  3 Dec 29  2022 fd3
crw---- 1 root      6,  0 Feb 08 17:04 fdc0
crw---- 1 root      6,  1 Feb 08 17:05 fdc1
crw---- 1 root     10,  0 Dec 09  2023 loop-control
brw-rw- 1 root      1,  0 May 03 20:20 loop0
brw-rw- 1 root      1,  1 Dec 09  2023 loop1
crw---- 1 root     13,  0 Feb 04  2023 net0
brw---- 1 root      4,  0 Jun 26 13:38 netblk0
brw---- 1 root      4,  1 Jun 22 15:32 netblk1
crw---- 1 root     14,  0 Mar 27 17:44 netblkc0
crw---- 1 root     14,  1 Jun 22 15:32 netblkc1
crw-rw- 1 root      2,  0 Jan 26  2021 null
crw---- 1 root      1,  1 Dec 09  2023 pmem
brw---- 2 root      2,  0 Jan 29  2023 ram0
brw---- 1 root      2,  1 Jan 30  2023 ram1
crw---- 2 root     12,  0 Dec 28  2022 ramc0
crw---- 1 root     12,  1 Jan 28  2023 ramc1
crw-r-- 1 root      2,  2 Jan 26  2021 random
brw---- 1 root      0,  0 Jan 26  2021 root
crw---- 1 root      1,  0 Dec 09  2023 smem
brw---- 1 root      0,  0 Jan 26  2021 swap
crw-r-- 1 root      0,  0 Aug 04 11:21 tty00
crw-r-- 1 root      0,  1 Aug 04 11:21 tty01
crw-r-- 1 root      0,  2 Aug 04 11:21 tty02
crw-r-- 1 root      0,  3 Aug 04 11:21 tty03
crw-r-- 1 root      0,  4 Aug 04 11:21 tty04
crw-r-- 1 root      5,  9 Sep 09  2023 tty09
crw-r-- 1 root      5, 10 Jan 26  2021 tty10
crw-r-- 1 root      5, 11 Sep 11  2023 tty11
crw-r-- 1 root      5, 12 Sep 11  2023 tty12
crw-rw- 1 root      7,  0 Dec 28  2020 uiomem
crw-r-- 1 root     11,  0 Jan 25  2021 video
brw---- 1 root      0,  0 Aug 02 12:00 w00
brw---- 1 root      0,  1 Jul 25 16:41 w01
brw---- 1 root      0,  2 Jan 28  2021 w02
brw---- 1 root      0,  3 Jun 12 16:08 w03
crw---- 2 root      3,  0 Jan 24  2021 w0c0
brw---- 1 root      0,  4 Dec 28  2020 w10
brw---- 1 root      0,  5 Dec 28  2020 w11
brw---- 1 root      0,  6 Dec 28  2020 w12
brw---- 1 root      0,  7 Dec 28  2020 w13
brw---- 1 root      0,  8 Sep 11  2023 w20
brw---- 1 root      0,  9 Sep 11  2023 w21
brw---- 1 root      0, 10 Jan 12  2022 w22
brw---- 1 root      0, 11 Dec 28  2020 w23
brw---- 1 root      0, 12 Dec 28  2020 w30
brw---- 1 root      0, 13 Dec 28  2020 w31
brw---- 1 root      0, 14 Dec 28  2020 w32
brw---- 1 root      0, 15 Dec 28  2020 w33
crw---- 2 root      3,  0 Jan 24  2021 wc00
crw---- 1 root      3,  1 Dec 28  2020 wc01
crw---- 1 root      3,  2 Dec 28  2020 wc02
crw---- 1 root      3,  3 Dec 28  2020 wc03
crw---- 1 root      3,  4 Dec 28  2020 wc10
crw---- 1 root      3,  5 Dec 28  2020 wc11
crw---- 1 root      3,  6 Dec 28  2020 wc12
crw---- 1 root      3,  7 Dec 28  2020 wc13
crw---- 1 root      3,  8 Dec 28  2020 wc20
crw---- 1 root      3,  9 Dec 28  2020 wc21
crw---- 1 root      3, 10 Dec 28  2020 wc22
crw---- 1 root      3, 11 Dec 28  2020 wc23
crw---- 1 root      3, 12 Dec 28  2020 wc30
crw---- 1 root      3, 13 Dec 28  2020 wc31
crw---- 1 root      3, 14 Dec 28  2020 wc32
crw---- 1 root      3, 15 Dec 28  2020 wc33
cr--r-- 1 root      2,  1 Sep 24  2019 zero
++ 

Those lines which start with 'c' are character devices and the ones with 'b' are block drivers. Instead of the file size
device entries show 2 numbers separated by a comma. These are the 'major'(left) and 'minor'(right) numbers.

The kernel use the major as index into the character device table. The minor is used within the driver to identify a specific
device, i.e. tty00...tty08, wc0...wc7. A driver _should_ check to minor values for correctness and return an error if faulty.

The next thing is assign an interrupt to a driver. This method may vary. For the tty's the kernel consult a table with bitmask,
device address and service routine address. If such is not possible then individual tests may be done. Interrupt handling is
done in "minthan.t". Lastly, some hardware needs to be initialized before the kernel starts. This is a "mach.t" task. Add calls
to initializing routines in your driver from here.


to be cont'd


* The HD63X09 has block transfer instructions that qua efficiency comes close to of that of DMA.
