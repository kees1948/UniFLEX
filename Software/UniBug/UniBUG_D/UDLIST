UniFLEX Monitor ROM                  21:03:50  Aug 20, 2024   Page    1Equates                                                                                       *                     * generic defines for unibug ROM                     *                               opt    lis                               opt    exp                       0000                         abs                                          *                     * Monitor ROM for booting UniFLEX and handling the UniFLEX                     * interrupt processing.                     * 2020-12-19  added init  step voor kernel debgger 0.08                     *                     * 2021-08-07  adapted the hirom code for handling the stacksize                     * differences between 63X09 and 68X09                     *                     * 2021-10-24  set stackpointer in DATBOX at first                     *                     * 2022-03-01  added floppy boot for CPU09GPP/09FLP                     *                     * 2022-11-23  fixed a nasty bug in kfirq                     *                     * 2023-04-01  restructured the interrupt handlers                     *                     * 2024-05-01  clear changemap added                     *                     * 2024-06-20 added netboot code 'N' opt                     *                                          * low ram interrupt vectors                       0000                         org    sysseg<<12                       0000               irqvec    rmb    2         maskable interrupt  0002               swivec    rmb    2         swi 1  0004               sw2vec    rmb    2         swi 2  0006               sw3vec    rmb    2         swi 3  0008               nmivec    rmb    2         non-maskable interrupt  000A               frqvec    rmb    2         fast interrupt                                          * low memory system storage                       000C               cputyp    rmb    1         cpu type  000D               cpumod    rmb    1         cpu mode 63/68  000E               usrtop    rmb    1         current user segment  000F               kernel    rmb    1         kernel/user state (-1 = user address space)  0010               chpflg    rmb    1         change process flag  0011               chtask    rmb    2         change process vector  0013               corcnt    rmb    1         core segment count  0014               lstmem    rmb    2         mem table end marker  0016               teluch    rmb    1         user change flagUniFLEX Monitor ROM                  21:03:51  Aug 20, 2024   Page    2Equates                                               0017               memmsk    rmb    1         dat cell mask  0018               romspr    rmb    1         spare byte for rom                                          * System and global memory maps  0100                         org    (sysseg<<12)+$100                       0100               sysmap    rmb    segadr    system memory map  0110               cormap    rmb    segmax    available memory list                                          * User block definitions                       BF38                         org    (usrseg<<12)+$f38                                    BF00  ubasea    set    (usrseg<<12)+$f00               00BF  ubasdp    set    ubasea/256                     *               BF38  sysstk    equ    *         system stack starts here  BF38               udummy    rmb    3         spare  BF3B               ustksz    rmb    1         save interrupt stack depth  BF3C               uargp     rmb    2         user argv pointer  BF3E               uswi2v    rmb    2         swi2 vector save                     * this _should_ be at ff40.  BF40               usp       rmb    2         user stack pointer  BF42               urelod    rmb    1         map reload flag  BF43               umapno    rmb    1         task map number  BF44               usrmap    rmb    segadr    user task memory map                     *  BF54               usercc    rmb    1         condition codes  BF55               userd     rmb    2         D register  BF57               userx     rmb    2         X register  BF59               userpc    rmb    2         PC register  BF5B               userpb    rmb    1         sys call post byte                                          UniFLEX Monitor ROM                  21:03:51  Aug 20, 2024   Page    3Initial ROM Processing                                                                        *                     * Rom code starts here                     *                       F800                         org    romadr                     *                     * I/O Vectors                     *  F800 F80E                    fdb    rinit     cold start monitor  F802 FD11                    fdb    tinit     console init  F804 FCA7                    fdb    inchck    test console character ready  F806 FCAF                    fdb    inch      read one character fromconsoleterminal  F808 FCC6                    fdb    outch     write one character to console  F80A FC7A                    fdb    pdata     print a string (X)  F80C FC91                    fdb    hexbyt    print one hex byte (A)                                          *                     * bring monitor to life                     *  F80E               rinit     seti  F80E 1A   50                 orcc   #$50                               endm  F810 10CE BE80               lds    #romstk   set stack                     *  F814 4F                      clra             set dp  F815 1F   8B                 tfr    a,dp                     *  F817 8E   F400               ldx    #datbox   fill datbox with blackholes  F81A 108E 0400               ldy    #datsiz  F81E 86   FD                 lda    #nomap    black hole  F820 8C   F40F     rinit9    cmpx   #datbox+romseg don't vanish myself  F823 27   02                 beq    rinit8  F825 A7   84                 sta    0,x  F827 30   01       rinit8    leax   1,x  F829 31   3F                 leay   -1,y  F82B 26   F3                 bne    rinit9                     *  F82D CC   0100               ldd    #rammap  F830 B7   F40B               sta    datbox+usrseg setup user and system segments  F833 F7   F400               stb    datbox+sysseg  F836 86   FD                 lda    #nomap    fill system map with blackholes  F838 C6   10                 ldb    #segadr   get length of map  F83A 8E   0110               ldx    #sysmap+segadr point to map  F83D A7   82       rinit2    sta    0,-x      stuff into map cell  F83F 5A                      decb             dec the count  F840 26   FB                 bne    rinit2                     *  F842 CC   FEFF               ldd    #rommap   complete the initial map  F845 ED   0E                 std    ioseg,x   set io and rom  F847 FD   F40E               std    datbox+ioseg  F84A CC   0100               ldd    #rammapUniFLEX Monitor ROM                  21:03:51  Aug 20, 2024   Page    4Initial ROM Processing                                F84D A7   0B                 sta    usrseg,x  set user segment  F84F 97   0E                 sta    usrtop  F851 E7   84                 stb    sysseg,x  set system segment  F853 4F                      clra             init the direct page registers  F854 97   0C                 sta    cputyp    clear cpu type  F856 97   0D                 sta    cpumod  F858 97   10                 sta    chpflg    clear change task flag  F85A 97   13                 sta    corcnt    zero core count  F85C B7   BF42               sta    urelod  F85F B7   BF43               sta    umapno  F862 97   17                 sta    memmsk  F864 97   16                 sta    teluch                     * all memory set  F866 B7   FE03               sta    tlatch    initializes latch to 0                     * init debugger hardware (if present)  F869 BE   E800               ldx    dbsign    check if kernel debug present  F86C 8C   A55A               cmpx   #DEBSIG   special pattern  F86F 26   04                 bne    rinod     no, just return  F871 AD   9F E804            jsr    [debini]  init debugger                     * set trap PIA and LED and TIMER  F875 86   04       rinod     lda    #$04      select data register  F877 B7   F005               sta    monpcra  F87A B7   F007               sta    monpcrb  F87D 4F                      clra             all output  F87E B7   F006               sta    monpdrb   LEDS off  F881 B7   F004               sta    monpdra   timer stop  F884 B7   F005               sta    monpcra   dir register  F887 B7   F007               sta    monpcrb  F88A 86   0F                 lda    #$0f      select timer/rom control  F88C B7   F004               sta    monpdra  F88F 86   FF                 lda    #$ff  F891 B7   F006               sta    monpdrb  F894 86   04                 lda    #$04      select data register  F896 B7   F005               sta    monpcra  F899 B7   F007               sta    monpcrb   disabled mem trap irq                     *  F89C BD   FD11               jsr    tinit     init the terminal  F89F 8E   FD27               ldx    #hello    point to string  F8A2 BD   FC7A               jsr    pdata     print the string  F8A5 108E 0000               ldy    #irqvec   point to int vectors  F8A9 8E   FC28               ldx    #unhand   and unhandeled routine  F8AC C6   06                 ldb    #6        set count  F8AE AF   A1       rinit4    stx    0,y++     store vector  F8B0 30   07                 leax   7,x       point to next panic  F8B2 5A                      decb  F8B3 26   F9                 bne    rinit4  F8B5 9F   11                 stx    chtask    set change task vector                     UniFLEX Monitor ROM                  21:03:51  Aug 20, 2024   Page    5Main Monitor Loop                                                                             *                     * Main monitor loop (command processor)                     *                                          * Loop starts here                       F8B7               montor  F8B7 10CE BE80               lds    #romstk  F8BB 33   E4                 leau   0,s       mark stack  F8BD 32   E8 E4              leas   -dlen,s   make temp space  F8C0 8E   FD57     nxtcmd    ldx    #prompt   point to prompt string  F8C3 BD   FC7A               jsr    pdata     output it  F8C6 BD   FCAF               jsr    inch      get response  F8C9 BD   FC85               jsr    outsp     output space  F8CC 8E   F8E1               ldx    #commnd   point to command table  F8CF 8D   05                 bsr    search    search for command  F8D1 AD   98 01              jsr    [1,x]     execute command  F8D4 20   E1                 bra    montor    repeat                                          * Search command table for command                       F8D6 A1   84       search    cmpa   0,x       is it this guy?  F8D8 27   06                 beq    searc2  F8DA 30   03                 leax   3,x       skip this one  F8DC 6D   84                 tst    0,x       end of list?  F8DE 26   F6                 bne    search  F8E0 39            searc2    rts              return                                          * Command table                       F8E1 0D            commnd    fcb    $d        carriage return  F8E2 F9FA                    fdb    dummy  F8E4 43                      fcb    'C        Configure command  F8E5 F8FF                    fdb    figlef  F8E7 44                      fcb    'D        Disk boot  F8E8 F92B                    fdb    dboot  F8EA 45                      fcb    'E        Examine  F8EB F9FB                    fdb    examine  F8ED 4D                      fcb    'M  F8EE FD68                    fdb    modify  F8F0 56                      fcb    'V        Mapper  F8F1 FA7A                    fdb    mapper  F8F3 4A                      fcb    'J  F8F4 FDC7                    fdb    jumpprg  F8F6 46                      fcb    'F  F8F7 F962                    fdb    fboot  F8F9 4E                      fcb    'N  F8FA F999                    fdb    nboot  F8FC 00                      fcb    0         end of table  F8FD F9F4                    fdb    badcmd                     UniFLEX Monitor ROM                  21:03:52  Aug 20, 2024   Page    6Main Monitor Loop                                                        * Configure the system command                       F8FF BD   FB69     figlef    jsr    config    do configuration  F902 96   13       1         lda    corcnt    get core count  F904 8B   07                 adda   #7        add in system core count  F906 A7   5A                 sta    count,u   save it  F908 CC   0000               ldd    #0        set count to 0  F90B 8B   04       figle2    adda   #4        covert to decimal  F90D 19                      daa  F90E C9   00                 adcb   #0        add in carry  F910 6A   5A                 dec    count,u  F912 26   F7                 bne    figle2    finished?  F914 5D                      tstb             more than 99K of memory?  F915 27   09                 beq    figle4  F917 1E   89                 exg    a,b       do upper digit now  F919 8B   30                 adda   #$30  F91B BD   FCC6               jsr    outch     output it  F91E 1E   98                 exg    b,a       get low back  F920 BD   FC91     figle4    jsr    hexbyt    output byte  F923 BD   FC85               jsr    outsp     output space  F926 86   4B                 lda    #'K       output 'K'  F928 7E   FCC6     figle5    jmp    outch                                          * Disk boot commands                     * IDE boot  F92B BD   FB69     dboot     jsr    config    configure system                     *  F92E 5F                      clrb  F92F CE   F100               ldu    #brdbas0  F932 108E 4E20               ldy    #20000  F936 BD   FCA7     dboot1    jsr    inchck    key pressed  F939 25   09                 bcs    dboot2  F93B 17   01B3               lbsr   delay  F93E 31   3F                 leay   -1,y  F940 26   F4                 bne    dboot1  F942 20   0F                 bra    dboot3                     *  F944 BD   FCAF     dboot2    jsr    inch      get character from keyboard  F947 81   0D                 cmpa   #$0d      ENTER?  F949 27   08                 beq    dboot3  F94B 81   31                 cmpa   #'1  F94D 22   04                 bhi    dboot3    invalid  F94F 80   30                 suba   #'0  F951 1F   89                 tfr    a,b                     *  F953 BD   FA83     dboot3    jsr    loadip    load the ipl sector  F956 27   04                 beq    dboot4  F958 BD   FC91               jsr    hexbyt  F95B 39                      rts                     *  F95C 10CE BF38     dboot4    lds    #sysstk   setup UniFLEX stack  F960 6E   84                 jmp    0,x       go do the bootUniFLEX Monitor ROM                  21:03:52  Aug 20, 2024   Page    7Main Monitor Loop                                                                             * floppy boot  F962 BD   FB69     fboot     jsr    config    configure system                     *  F965 5F                      clrb  F966 CE   E000               ldu    #gppbase  floppy interface  F969 108E 4E20               ldy    #20000  F96D BD   FCA7     fboot1    jsr    inchck    key pressed  F970 25   09                 bcs    fboot2  F972 17   017C               lbsr   delay  F975 31   3F                 leay   -1,y  F977 26   F4                 bne    fboot1  F979 20   0F                 bra    fboot3                     *  F97B BD   FCAF     fboot2    jsr    inch      get character from keyboard  F97E 81   0D                 cmpa   #$0d      ENTER?  F980 27   08                 beq    fboot3  F982 81   31                 cmpa   #'1  F984 22   04                 bhi    fboot3    invalid  F986 80   30                 suba   #'0  F988 1F   89                 tfr    a,b                     *  F98A BD   FAF7     fboot3    jsr    loadif    load the ipl sector  F98D 27   04                 beq    fboot4  F98F BD   FC91               jsr    hexbyt  F992 39                      rts                     *  F993 10CE BF38     fboot4    lds    #sysstk   setup UniFLEX stack  F997 6E   84                 jmp    0,x       go do the boot                                          *                     * N - netboot                     *                     *                     * defines for netboot                     *                                          *                     * from fio.h                     *               E800  fio_dba   equ    $e800               001E  fifo_us3  equ    $001e               0020  fifo      equ    $0020                     *               0400  fio_dsz   equ    1024               0200  fio_fsz   equ    512                     *                     * from fio.h                     *               0000  cpu_fio   equ    0               0001  cpu_fio1  equ    1               0003  cpu_fio2  equ    3UniFLEX Monitor ROM                  21:03:52  Aug 20, 2024   Page    8Main Monitor Loop                                                  0004  cpu_foi3  equ    4               0006  cpu_foi4  equ    6               0008  cpu_cpu5  equ    8                     *                     * from fio_codes.h                     *               0005  R_RDOK    equ    $05                     *                     * from nwp_codes.h                     *               00F8  S_PG2FIFO equ    $f8                                          *                     * missing 63x09 macro's                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                                          *                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                     *               F999  nboot     equ    *  F999 BD   FB69               jsr    config    setup memory                     *  F99C FC   E800               ldd    fio_dba   is hardware present  F99F 26   05                 bne    01f  F9A1 FC   E802               ldd    fio_dba+2 IS cleared only after reset  F9A4 27   06                 beq    02f                     * not found  F9A6 86   3F       01        lda    #'?       tell user  F9A8 BD   FCC6               jsr    outch  F9AB 39                      rts                     *                     * bring bootcode into memory                     *  F9AC CE   E800     02        ldu    #fio_dba  hardware address  F9AF CC   FFFF               ldd    #$ffff  F9B2 ED   41                 std    cpu_fio1,u fake sequence  F9B4 8E   0800               ldx    #bootorg  F9B7 34   10                 pshs   x  F9B9 4F                      clra  F9BA C6   7E                 ldb    #%01111110 memory page to copy from GPPROM  F9BC 8D   01                 bsr    rdmemb  F9BE 39                      rts                                          *                     * subroutine to copy fifo data to kernel memoryUniFLEX Monitor ROM                  21:03:53  Aug 20, 2024   Page    9Main Monitor Loop                                                        *  F9BF 34   16       rdmemb    pshs   d,x  F9C1 ED   C8 1E              std    fifo_us3,u  F9C4 C6   F8                 ldb    #S_PG2FIFO command, copy block to fifo  F9C6 E7   C4                 stb    cpu_fio,u  F9C8 8E   0400               ldx    #fio_dsz  device size  F9CB                         addr   U,X       U+X >X  F9CB 1030                    fdb    $1030  F9CD 31                      fcb    U<<4|X                               endm  F9CE 30   1E                 leax   -2,x      find interrupt flag locations  F9D0 E7   01                 stb    1,x       cpu_fioF   tell GPP  F9D2 E6   84       03        ldb    0,x       fio_cpuF   read GPP  F9D4 27   FC                 beq    03b  F9D6 C1   05                 cmpb   #R_RDOK   right response?  F9D8 27   06                 beq    07f                     * >F9DA BD   F9A6               jsr    01b       something wrong!  F9DD 32   66                 leas   6,s       skip registers and return address  F9DF 39                      rts              to UniBUG                     *  F9E0 34   70       07        pshs   x,y,u  F9E2                         ldwi   fio_fsz   count = fifo size  F9E2 1086                    fdb    $1086  F9E4 0200                    fdb    fio_fsz                               endm  F9E6 AE   68                 ldx    8,s       destination  F9E8 31   C8 20              leay   fifo,u    source  F9EB                         tfm1   Y,X       transfer  F9EB 1138                    fdb    $1138  F9ED 21                      fcb    Y<<4|X                               endm  F9EE 35   70                 puls   x,y,u  F9F0 6F   84                 clr    0,x       fio_cpuF, tell GPP we took it  F9F2 35   96                 puls   d,x,pc                                          * Bad command                       F9F4 8E   FD5A     badcmd    ldx    #sorry    point to string  F9F7 BD   FC7A               jsr    pdata     output it  F9FA 39            dummy     rts              return                     UniFLEX Monitor ROM                  21:03:53  Aug 20, 2024   Page   10Memory Examine Command                                                   *                     * Examine memory (system)                     *  F9FB               examine  F9FB BD   FCD5               jsr    getadr    get low address  F9FE 25   16                 bcs    exam99  FA00 ED   5C                 std    lowadr,u  save low limit  FA02 86   2D                 lda    #'-  FA04 BD   FCC6               jsr    outch  FA07 BD   FCD5               jsr    getadr    get high address  FA0A 25   0A                 bcs    exam99  FA0C ED   5E                 std    hiadr,u   save high limit  FA0E AE   5C                 ldx    lowadr,u  set up for dump  FA10 10AE 5E                 ldy    hiadr,u >FA13 BD   FA17               jsr    dumpXY    go print dump  FA16 39            exam99    rts                     *                     * dumpXY - Dump memory from (X) to (Y)                     *    (X) - Lowest address to dump                     *    (Y) - Highest address to dump                     *    jsr dumpXY                     *  FA17 34   70       dumpXY    pshs   x,y,u     save registers                     *                     * Print one line (16 bytes) of data                     * >FA19 BD   FA6E     dump10    jsr    pcrlf     start a new print line  FA1C A6   E4                 lda    0,s       print address  FA1E BD   FC91               jsr    hexbyt  FA21 A6   61                 lda    1,s  FA23 BD   FC91               jsr    hexbyt  FA26 BD   FC85               jsr    outsp  FA29 BD   FC85               jsr    outsp  FA2C AE   E4                 ldx    0,s  FA2E C6   10                 ldb    #16       print 16 bytes  FA30 34   04                 pshs   b  FA32 A6   80       dump20    lda    ,x+       get next byte to print  FA34 BD   FC91               jsr    hexbyt  FA37 BD   FC85               jsr    outsp  FA3A 6A   E4                 dec    0,s       done?  FA3C 26   F4                 bne    dump20    no - go back  FA3E AE   61                 ldx    1,s       now print characters  FA40 BD   FC85               jsr    outsp  FA43 BD   FC85               jsr    outsp  FA46 C6   10                 ldb    #16  FA48 E7   E4                 stb    0,s  FA4A A6   80       dump30    lda    ,x+       get next byte  FA4C 81   20                 cmpa   #$20      printable?  FA4E 25   04                 blo    dump35    no  FA50 81   7F                 cmpa   #$7F  FA52 25   02                 blo    dump40    go print character  FA54 86   2E       dump35    lda    #'.       print period for unprintableUniFLEX Monitor ROM                  21:03:53  Aug 20, 2024   Page   11Memory Examine Command                                FA56 BD   FCC6     dump40    jsr    outch     print character  FA59 6A   E4                 dec    0,s       done?  FA5B 26   ED                 bne    dump30  FA5D 32   61                 leas   1,s       clean up stack  FA5F BD   FCA7               jsr    inchck    abort if character struck  FA62 25   06                 bcs    dump99  FA64 AF   E4                 stx    0,s       update address  FA66 AC   62                 cmpx   2,s       any more?  FA68 23   AF                 bls    dump10    yes - go to it  FA6A 8D   02       dump99    bsr    pcrlf  FA6C 35   F0                 puls   x,y,u,pc  return                     *                     * pcrlf - print carriage return/line feed                     *  FA6E 34   16       pcrlf     pshs   d,x       save registers  FA70 8E   FA78               ldx    #CRLF  FA73 BD   FC7A               jsr    pdata  FA76 35   96                 puls   d,x,pc    return  FA78 0D 00         CRLF      fcc    $d,0                                          *                     * Map memory into buffer ($d000)                     *  FA7A BD   FCE1     mapper    jsr    getbyt    get byte  FA7D 25   03                 bcs    mappe8  FA7F B7   F40D               sta    datbox+$d  FA82 39            mappe8    rts              return                                          *                     *   IDE Bootstrap                     *   reset the stack and set up direct addressing                     *   U contains controller base address                     *   B contains drive select bits                     *  FA83               loadip    seti   irq,firq  disable irq and firq  FA83 1A   50                 orcc   #$50                               endm  FA85 34   04                 pshs   b         save dest drive  FA87 C4   01                 andb   #%00000001  FA89 34   04                 pshs   b         save drive bits  FA8B 27   04                 beq    loadi1  FA8D 86   10                 lda    #IDE_DSL  drive select bit  FA8F A7   E4                 sta    0,s  FA91               loadi1                     *                     *   quiesce the dma (in case it is active)                     *  FA91 6F   C8 13              clr    dmaltc,u  disable everything                     *  FA94 CC   0040               ldd    #IDE_LBA  FA97 EA   E4                 orb    0,s       drive select bit  FA99 ED   4C                 std    ideadr3,u LBA 24...27, drive 0UniFLEX Monitor ROM                  21:03:53  Aug 20, 2024   Page   12IDE Bootstrap                                                            *  FA9B EC   4E                 ldd    idecmst,u read status  FA9D C1   50                 cmpb   #(IDERDY+IDEDSC) idle  FA9F 26   42                 bne    loadxit   drive not ready                     *  FAA1 CC   0010               ldd    #IDERSTR  FAA4 ED   4E                 std    idecmst,u restore drive >FAA6 17   0048     waitrst   lbsr   delay                     * >FAA9 17   0045     isnrdy    lbsr   delay  FAAC EC   4E                 ldd    idecmst,u check if done  FAAE C5   80                 bitb   #IDEBSY  FAB0 26   F7                 bne    isnrdy                     *  FAB2 CC   0001               ldd    #1  FAB5 ED   44                 std    idescnt,u sector count  FAB7 5F                      clrb             LBA 0  FAB8 ED   46                 std    ideadr0,u first sector LBA 0...7  FABA ED   48                 std    ideadr1,u LBA 8...15  FABC ED   4A                 std    ideadr2,u LBA 16...23  FABE CC   0040               ldd    #IDE_LBA  FAC1 EA   E4                 orb    0,s       drive select bit  FAC3 ED   4C                 std    ideadr3,u LBA 24...27, drive 0  FAC5 CC   0800               ldd    #bootorg  load real boot address  FAC8 ED   C8 10              std    dmaadh,u  FACB 86   C0                 lda    #L_DREAD+L_DMAEN  FACD A7   C8 13              sta    dmaltc,u  set high addr  FAD0 C6   C8                 ldb    #IDEDRD  FAD2 ED   4E                 std    idecmst,u  FAD4 A6   C8 18    ider1     lda    idestat,u  FAD7 85   80                 bita   #IDEINTR  FAD9 27   F9                 beq    ider1     wait for done  FADB EC   4E                 ldd    idecmst,u read status  FADD C5   01                 bitb   #IDEERR  FADF 27   0A                 beq    doboot  FAE1 1F   98                 tfr    b,a                     * faillure  FAE3 E7   61       loadxit   stb    1,s       save status  FAE5 86   FF                 lda    #$ff      set bad  FAE7 A7   E4                 sta    0,s  FAE9 35   86                 puls   d,pc                     *  FAEB 8E   0800     doboot    ldx    #bootorg  where boot is loaded  FAEE 4F                      clra             set status  FAEF 35   86                 puls   d,pc      D has drive select info                     *  FAF1 86   40       delay     lda    #64       set up a delay counter  FAF3 4A            del       deca             decrement the delay count  FAF4 26   FD                 bne    del       hang in there for the count  FAF6 39                      rts                                    0011  CMDRSC    equ    %00010001 read sectorUniFLEX Monitor ROM                  21:03:54  Aug 20, 2024   Page   13FLP Bootstrap                                                                                 *                     *   FLP Bootstrap                     *   reset the stack and set up direct addressing                     *   U contains controller base address                     *  FAF7               loadif    seti   irq,firq  disable irq and firq  FAF7 1A   50                 orcc   #$50                               endm  FAF9 C6   10                 ldb    #16  FAFB 8E   E010               ldx    #flpdpr+16 check if controoler there  FAFE A6   84                 lda    0,x  FB00 AB   80       ldif01    adda   0,x+      if these locations are all 0  FB02 5A                      decb  FB03 26   FB                 bne    ldif01  FB05 4D                      tsta  FB06 27   04                 beq    ldif02    assume controller present  FB08 CC   00FF               ldd    #$ff  FB0B 39                      rts                       FB0C CC   0000     ldif02    ldd    #0  FB0F 34   06                 pshs   d                     *                     *                     *  FB11 CC   0000     ldfl00    ldd    #0  FB14 ED   42                 std    flblkm,u  FB16 A7   41                 sta    flblkh,u  FB18 CC   0200               ldd    #$200     PAGSIZ  FB1B ED   44                 std    fltsiz,u  FB1D E7   49                 stb    fldriv,u  FB1F 47                      asra  FB20 A7   4A                 sta    flnwop,u  FB22 EC   E4                 ldd    0,s  FB24 ED   4B                 std    fltsid,u  start single side/dens/8"  FB26 86   11                 lda    #CMDRSC  FB28 A7   C4                 sta    flrflg,u  FB2A 86   FF                 lda    #$ff  FB2C A7   C9 03FF            sta    flptel,u                     *  FB30 A6   C9 03FE  ldfl01    lda    flpint,u  FB34 27   FA                 beq    ldfl01  FB36 6F   C9 03FE            clr    flpint,u  FB3A A6   48                 lda    flstat,u  FB3C 27   17                 beq    ldfl02    no error, copy to memory  FB3E A6   61                 lda    1,s  FB40 88   01                 eora   #1  FB42 A7   61                 sta    1,s  FB44 26   CB                 bne    ldfl00  FB46 A6   E4                 lda    0,s  FB48 88   40                 eora   #$40      set 5"  FB4A A7   E4                 sta    0,sUniFLEX Monitor ROM                  21:03:54  Aug 20, 2024   Page   14FLP Bootstrap                                         FB4C 26   C3                 bne    ldfl00                     * error  FB4E CC   FFFF               ldd    #$ffff  FB51 ED   E4                 std    0,s  FB53 35   86                 puls   d,pc                     * OK  FB55 CC   0200     ldfl02    ldd    #$200  FB58                         trfr   D,W  FB58 1F                      fcb    $1f  FB59 06                      fcb    D<<4|W                               endm  FB5A 8E   0800               ldx    #bootorg  FB5D 31   C8 20              leay   flpfifo,u  FB60                         tfm1   Y,X  FB60 1138                    fdb    $1138  FB62 21                      fcb    Y<<4|X                               endm                     *  FB63 8E   0800               ldx    #bootorg  where boot is loaded  FB66 4F                      clra             set status  FB67 35   86                 puls   d,pc                     UniFLEX Monitor ROM                  21:03:54  Aug 20, 2024   Page   15System Configuration                                                     *                     * Configure the system                     *                                          * code starts here  FB69 8E   99AA     config    ldx    #tstpat   setup pattern  FB6C 108E 0210               ldy    #cormap+segmax setup page table pointer  FB70 C6   EF                 ldb    #LSTPAG   setup max page number                     * >FB72 BD   FBEC     check     jsr    getpag    map in a page  FB75 BF   D0F0               stx    tstloc    write test pattern  FB78 BC   D0F0               cmpx   tstloc    is memory there?  FB7B 26   16                 bne    nomem  FB7D 34   04                 pshs   b         save count >FB7F BD   FBEC     check2    jsr    getpag    map in all other pages  FB82 F7   D0F1               stb    tstloc+1  write index  FB85 C0   01                 subb   #1        dec count by 1  FB87 24   F6                 bcc    check2  FB89 35   04                 puls   b >FB8B BD   FBEC               jsr    getpag    reselect the page  FB8E F1   D0F1               cmpb   tstloc+1  is memory there?  FB91 27   01                 beq    gotmem                     * here if no memory  FB93 4F            nomem     clra             set page number to zero                     * here for memory found  FB94 A7   A2       gotmem    sta    0,-y      store into mem table  FB96 C0   01                 subb   #1        dec the count  FB98 24   D8                 bcc    check                     *  FB9A 30   A4                 leax   0,y       point to start of table                                          * setup system address space  FB9C 6F   84       syssup    clr    sysres,x  clear out system and user pages  FB9E 6F   01                 clr    useres,x  FBA0 108E 0105               ldy    #sysmap+txtseg point to user segment  FBA4 C6   05                 ldb    #5        set length ** changed from 5 for more  FBA6 8D   4A       syssu2    bsr    getnxt    get next segment >FBA8 1027 0050               lbeq   memfal    crash if no memory!  FBAC A7   A0                 sta    0,y+      save in map  FBAE 5A                      decb             dec the count  FBAF 26   F5                 bne    syssu2  FBB1 0F   13                 clr    corcnt    set core count to zero  FBB3 108E 0110               ldy    #cormap   point to core map  FBB7 8D   39       syssu4    bsr    getnxt    get next page  FBB9 27   06                 beq    syssu5    no more?  FBBB A7   A0                 sta    0,y+      save in table  FBBD 0C   13                 inc    corcnt    bump core counter  FBBF 20   F6                 bra    syssu4    repeat  FBC1 109F 14       syssu5    sty    lstmem    save last mem pointer  FBC4 8E   0100               ldx    #sysmap   point to system map  FBC7 108E F400               ldy    #datbox   point to datbox  FBCB C6   10                 ldb    #segadr   get segment countUniFLEX Monitor ROM                  21:03:55  Aug 20, 2024   Page   16System Configuration                                  FBCD A6   80       syssu6    lda    0,x+      reload datbox from map  FBCF A7   A0                 sta    0,y+  FBD1 5A                      decb             dec the count  FBD2 26   F9                 bne    syssu6                     * test timer  FBD4 4F                      clra             enable timer  FBD5 B7   F004               sta    monpdra  FBD8 B6   F004               lda    monpdra   read value  FBDB 34   02                 pshs   a  FBDD 5F                      clrb  FBDE 17   FF10     systm1    lbsr   delay  FBE1 5C                      incb  FBE2 26   FA                 bne    systm1    256 loops  FBE4 35   02                 puls   a  FBE6 B0   F004               suba   monpdra   is it running  FBE9 27   27                 beq    notimr  FBEB 39                      rts              return                                          * map in a memory page  FBEC 1F   98       getpag    tfr    b,a       get page number  FBEE B7   F40D               sta    datbox+tfrseg map into address space  FBF1 39                      rts              return                                          * get next valid memory segment  FBF2 8C   0210     getnxt    cmpx   #cormap+segmax end of map?  FBF5 27   04                 beq    getnx2  FBF7 A6   80                 lda    0,x+      get next page  FBF9 27   F7                 beq    getnxt    keep looking if zero  FBFB 39            getnx2    rts              return                                          * No memory panic >FBFC BD   FC60     memfal    jsr    panic     report panic  FBFF 4E 6F 74 20             fcc    'Not Enough Memory!',0 >FC12 BD   FC60     notimr    jsr    panic     report timer  FC15 54 69 6D 65             fcc    'Timer not Running!',0                     *                     * Terminal I/O and bad interrupt handlers                     *                                          * Report unhandled interrupts, fixed sequence.  FC28 8D   36       unhand    bsr    panic  FC2A 49 52 51 20             fcc    'IRQ ',0  FC2F 8D   2F       unswi     bsr    panic  FC31 53 57 49 20             fcc    'SWI ',0  FC36 8D   28       unswi2    bsr    panic  FC38 53 57 49 32             fcc    'SWI2',0  FC3D 8D   21       unswi3    bsr    panic  FC3F 53 57 49 33             fcc    'SWI3',0  FC44 8D   1A       unnmi     bsr    panic  FC46 4E 4D 49 20             fcc    'NMI ',0  FC4B 8D   13       unfirq    bsr    panic  FC4D 46 49 52 51             fcc    'FIRQ',0UniFLEX Monitor ROM                  21:03:55  Aug 20, 2024   Page   17System Configuration                                  FC52 8D   0C                 bsr    panic  FC54 43 48 50 52             fcc    'CHPR',0                     *  FC59 8D   05       cputrp    bsr    panic  FC5B 54 52 41 50             fcc    'TRAP',0                                          * Panic processing  FC60               panic     seti   mask      ints  FC60 1A   50                 orcc   #$50                               endm  FC62 8E   FD5D               ldx    #panicy   point to string  FC65 8D   13                 bsr    pdata     print it  FC67 35   10                 puls   x         get message  FC69 8D   0F                 bsr    pdata     print it  FC6B 10CE BE80               lds    #romstk   set rom stack  FC6F 7E   F8B7               jmp    montor    init romUniFLEX Monitor ROM                  21:03:55  Aug 20, 2024   Page   18System Configuration                                                                          * String display routine >FC72 BD   FCC6     newlin    jsr    outch     output cr  FC75 86   0A                 lda    #$a       setup line feed >FC77 BD   FCC6     putch     jsr    outch     output it  FC7A A6   80       pdata     lda    0,x+      get string character  FC7C 27   06                 beq    pdata2    end of string?  FC7E 81   0D                 cmpa   #$d       is it cr?  FC80 27   F0                 beq    newlin  FC82 20   F3                 bra    putch     go output char  FC84 39            pdata2    rts              return                                          * Output a space  FC85 34   02       outsp     pshs   a         save a  FC87 86   20                 lda    #$20      setup space  FC89 8D   3B                 bsr    outch     output it  FC8B 35   82                 puls   a,pc      return                                          * Output hex word  FC8D 8D   02       hexwrd    bsr    hexbyt  FC8F 1F   98                 tfr    b,a                                          * Output a hex byte  FC91 34   02       hexbyt    pshs   a         save byte  FC93 44                      lsra             shift right 4 bits  FC94 44                      lsra  FC95 44                      lsra  FC96 44                      lsra  FC97 8D   02                 bsr    hexdig    output it  FC99 35   02                 puls   a         restore digit                                          * Output a digit in hex  FC9B 84   0F       hexdig    anda   #$0f      mask low bits  FC9D 8B   30                 adda   #'0       make ascii digit  FC9F 81   39                 cmpa   #'9       is it digit?  FCA1 23   23                 bls    outch  FCA3 8B   07                 adda   #7        add letter bias  FCA5 20   1F                 bra    outch                                          * Test for an input character  FCA7 34   02       inchck    pshs   a         save a  FCA9 B6   F000               lda    acia      get status  FCAC 44                      lsra             check status bit  FCAD 35   82                 puls   a,pc      return                                          * Input a character with echo  FCAF B6   F000     inch      lda    acia      get status  FCB2 44                      lsra             check bit  FCB3 24   FA                 bcc    inch      wait for character  FCB5 B6   F001               lda    acia+1    get character  FCB8 84   7F                 anda   #$7f      mask parity  FCBA 27   F3                 beq    inch      ignore nullsUniFLEX Monitor ROM                  21:03:55  Aug 20, 2024   Page   19System Configuration                                  FCBC 81   61                 cmpa   #'a       is it lower case?  FCBE 25   06                 blo    outch  FCC0 81   7A                 cmpa   #'z  FCC2 22   02                 bhi    outch  FCC4 80   20                 suba   #$20      make upper case                                          * Output character routine  FCC6 34   02       outch     pshs   a         save character  FCC8 B6   F000     outchw    lda    acia      get status  FCCB 85   02                 bita   #2        check status  FCCD 27   F9                 beq    outchw  FCCF 35   02                 puls   a         get character  FCD1 B7   F001               sta    acia+1    output it  FCD4 39                      rts              return                                          * Get address  FCD5 8D   0A       getadr    bsr    getbyt    get byte  FCD7 A7   E3                 sta    0,--s     save on stack  FCD9 25   04                 bcs    getext  FCDB 8D   04                 bsr    getbyt    get byte  FCDD A7   61                 sta    1,s  FCDF 35   86       getext    puls   d,pc      return                                          * Get byte  FCE1 32   7F       getbyt    leas   -1,s  FCE3 8D   11                 bsr    gethex    input hex digit  FCE5 25   0C                 bcs    hexit  FCE7 48                      lsla  FCE8 48                      lsla  FCE9 48                      lsla  FCEA 48                      lsla  FCEB A7   E4                 sta    0,s  FCED 8D   07                 bsr    gethex    get hex digit  FCEF 25   02                 bcs    hexit  FCF1 AA   E4                 ora    0,s  FCF3 32   61       hexit     leas   1,s       clean stack  FCF5 39                      rts              return                                          * Get hex digit >FCF6 BD   FCAF     gethex    jsr    inch      get character  FCF9 81   30                 cmpa   #'0       is it digit?  FCFB 25   11                 blo    nothex  FCFD 81   39                 cmpa   #'9  FCFF 23   0A                 bls    idigit  FD01 81   41                 cmpa   #'A  FD03 25   09                 blo    nothex  FD05 81   46                 cmpa   #'F  FD07 22   05                 bhi    nothex  FD09 80   07                 suba   #'A-'0-10  FD0B 80   30       idigit    suba   #'0  FD0D 39                      rts              return  FD0E 1A   01       nothex    sec              set carryUniFLEX Monitor ROM                  21:03:56  Aug 20, 2024   Page   20System Configuration                                  FD10 39                      rts              return                                          * Initialize the terminal  FD11 34   06       tinit     pshs   d         save reg  FD13 86   03                 lda    #$3       reset acia  FD15 B7   F000               sta    acia  FD18 86   15                 lda    #$15      set up bits & stuff  FD1A B7   F000               sta    acia  FD1D CC   3A98               ldd    #15000    delay some here  FD20 83   0001     tinit2    subd   #1  FD23 26   FB                 bne    tinit2  FD25 35   86                 puls   d,pc      return                                          * messages  FD27 0D            hello     fcb    $d  FD28 55 6E 69 46             fcc    'UniFLEX Boot ROM (CPU09:MMU/IDE/MON/FLP:0.60)',$d,0  FD57 0D            prompt    fcb    $d  FD58 25 00                   fcc    '%',0  FD5A 3F 3F 00      sorry     fcc    '??',0  FD5D 0D            panicy    fcb    $d  FD5E 50 61 6E 69             fcc    'Panic -> ',0                     UniFLEX Monitor ROM                  21:03:56  Aug 20, 2024   Page   21Memory Modify Command                                                    *                     * Modify system memory                     *  FD68               modify  FD68 17   FF6A               lbsr   getadr    get starting address  FD6B 25   53                 bcs    mod99     exit if error  FD6D ED   5C                 std    lowadr,u  save address                     *  FD6F 8E   FDC1     mod10     ldx    #modm00  FD72 BD   FC7A               jsr    pdata  FD75 A6   5C                 lda    lowadr,u  print address  FD77 BD   FC91               jsr    hexbyt  FD7A A6   5D                 lda    lowadr+1,u  FD7C BD   FC91               jsr    hexbyt  FD7F BD   FC85               jsr    outsp  FD82 AE   5C                 ldx    lowadr,u  get byte address  FD84 A6   84                 lda    0,x       get value  FD86 34   02                 pshs   a         save current value  FD88 BD   FC91               jsr    hexbyt    output it  FD8B BD   FC85               jsr    outsp     print a space  FD8E BD   FCF6               jsr    gethex    get a hex digit  FD91 25   1F                 bcs    mod30     jump if error  FD93 48                      asla  FD94 48                      asla  FD95 48                      asla  FD96 48                      asla  FD97 A7   E4                 sta    0,s       update value  FD99 BD   FCF6               jsr    gethex    get second hex digit  FD9C 25   20                 bcs    mod40     exit if error  FD9E AA   E0                 ora    ,s+       compute total value  FDA0 AE   5C       mod20     ldx    lowadr,u  get memory address  FDA2 A7   80                 sta    ,x+       update memory  FDA4 AF   5C                 stx    lowadr,u  update address  FDA6 20   C7                 bra    mod10     continue with next byte  FDA8 35   02       mod50     puls   a  FDAA AE   5C                 ldx    lowadr,u  FDAC 30   1F                 leax   -1,x  FDAE AF   5C                 stx    lowadr,u  FDB0 20   BD                 bra    mod10                     *  FDB2 81   5E       mod30     cmpa   #'^       is it "go back" char?  FDB4 27   F2                 beq    mod50  FDB6 81   2E                 cmpa   #'.       is it "go on" char?  FDB8 26   04                 bne    mod40     no - exit  FDBA 35   02                 puls   a         restore original value  FDBC 20   E2                 bra    mod20     yes - move to next address                     *  FDBE 32   61       mod40     leas   1,s       clean up stack  FDC0 39            mod99     rts              return                     *  FDC1 0D 20 20 2D   modm00    fcc    $d,'  - ',0                     UniFLEX Monitor ROM                  21:03:56  Aug 20, 2024   Page   22Memory Modify Command                                                    *                     * J - Jump to user program                     *  FDC7               jumpprg  FDC7 BD   FCD5               jsr    getadr    get routine address  FDCA 25   04                 bcs    jump99    exit if error  FDCC 1F   01                 tfr    d,x       get address  FDCE AD   84                 jsr    0,x       call routine  FDD0 39            jump99    rts                                          UniFLEX Monitor ROM                  21:03:56  Aug 20, 2024   Page   23High-Level Interrupt Handling                                            *****************************************************************                     *                     * Interrupt handling code - Highest level                     *                     * Should match with inthand code in specific kernel version                     *                     *****************************************************************  FE10                         org    hirom                                          * Process firq                     * either CC,PC or CC....PC (in 6809 or 6309 stack format)                     *                     *   13 PCL  PCL    PCL                     *   12 PCH  PCH    PCH                     *   11 CC   CC     UL    PCL                     *   10      -1,S   UH    PCH                     *   9       YL     YL    UL                     *   8       YH     YH    UH                     *   7       XL     XL    YL                     *   6       XH     XH    YH                     *   5       DP     DP    XL                     *   4       F      F     XH                     *   3       E      E     DP                     *   2       B      B     B                     *   1       A      A     A                     *   0       CC     CC    CC                     *                     * E,F,I are set in new CC  FE10               ufirq     seti   disable   ALL interrupts  FE10 1A   50                 orcc   #$50                               endm  FE12 32   7F                 leas   -1,s      make room on stack  FE14 34   38                 pshs   dp,x,y    push all regs like irq  FE16 1F   8B                 tfr    a,dp      create working register                     *  FE18 B6   FE00               lda    uisctr    stack depth  FE1B 81   0C                 cmpa   #STKSIZ-2 63X09 or 68X09 long stack  FE1D 25   04                 blo    10f  FE1F 32   66                 leas   6,s       clean up stack, already ok  FE21 20   10                 bra    01f                     * we don't know the USER cpu mode, but we set it for 63X09                     * if we are wrong, the user process is the victim :-)  FE23               10        pshsw  FE23 1038                    fdb    $1038                               endm  FE25 1F   B8                 tfr    dp,a      restore a  FE27 34   07                 pshs   cc,d      push all regs like irq  FE29 A6   6B                 lda    11,s      get old cc  FE2B EF   6A                 stu    10,s      store proper u reg  FE2D 8A   80                 ora    #$80      set entire bit in cc  FE2F A7   E4                 sta    0,s  FE31 86   0E                 lda    #STKSIZ   we force 63X09 TODO!!UniFLEX Monitor ROM                  21:03:56  Aug 20, 2024   Page   24High-Level Interrupt Handling                                            *  FE33 B7   BF3B     01        sta    ustksz  FE36 8E   000A               ldx    #frqvec   point to firq vector  FE39 20   4C                 bra    process                                          * Process a USER SWI type interrupt, ints are disabled  FE3B 8E   0002     uswi      ldx    #swivec   get vector  FE3E 20   47                 bra    process   process the int                                          * Process an USER TRAP interrupt  FE40               utrap     bitmd  %10000000  FE40 113C                    fdb    $113c  FE42 80                      fcb    %10000000                               endm  FE43 26   04                 bne    01f  FE45 C6   07                 ldb    #BARGI    illegal instruction  FE47 20   02                 bra    02f  FE49 C6   0C       01        ldb    #DIVZI    div by 0  FE4B 8E   0008     02        ldx    #nmivec   set for nmi vector  FE4E 20   37                 bra    process   set int masks                                          *                     * Process USER NMI, this IS a process TRAP                     *  FE50 1F   AB       unmi      tfr    cc,dp     masks are set  FE52 1F   42                 tfr    s,y  FE54 1F   03                 tfr    d,u       save D contents  FE56 F6   FE00               ldb    uisctr    stack depth  FE59 C0   02                 subb   #2  FE5B 31   A5                 leay   b,y  FE5D 10AE A4                 ldy    0,y       get old PC 63X or 68X                     *  FE60 7F   FE02               clr    k_u_map   bring in kernel map                     * now BXXX is ust area , sp is handled later  FE63 BF   BF57               stx    userx  FE66 FF   BF55               stu    userd  FE69 10BF BF59               sty    userpc                     *  FE6D 1F   B8                 tfr    dp,a      save user cc  FE6F B7   BF54               sta    usercc  FE72 8E   0008               ldx    #nmivec   set vector  FE75 C6   07                 ldb    #FALTI    set fault  FE77 85   10                 bita   #$10      ints masked?  FE79 27   11                 beq    prcs2  FE7B C6   09                 ldb    #TIMEI    set timeout  FE7D 20   0D                 bra    prcs2     kernel already mapped in                                          * swi2 processor  USER SWI2  FE7F 8E   0004     uswi2     ldx    #sw2vec   set vector  FE82 20   03                 bra    process                                          * Process an IRQ type interrupt, ints are disabledUniFLEX Monitor ROM                  21:03:57  Aug 20, 2024   Page   25High-Level Interrupt Handling                         FE84 8E   0000     uirq      ldx    #irqvec   get vector                                          *                     * map in kernel memory                     * Process the user interrupt                     * B has FAULT CODE for NMI                     * X has function address                     *  FE87               process   seti  FE87 1A   50                 orcc   #$50                               endm  FE89 7F   FE02               clr    k_u_map   task mapper to kernel                     *                     * kernel memory map already activated                     * common part for hardware ints                     * B has FAULT CODE for NMI                     * all INTS masked                     *  FE8C 20   1B       prcs2     bra    doint     return in common handler                     *                     *                     * Handle swi3 - system call interrupt                     *  FE8E 1C   FE       uswi3     clc              clear the carry bit  FE90 1F   AB                 tfr    cc,dp     save cc  FE92                         seti   mask      ints  FE92 1A   50                 orcc   #$50                               endm  FE94 7F   FE02               clr    k_u_map   map in kernel  FE97 FD   BF55               std    userd     save d register  FE9A BF   BF57               stx    userx     save x register  FE9D 8E   0006               ldx    #sw3vec   swi3 handler  FEA0 1F   B8                 tfr    dp,a  FEA2 B7   BF54               sta    usercc  FEA5 84   AF                 anda   #!$50  FEA7 1F   8B                 tfr    a,dp                     *                     * common code for interrupt handling                     *               FEA9  doint     equ    *  FEA9 10FF BF40               sts    usp       save user stack pointer  FEAD 10CE BF38               lds    #sysstk   set system stack  FEB1 4F                      clra             set dp to 0  FEB2 1F   8B                 tfr    a,dp  FEB4 0F   0F                 clr    <kernel   tell kernel code we are here  FEB6 B6   FE00               lda    uisctr    what was cpu mode?  FEB9 B7   BF3B               sta    ustksz  FEBC                         ldmd   $03       force 63X09  FEBC 113D                    fdb    $113d  FEBE 03                      fcb    $03                               endm                     *UniFLEX Monitor ROM                  21:03:57  Aug 20, 2024   Page   26High-Level Interrupt Handling                                            * for NMI, it is essential that the B register has been retained                     *  FEBF AD   94                 jsr    [0,x]     execute handler                     *                     * common return from interrupt handler                     *  FEC1               retint    seti   mask      ints  FEC1 1A   50                 orcc   #$50                               endm  FEC3 96   10                 lda    <chpflg   change tasks?  FEC5 27   04                 beq    reti35  FEC7 AD   9F 0011            jsr    [chtask]  change tasks                     *                     * here prepare to setup user task again                     *  FECB 0A   0F       reti35    dec    <kernel                     * kernel runs as 63X09  FECD B6   BF3B               lda    ustksz    was it 6909 or 6309  FED0 27   07                 beq    uirt01    not set, assume 63X09  FED2 81   0D                 cmpa   #13       63x09?  FED4 22   03                 bhi    uirt01    leave as is                     * 68X09 emulation with long FIRQ  FED6                         ldmd   $02       force 68X09 but with long FIRQ  FED6 113D                    fdb    $113d  FED8 02                      fcb    $02                               endm  FED9 7D   BF42     uirt01    tst    urelod    new task?  FEDC 27   19                 beq    usrrti                     *                     * Load Memory Mapper registers for new task                     *  FEDE 4F            remap     clra  FEDF B7   BF42               sta    urelod    erase the flag!  FEE2 C6   10                 ldb    #segadr   set segment size (16)  FEE4                         trfr   D,W  FEE4 1F                      fcb    $1f  FEE5 06                      fcb    D<<4|W                               endm  FEE6 CE   F400               ldu    #datbox   point to dat ram  FEE9 B6   BF43               lda    umapno    get task number  FEEC 27   37                 beq    ufail  FEEE 3D                      mul              calculate map location  FEEF 33   CB                 leau   d,u       point to it  FEF1 8E   BF44               ldx    #usrmap   mem table for user process  FEF4                         tfm1   X,U  FEF4 1138                    fdb    $1138  FEF6 13                      fcb    X<<4|U                               endm                     *                     * map in user task memory, but set SP first                     *  FEF7 10FE BF40     usrrti    lds    usp       reset to user stackUniFLEX Monitor ROM                  21:03:57  Aug 20, 2024   Page   27High-Level Interrupt Handling                         FEFB B6   BF43               lda    umapno    get current task  FEFE 27   25                 beq    ufail     blowup if 0 map number  FF00 B7   FE03               sta    tlatch    set task mapper for return                     * set user task memory map  FF03 86   80                 lda    #%10000000 select user map / vector set  FF05 B7   FE02               sta    k_u_map   set user map                     *                     * release kernel map, but just so that the RTI opcode is read yet                     *  FF08 B7   FE01     krnrti    sta    cuddwn    adjust int count/fuse  FF0B 3B                      rti                     *  FF0C BD   FC60     hfail     jsr    panic     hardware rti failure  FF0F 48 61 72 64             fcc    'Hardware RTI failure ',0  FF25 BD   FC60     ufail     jsr    panic     blowup on 0 map number  FF28 5A 65 72 6F             fcc    'Zero map ',0                                          *                     * interrupt in kernel mode, IRQ                     *  FF32 4F            kirq      clra  FF33 1F   8B                 tfr    a,dp      FORCE DP to ZERO  FF35 0C   0F                 inc    <kernel  FF37 AD   9F 0000            jsr    [irqvec]  process interrupt  FF3B 0A   0F                 dec    <kernel  FF3D 20   C9                 bra    krnrti                     *                     * interrupt in kernel mode, NMI                     *  FF3F BE   E800     knmi      ldx    dbsign    check if kernel debug present  FF42 8C   A55A               cmpx   #DEBSIG   special pattern  FF45 26   04                 bne    knmix     no, just return  FF47 AD   9F E802            jsr    [debnmi]  enter debugger  FF4B 20   BB       knmix     bra    krnrti    return                                          *                     * interrupt in kernel mode, FIRQ                     *                     * E,F,I are set in new CC  FF4D               kfirq     seti   disable   ALL interrupts  FF4D 1A   50                 orcc   #$50                               endm  FF4F 32   7F                 leas   -1,s      make room on stack  FF51 34   38                 pshs   dp,x,y    push all regs like irq  FF53 1F   8B                 tfr    a,dp  FF55 B6   FE00               lda    uisctr  FF58 81   0C                 cmpa   #STKSIZ-2 63x09 or 68x09  FF5A 25   04                 blo    10f  FF5C 32   66                 leas   6,s       clean up  FF5E 20   0E                 bra    01f                     *  FF60               10        pshswUniFLEX Monitor ROM                  21:03:58  Aug 20, 2024   Page   28High-Level Interrupt Handling                         FF60 1038                    fdb    $1038                               endm  FF62 1F   B8                 tfr    dp,a      restore old A  FF64 34   07                 pshs   cc,d      push all regs like irq  FF66 A6   6B                 lda    11,s      get old cc  FF68 EF   6A                 stu    10,s      store proper u reg  FF6A 8A   80                 ora    #$80      set entire bit in cc  FF6C A7   E4                 sta    0,s                     *  FF6E 5F            01        clrb  FF6F 1F   9B                 tfr    b,dp      FORCE DP to ZERO  FF71 0C   0F                 inc    <kernel  FF73 AD   9F 000A            jsr    [frqvec]  do firqhandler  FF77 0A   0F                 dec    <kernel >FF79 16   FF8C               lbra   krnrti                                          *                     * System reset, COLD start                     *  FF7C 4F            kreset    clra  FF7D 10CE F7FF               lds    #inistk   here is RAM for sure  FF81 B7   FE01               sta    cuddwn    undo reset fetch                     * only HW level 0 allows for acces DAT  FF84 B7   FE03               sta    tlatch    select default 0  FF87 B7   FE02               sta    k_u_map   map in kernel  FF8A CC   FEFF               ldd    #rommap   setup kernel memory map E000-FFFF  FF8D FD   F40E               std    datbox+ioseg set E...+F...  FF90 BE   E800               ldx    dbsign    check if kernel debug present  FF93 8C   A55A               cmpx   #DEBSIG   special pattern  FF96 26   04                 bne    kresetx   no, just return  FF98 AD   9F E804            jsr    [debini]  FF9C 7E   F80E     kresetx   jmp    rinit     do sys init, find system RAM                                          *                     * System interrupts (unhandled)                     *  FF9F 7E   FC2F     kswi      jmp    unswi  FFA2 7E   FC36     kswi2     jmp    unswi2  FFA5 7E   FC3D     kswi3     jmp    unswi3  FFA8 7E   FC59     ktrap     jmp    cputrp                                          *                     * interrupt vector definitions                     *                       FFE0                         org    usrvec                       FFE0 FE40                    fdb    utrap  FFE2 FE8E                    fdb    uswi3  FFE4 FE7F                    fdb    uswi2  FFE6 FE10                    fdb    ufirq  FFE8 FE84                    fdb    uirqUniFLEX Monitor ROM                  21:03:58  Aug 20, 2024   Page   29High-Level Interrupt Handling                         FFEA FE3B                    fdb    uswi  FFEC FE50                    fdb    unmi  FFEE FF7C                    fdb    kreset                       FFF0                         org    vector                       FFF0 FFA8                    fdb    ktrap  FFF2 FFA5                    fdb    kswi3  FFF4 FFA2                    fdb    kswi2  FFF6 FF4D                    fdb    kfirq  FFF8 FF32                    fdb    kirq  FFFA FF9F                    fdb    kswi  FFFC FF3F                    fdb    knmi  FFFE FF7C                    fdb    kreset                                                    end0 Error(s) detected    15 Excessive BRANCH/JUMP(S) detectedUniFLEX Monitor ROM                  21:03:58  Aug 20, 2024   Page   30High-Level Interrupt Handling                       Symbol Table:Absolute Symbols:A        0008   B        0009   BARGI    0007   BLKHOL   00FD   CC       000A   CMDRSC   0011   CRLF     FA78   D        0000   DATSENSE 0000   DEBSIG   A55A   DIVZI    000C   DP       000B   E        000E   F        000F   FALTI    0007   IDEBSY   0080   IDEDMRQ  0040   IDEDRD   00C8   IDEDSC   0010   IDEDWR   00CA   IDEERR   0001   IDEINTR  0080   IDEIO16  0001   IDEIORY  0002   IDEIRQ   0004   IDERDY   0040   IDERSTR  0010   IDE_DSL  0010   IDE_LBA  0040   KILLI    0005   LSTPAG   00EF   L_ADDR   000F   L_CSEL   0010   L_DMAEN  0040   L_DREAD  0080   L_INTEN  0020   PATIME   0001   PATIMR   0080   PBLGHT   00FF   PBMTRP   0080   PC       0005   PIRQMSK  0080   R_RDOK   0005   S        0004   STKSIZ   000E   S_PG2FIF 00F8   TIMEI    0009   U        0003   V        0007   W        0006   X        0001   Y        0002   acia     F000   ascii    FFE4   badcmd   F9F4   bootorg  0800   brdbas0  F100   bufseg   000C   check    FB72   check2   FB7F   chpflg   0010   chtask   0011   commnd   F8E1   config   FB69   corcnt   0013   cormap   0110   count    FFFA   cpu_cpu5 0008   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_foi3 0004   cpu_foi4 0006   cpumod   000D   cputrp   FC59   cputyp   000C   cuddwn   FE01   datbox   F400   datmap   F420   datsiz   0400   dboot    F92B   dboot1   F936   dboot2   F944   dboot3   F953   dboot4   F95C   dbsign   E800   dcorct   F410   debini   E804   debnmi   E802   del      FAF3   delay    FAF1   digit    FFFB   dlen     001C   dmaadh   0010   dmaadl   0011   dmaltc   0013   doboot   FAEB   doint    FEA9   dummy    F9FA   dump10   FA19   dump20   FA32   dump30   FA4A   dump35   FA54   dump40   FA56   dump99   FA6A   dumpXY   FA17   exam99   FA16   examine  F9FB   fboot    F962   fboot1   F96D   fboot2   F97B   fboot3   F98A   fboot4   F993   fcp2io   03FD   fifo     0020   fifo_us3 001E   figle2   F90B   figle4   F920   figle5   F928   figlef   F8FF   fio2cp   03FC   fio_dba  E800   fio_dsz  0400   fio_fsz  0200   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flnwop   000A   flpdpr   E000   flpfifo  0020   flpint   03FE   flpstp   03F0   flptel   03FF   flrflg   0000   flstat   0008   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   frqvec   000A   getadr   FCD5   getbyt   FCE1   getext   FCDF   gethex   FCF6   getnx2   FBFB   getnxt   FBF2   getpag   FBEC   gotmem   FB94   gppbase  E000   hello    FD27   hexbyt   FC91   hexdig   FC9B   hexit    FCF3   hexwrd   FC8D   hfail    FF0C   hiadr    FFFE   hirom    FE10   ideadr0  0006   ideadr1  0008   ideadr2  000A   ideadr3  000C   idecmst  000E   idedat   0000   ideerft  0002   ider1    FAD4   idescnt  0004   idestat  0018   idigit   FD0B   inch     FCAF   inchck   FCA7   inistk   F7FF   ioseg    000E   irqvec   0000   isnrdy   FAA9   jump99   FDD0   jumpprg  FDC7   k_u_map  FE02   kernel   000F   kfirq    FF4D   kirq     FF32   knmi     FF3F   knmix    FF4B   kreset   FF7C   kresetx  FF9C   krnrti   FF08   kswi     FF9F   kswi2    FFA2   kswi3    FFA5   ktrap    FFA8   ldfl00   FB11   ldfl01   FB30   ldfl02   FB55   ldif01   FB00   ldif02   FB0C   limit    FFF7   loadi1   FA91   loadif   FAF7   loadip   FA83   loadxit  FAE3   lowadr   FFFC   lstmem   0014   mappe8   FA82   mapper   FA7A   memfal   FBFC   memmsk   0017   mod10    FD6F   mod20    FDA0   mod30    FDB2   mod40    FDBE   mod50    FDA8   mod99    FDC0   modify   FD68   modm00   FDC1   monpcra  F005   monpcrb  F007   monpdra  F004   monpdrb  F006   montor   F8B7   nboot    F999   newlin   FC72   nmivec   0008   nomap    00FD   nomem    FB93   nothex   FD0E   UniFLEX Monitor ROM                  21:03:58  Aug 20, 2024   Page   31High-Level Interrupt Handling                       notimr   FC12   nxtcmd   F8C0   offset   FFF5   outch    FCC6   outchw   FCC8   outsp    FC85   panic    FC60   panicy   FD5D   pcrlf    FA6E   pdata    FC7A   pdata2   FC84   prcs2    FE8C   process  FE87   prompt   FD57   putch    FC77   rammap   0100   rdmemb   F9BF   remap    FEDE   reti35   FECB   retint   FEC1   rhexbyt  F80C   rinch    F806   rinchk   F804   rinit    F80E   rinit2   F83D   rinit4   F8AE   rinit8   F827   rinit9   F820   rinod    F875   romadr   F800   rommap   FEFF   romseg   000F   romspr   0018   romstk   BE80   routch   F808   rpdata   F80A   rrinit   F800   rtinit   F802   searc2   F8E0   search   F8D6   segadr   0010   segmax   0100   segmnt   FFF4   segsiz   1000   sorry    FD5A   sw2vec   0004   sw3vec   0006   swivec   0002   sysmap   0100   sysram   0100   sysres   0000   sysseg   0000   sysstk   BF38   syssu2   FBA6   syssu4   FBB7   syssu5   FBC1   syssu6   FBCD   syssup   FB9C   systm1   FBDE   teluch   0016   tfrseg   000D   tinit    FD11   tinit2   FD20   tlatch   FE03   tstloc   D0F0   tstpat   99AA   txtseg   0005   uargp    BF3C   ubasdp   00BF   ubasea   BF00   udummy   BF38   ufail    FF25   ufirq    FE10   uirq     FE84   uirt01   FED9   uisctr   FE00   umapno   BF43   unfirq   FC4B   unhand   FC28   unmi     FE50   unnmi    FC44   unswi    FC2F   unswi2   FC36   unswi3   FC3D   urelod   BF42   usercc   BF54   userd    BF55   useres   0001   userpb   BF5B   userpc   BF59   userx    BF57   usp      BF40   usrmap   BF44   usrrti   FEF7   usrseg   000B   usrtop   000E   usrvec   FFE0   ustksz   BF3B   uswi     FE3B   uswi2    FE7F   uswi2v   BF3E   uswi3    FE8E   utrap    FE40   vector   FFF0   waitrst  FAA6   