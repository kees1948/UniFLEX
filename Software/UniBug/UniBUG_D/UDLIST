UniFLEX Monitor ROM                  09:29:47  Nov 13, 2024   Page    1Equates                                                                                       *                     * generic defines for unibug ROM                     *                               opt    lis                               opt    exp                       0000                         abs                                          *                     * Monitor ROM for booting UniFLEX and handling the UniFLEX                     * interrupt processing.                     * 2020-12-19  added init  step voor kernel debgger 0.08                     *                     * 2021-08-07  adapted the hirom code for handling the stacksize                     * differences between 63X09 and 68X09                     *                     * 2021-10-24  set stackpointer in DATBOX at first                     *                     * 2022-03-01  added floppy boot for CPU09GPP/09FLP                     *                     * 2022-11-23  fixed a nasty bug in kfirq                     *                     * 2023-04-01  restructured the interrupt handlers                     *                     * 2024-05-01  clear changemap added                     *                     * 2024-06-20 added netboot code 'N' opt                     * 2024-10-15 made fio_msg better                     *                                          * low ram interrupt vectors                       0000                         org    sysseg<<12                       0000               irqvec    rmb    2         maskable interrupt  0002               swivec    rmb    2         swi 1  0004               sw2vec    rmb    2         swi 2  0006               sw3vec    rmb    2         swi 3  0008               nmivec    rmb    2         non-maskable interrupt  000A               frqvec    rmb    2         fast interrupt                                          * low memory system storage                       000C               cputyp    rmb    1         cpu type  000D               cpumod    rmb    1         cpu mode 63/68  000E               usrtop    rmb    1         current user segment  000F               kernel    rmb    1         kernel/user state (-1 = user address space)  0010               chpflg    rmb    1         change process flag  0011               chtask    rmb    2         change process vector  0013               corcnt    rmb    1         core segment count  0014               lstmem    rmb    2         mem table end markerUniFLEX Monitor ROM                  09:29:48  Nov 13, 2024   Page    2Equates                                               0016               teluch    rmb    1         user change flag  0017               memmsk    rmb    1         dat cell mask  0018               romspr    rmb    1         spare byte for rom                                          * System and global memory maps  0100                         org    (sysseg<<12)+$100                       0100               sysmap    rmb    segadr    system memory map  0110               cormap    rmb    segmax    available memory list                                          * User block definitions                       BF38                         org    (usrseg<<12)+$f38                                    BF00  ubasea    set    (usrseg<<12)+$f00               00BF  ubasdp    set    ubasea/256                     *               BF38  sysstk    equ    *         system stack starts here  BF38               udummy    rmb    3         spare  BF3B               ustksz    rmb    1         save interrupt stack depth  BF3C               uargp     rmb    2         user argv pointer  BF3E               uswi2v    rmb    2         swi2 vector save                     * this _should_ be at ff40.  BF40               usp       rmb    2         user stack pointer  BF42               urelod    rmb    1         map reload flag  BF43               umapno    rmb    1         task map number  BF44               usrmap    rmb    segadr    user task memory map                     *  BF54               usercc    rmb    1         condition codes  BF55               userd     rmb    2         D register  BF57               userx     rmb    2         X register  BF59               userpc    rmb    2         PC register  BF5B               userpb    rmb    1         sys call post byte                                          UniFLEX Monitor ROM                  09:29:48  Nov 13, 2024   Page    3Initial ROM Processing                                                                        *                     * Rom code starts here                     *                       F800                         org    romadr                     *                     * I/O Vectors                     *  F800 F825                    fdb    rinit     cold start monitor  F802 FD36                    fdb    tinit     console init  F804 FCCC                    fdb    inchck    test console character ready  F806 FCD4                    fdb    inch      read one character fromconsoleterminal  F808 FCEB                    fdb    outch     write one character to console  F80A FC9F                    fdb    pdata     print a string (X)  F80C FCB6                    fdb    hexbyt    print one hex byte (A)                       F80E 55 6E 69 42             fcc    "UniBUG (_d)  2024-11-12"                                          *                     * bring monitor to life                     *  F825               rinit     seti  F825 1A   50                 orcc   #$50                               endm  F827 10CE BE80               lds    #romstk   set stack                     *  F82B 4F                      clra             set dp  F82C 1F   8B                 tfr    a,dp                     *  F82E 8E   F400               ldx    #datbox   fill datbox with blackholes  F831 108E 0400               ldy    #datsiz  F835 86   FD                 lda    #nomap    black hole  F837 8C   F40F     rinit9    cmpx   #datbox+romseg don't vanish myself  F83A 27   02                 beq    rinit8  F83C A7   84                 sta    0,x  F83E 30   01       rinit8    leax   1,x  F840 31   3F                 leay   -1,y  F842 26   F3                 bne    rinit9                     *  F844 CC   0100               ldd    #rammap  F847 B7   F40B               sta    datbox+usrseg setup user and system segments  F84A F7   F400               stb    datbox+sysseg  F84D 86   FD                 lda    #nomap    fill system map with blackholes  F84F C6   10                 ldb    #segadr   get length of map  F851 8E   0110               ldx    #sysmap+segadr point to map  F854 A7   82       rinit2    sta    0,-x      stuff into map cell  F856 5A                      decb             dec the count  F857 26   FB                 bne    rinit2                     *  F859 CC   FEFF               ldd    #rommap   complete the initial map  F85C ED   0E                 std    ioseg,x   set io and romUniFLEX Monitor ROM                  09:29:48  Nov 13, 2024   Page    4Initial ROM Processing                                F85E FD   F40E               std    datbox+ioseg  F861 CC   0100               ldd    #rammap  F864 A7   0B                 sta    usrseg,x  set user segment  F866 97   0E                 sta    usrtop  F868 E7   84                 stb    sysseg,x  set system segment  F86A 4F                      clra             init the direct page registers  F86B 97   0C                 sta    cputyp    clear cpu type  F86D 97   0D                 sta    cpumod  F86F 97   10                 sta    chpflg    clear change task flag  F871 97   13                 sta    corcnt    zero core count  F873 B7   BF42               sta    urelod  F876 B7   BF43               sta    umapno  F879 97   17                 sta    memmsk  F87B 97   16                 sta    teluch                     * all memory set  F87D B7   FE03               sta    tlatch    initializes latch to 0                     * init debugger hardware (if present)  F880 BE   E800               ldx    dbsign    check if kernel debug present  F883 8C   A55A               cmpx   #DEBSIG   special pattern  F886 26   04                 bne    rinod     no, just return  F888 AD   9F E804            jsr    [debini]  init debugger                     * set trap PIA and LED and TIMER  F88C 86   04       rinod     lda    #$04      select data register  F88E B7   F005               sta    monpcra  F891 B7   F007               sta    monpcrb  F894 4F                      clra             all output  F895 B7   F006               sta    monpdrb   LEDS off  F898 B7   F004               sta    monpdra   timer stop  F89B B7   F005               sta    monpcra   dir register  F89E B7   F007               sta    monpcrb  F8A1 86   0F                 lda    #$0f      select timer/rom control  F8A3 B7   F004               sta    monpdra  F8A6 86   FF                 lda    #$ff  F8A8 B7   F006               sta    monpdrb  F8AB 86   04                 lda    #$04      select data register  F8AD B7   F005               sta    monpcra  F8B0 B7   F007               sta    monpcrb   disabled mem trap irq                     *  F8B3 BD   FD36               jsr    tinit     init the terminal  F8B6 8E   FD4C               ldx    #hello    point to string  F8B9 BD   FC9F               jsr    pdata     print the string  F8BC 108E 0000               ldy    #irqvec   point to int vectors  F8C0 8E   FC4D               ldx    #unhand   and unhandeled routine  F8C3 C6   06                 ldb    #6        set count  F8C5 AF   A1       rinit4    stx    0,y++     store vector  F8C7 30   07                 leax   7,x       point to next panic  F8C9 5A                      decb  F8CA 26   F9                 bne    rinit4  F8CC 9F   11                 stx    chtask    set change task vector                     UniFLEX Monitor ROM                  09:29:48  Nov 13, 2024   Page    5Main Monitor Loop                                                                             *                     * Main monitor loop (command processor)                     *                                          * Loop starts here                       F8CE               montor  F8CE 10CE BE80               lds    #romstk  F8D2 33   E4                 leau   0,s       mark stack  F8D4 32   E8 E4              leas   -dlen,s   make temp space  F8D7 8E   FD7C     nxtcmd    ldx    #prompt   point to prompt string  F8DA BD   FC9F               jsr    pdata     output it  F8DD BD   FCD4               jsr    inch      get response  F8E0 BD   FCAA               jsr    outsp     output space  F8E3 8E   F8F8               ldx    #commnd   point to command table  F8E6 8D   05                 bsr    search    search for command  F8E8 AD   98 01              jsr    [1,x]     execute command  F8EB 20   E1                 bra    montor    repeat                                          * Search command table for command                       F8ED A1   84       search    cmpa   0,x       is it this guy?  F8EF 27   06                 beq    searc2  F8F1 30   03                 leax   3,x       skip this one  F8F3 6D   84                 tst    0,x       end of list?  F8F5 26   F6                 bne    search  F8F7 39            searc2    rts              return                                          * Command table                       F8F8 0D            commnd    fcb    $d        carriage return  F8F9 FA1F                    fdb    dummy  F8FB 43                      fcb    'C        Configure command  F8FC F916                    fdb    figlef  F8FE 44                      fcb    'D        Disk boot  F8FF F942                    fdb    dboot  F901 45                      fcb    'E        Examine  F902 FA20                    fdb    examine  F904 4D                      fcb    'M  F905 FD8D                    fdb    modify  F907 56                      fcb    'V        Mapper  F908 FA9F                    fdb    mapper  F90A 4A                      fcb    'J  F90B FDEC                    fdb    jumpprg  F90D 46                      fcb    'F  F90E F979                    fdb    fboot  F910 4E                      fcb    'N  F911 F9B0                    fdb    nboot  F913 00                      fcb    0         end of table  F914 FA19                    fdb    badcmd                     UniFLEX Monitor ROM                  09:29:49  Nov 13, 2024   Page    6Main Monitor Loop                                                        * Configure the system command                       F916 BD   FB8E     figlef    jsr    config    do configuration  F919 96   13       1         lda    corcnt    get core count  F91B 8B   07                 adda   #7        add in system core count  F91D A7   5A                 sta    count,u   save it  F91F CC   0000               ldd    #0        set count to 0  F922 8B   04       figle2    adda   #4        covert to decimal  F924 19                      daa  F925 C9   00                 adcb   #0        add in carry  F927 6A   5A                 dec    count,u  F929 26   F7                 bne    figle2    finished?  F92B 5D                      tstb             more than 99K of memory?  F92C 27   09                 beq    figle4  F92E 1E   89                 exg    a,b       do upper digit now  F930 8B   30                 adda   #$30  F932 BD   FCEB               jsr    outch     output it  F935 1E   98                 exg    b,a       get low back  F937 BD   FCB6     figle4    jsr    hexbyt    output byte  F93A BD   FCAA               jsr    outsp     output space  F93D 86   4B                 lda    #'K       output 'K'  F93F 7E   FCEB     figle5    jmp    outch                                          * Disk boot commands                     * IDE boot  F942 BD   FB8E     dboot     jsr    config    configure system                     *  F945 5F                      clrb  F946 CE   F100               ldu    #brdbas0  F949 108E 4E20               ldy    #20000  F94D BD   FCCC     dboot1    jsr    inchck    key pressed  F950 25   09                 bcs    dboot2  F952 17   01C1               lbsr   delay  F955 31   3F                 leay   -1,y  F957 26   F4                 bne    dboot1  F959 20   0F                 bra    dboot3                     *  F95B BD   FCD4     dboot2    jsr    inch      get character from keyboard  F95E 81   0D                 cmpa   #$0d      ENTER?  F960 27   08                 beq    dboot3  F962 81   31                 cmpa   #'1  F964 22   04                 bhi    dboot3    invalid  F966 80   30                 suba   #'0  F968 1F   89                 tfr    a,b                     *  F96A BD   FAA8     dboot3    jsr    loadip    load the ipl sector  F96D 27   04                 beq    dboot4  F96F BD   FCB6               jsr    hexbyt  F972 39                      rts                     *  F973 10CE BF38     dboot4    lds    #sysstk   setup UniFLEX stack  F977 6E   84                 jmp    0,x       go do the bootUniFLEX Monitor ROM                  09:29:49  Nov 13, 2024   Page    7Main Monitor Loop                                                                             * floppy boot  F979 BD   FB8E     fboot     jsr    config    configure system                     *  F97C 5F                      clrb  F97D CE   E000               ldu    #gppbase  floppy interface  F980 108E 4E20               ldy    #20000  F984 BD   FCCC     fboot1    jsr    inchck    key pressed  F987 25   09                 bcs    fboot2  F989 17   018A               lbsr   delay  F98C 31   3F                 leay   -1,y  F98E 26   F4                 bne    fboot1  F990 20   0F                 bra    fboot3                     *  F992 BD   FCD4     fboot2    jsr    inch      get character from keyboard  F995 81   0D                 cmpa   #$0d      ENTER?  F997 27   08                 beq    fboot3  F999 81   31                 cmpa   #'1  F99B 22   04                 bhi    fboot3    invalid  F99D 80   30                 suba   #'0  F99F 1F   89                 tfr    a,b                     *  F9A1 BD   FB1C     fboot3    jsr    loadif    load the ipl sector  F9A4 27   04                 beq    fboot4  F9A6 BD   FCB6               jsr    hexbyt  F9A9 39                      rts                     *  F9AA 10CE BF38     fboot4    lds    #sysstk   setup UniFLEX stack  F9AE 6E   84                 jmp    0,x       go do the boot                                          *                     * N - netboot                     *                     *                     * defines for netboot                     *                     *                     * from fio.h                     *               E800  fio_dba   equ    $e800               001E  fifo_us3  equ    $001e               0020  fifo      equ    $0020                     *               0400  fio_dsz   equ    1024               0200  fio_fsz   equ    512                     *                     * from fio.h                     *               0000  cpu_fio   equ    0               0001  cpu_fio1  equ    1               0003  cpu_fio2  equ    3               0004  cpu_foi3  equ    4UniFLEX Monitor ROM                  09:29:49  Nov 13, 2024   Page    8Main Monitor Loop                                                  0006  cpu_foi4  equ    6               0008  cpu_cpu5  equ    8                     *                     * from fio_codes.h                     *               0005  R_RDOK    equ    $05                     *                     * from nwp_codes.h                     *               00F8  S_PG2FIFO equ    $f8                     *                     * missing 63x09 macro's                     *                     addr      macro                               fdb    $1030                               fcb    &1<<4|&2                               endm                     *                     ldwi      macro                               fdb    $1086                               fdb    &1                               endm                     *               F9B0  nboot     equ    *  F9B0 BD   FB8E               jsr    config    setup memory                     *  F9B3 FC   E800               ldd    fio_dba   is hardware present  F9B6 26   05                 bne    01f  F9B8 FC   E802               ldd    fio_dba+2 IS cleared only after reset  F9BB 27   06                 beq    02f                     * not found  F9BD 86   3F       01        lda    #'?       tell user  F9BF BD   FCEB               jsr    outch  F9C2 39                      rts                     *                     * bring bootcode into memory                     *  F9C3 CE   E800     02        ldu    #fio_dba  hardware address  F9C6 CC   FFFF               ldd    #$ffff  F9C9 ED   41                 std    cpu_fio1,u fake sequence  F9CB 8E   0800               ldx    #bootorg  F9CE 34   10                 pshs   x  F9D0 4F                      clra  F9D1 C6   7E                 ldb    #%01111110 memory page to copy from GPPROM  F9D3 8D   01                 bsr    rdmemb  F9D5 39                      rts                                          *                     * subroutine to copy fifo data to kernel memory                     *  F9D6 34   16       rdmemb    pshs   d,x  F9D8 ED   C8 1E              std    fifo_us3,uUniFLEX Monitor ROM                  09:29:50  Nov 13, 2024   Page    9Main Monitor Loop                                     F9DB C6   F8                 ldb    #S_PG2FIFO command, copy block to fifo  F9DD E7   C4                 stb    cpu_fio,u  F9DF 8E   0400               ldx    #fio_dsz  device size  F9E2                         addr   U,X       U+X >X  F9E2 1030                    fdb    $1030  F9E4 31                      fcb    U<<4|X                               endm  F9E5 30   1E                 leax   -2,x      find interrupt flag locations  F9E7 E7   01                 stb    1,x       cpu_fioF   tell GPP  F9E9 86   2B                 lda    #'+  F9EB BD   FCEB               jsr    outch  F9EE E6   01       12        ldb    1,x  F9F0 26   FC                 bne    12b       wait until taken                     *  F9F2 E6   84       03        ldb    0,x       fio_cpuF   read GPP  F9F4 27   FC                 beq    03b  F9F6 C1   05                 cmpb   #R_RDOK   right response?  F9F8 27   06                 beq    07f                     * >F9FA BD   F9BD               jsr    01b       something wrong!  F9FD 32   66                 leas   6,s       skip registers and return address  F9FF 39                      rts              to UniBUG                     *  FA00 86   3D       07        lda    #'=       tell answer came  FA02 BD   FCEB               jsr    outch  FA05 34   70                 pshs   x,y,u  FA07                         ldwi   fio_fsz   count = fifo size  FA07 1086                    fdb    $1086  FA09 0200                    fdb    fio_fsz                               endm  FA0B AE   68                 ldx    8,s       destination  FA0D 31   C8 20              leay   fifo,u    source  FA10                         tfm1   Y,X       transfer  FA10 1138                    fdb    $1138  FA12 21                      fcb    Y<<4|X                               endm  FA13 35   70                 puls   x,y,u  FA15 6F   84                 clr    0,x       fio_cpuF, tell GPP we took it  FA17 35   96                 puls   d,x,pc                                          * Bad command                       FA19 8E   FD7F     badcmd    ldx    #sorry    point to string  FA1C BD   FC9F               jsr    pdata     output it  FA1F 39            dummy     rts              return                     UniFLEX Monitor ROM                  09:29:50  Nov 13, 2024   Page   10Memory Examine Command                                                   *                     * Examine memory (system)                     *  FA20               examine  FA20 BD   FCFA               jsr    getadr    get low address  FA23 25   16                 bcs    exam99  FA25 ED   5C                 std    lowadr,u  save low limit  FA27 86   2D                 lda    #'-  FA29 BD   FCEB               jsr    outch  FA2C BD   FCFA               jsr    getadr    get high address  FA2F 25   0A                 bcs    exam99  FA31 ED   5E                 std    hiadr,u   save high limit  FA33 AE   5C                 ldx    lowadr,u  set up for dump  FA35 10AE 5E                 ldy    hiadr,u >FA38 BD   FA3C               jsr    dumpXY    go print dump  FA3B 39            exam99    rts                     *                     * dumpXY - Dump memory from (X) to (Y)                     *    (X) - Lowest address to dump                     *    (Y) - Highest address to dump                     *    jsr dumpXY                     *  FA3C 34   70       dumpXY    pshs   x,y,u     save registers                     *                     * Print one line (16 bytes) of data                     * >FA3E BD   FA93     dump10    jsr    pcrlf     start a new print line  FA41 A6   E4                 lda    0,s       print address  FA43 BD   FCB6               jsr    hexbyt  FA46 A6   61                 lda    1,s  FA48 BD   FCB6               jsr    hexbyt  FA4B BD   FCAA               jsr    outsp  FA4E BD   FCAA               jsr    outsp  FA51 AE   E4                 ldx    0,s  FA53 C6   10                 ldb    #16       print 16 bytes  FA55 34   04                 pshs   b  FA57 A6   80       dump20    lda    ,x+       get next byte to print  FA59 BD   FCB6               jsr    hexbyt  FA5C BD   FCAA               jsr    outsp  FA5F 6A   E4                 dec    0,s       done?  FA61 26   F4                 bne    dump20    no - go back  FA63 AE   61                 ldx    1,s       now print characters  FA65 BD   FCAA               jsr    outsp  FA68 BD   FCAA               jsr    outsp  FA6B C6   10                 ldb    #16  FA6D E7   E4                 stb    0,s  FA6F A6   80       dump30    lda    ,x+       get next byte  FA71 81   20                 cmpa   #$20      printable?  FA73 25   04                 blo    dump35    no  FA75 81   7F                 cmpa   #$7F  FA77 25   02                 blo    dump40    go print character  FA79 86   2E       dump35    lda    #'.       print period for unprintableUniFLEX Monitor ROM                  09:29:50  Nov 13, 2024   Page   11Memory Examine Command                                FA7B BD   FCEB     dump40    jsr    outch     print character  FA7E 6A   E4                 dec    0,s       done?  FA80 26   ED                 bne    dump30  FA82 32   61                 leas   1,s       clean up stack  FA84 BD   FCCC               jsr    inchck    abort if character struck  FA87 25   06                 bcs    dump99  FA89 AF   E4                 stx    0,s       update address  FA8B AC   62                 cmpx   2,s       any more?  FA8D 23   AF                 bls    dump10    yes - go to it  FA8F 8D   02       dump99    bsr    pcrlf  FA91 35   F0                 puls   x,y,u,pc  return                     *                     * pcrlf - print carriage return/line feed                     *  FA93 34   16       pcrlf     pshs   d,x       save registers  FA95 8E   FA9D               ldx    #CRLF  FA98 BD   FC9F               jsr    pdata  FA9B 35   96                 puls   d,x,pc    return  FA9D 0D 00         CRLF      fcc    $d,0                                          *                     * Map memory into buffer ($d000)                     *  FA9F BD   FD06     mapper    jsr    getbyt    get byte  FAA2 25   03                 bcs    mappe8  FAA4 B7   F40D               sta    datbox+$d  FAA7 39            mappe8    rts              return                                          *                     *   IDE Bootstrap                     *   reset the stack and set up direct addressing                     *   U contains controller base address                     *   B contains drive select bits                     *  FAA8               loadip    seti   irq,firq  disable irq and firq  FAA8 1A   50                 orcc   #$50                               endm  FAAA 34   04                 pshs   b         save dest drive  FAAC C4   01                 andb   #%00000001  FAAE 34   04                 pshs   b         save drive bits  FAB0 27   04                 beq    loadi1  FAB2 86   10                 lda    #IDE_DSL  drive select bit  FAB4 A7   E4                 sta    0,s  FAB6               loadi1                     *                     *   quiesce the dma (in case it is active)                     *  FAB6 6F   C8 13              clr    dmaltc,u  disable everything                     *  FAB9 CC   0040               ldd    #IDE_LBA  FABC EA   E4                 orb    0,s       drive select bit  FABE ED   4C                 std    ideadr3,u LBA 24...27, drive 0UniFLEX Monitor ROM                  09:29:51  Nov 13, 2024   Page   12IDE Bootstrap                                                            *  FAC0 EC   4E                 ldd    idecmst,u read status  FAC2 C1   50                 cmpb   #(IDERDY+IDEDSC) idle  FAC4 26   42                 bne    loadxit   drive not ready                     *  FAC6 CC   0010               ldd    #IDERSTR  FAC9 ED   4E                 std    idecmst,u restore drive >FACB 17   0048     waitrst   lbsr   delay                     * >FACE 17   0045     isnrdy    lbsr   delay  FAD1 EC   4E                 ldd    idecmst,u check if done  FAD3 C5   80                 bitb   #IDEBSY  FAD5 26   F7                 bne    isnrdy                     *  FAD7 CC   0001               ldd    #1  FADA ED   44                 std    idescnt,u sector count  FADC 5F                      clrb             LBA 0  FADD ED   46                 std    ideadr0,u first sector LBA 0...7  FADF ED   48                 std    ideadr1,u LBA 8...15  FAE1 ED   4A                 std    ideadr2,u LBA 16...23  FAE3 CC   0040               ldd    #IDE_LBA  FAE6 EA   E4                 orb    0,s       drive select bit  FAE8 ED   4C                 std    ideadr3,u LBA 24...27, drive 0  FAEA CC   0800               ldd    #bootorg  load real boot address  FAED ED   C8 10              std    dmaadh,u  FAF0 86   C0                 lda    #L_DREAD+L_DMAEN  FAF2 A7   C8 13              sta    dmaltc,u  set high addr  FAF5 C6   C8                 ldb    #IDEDRD  FAF7 ED   4E                 std    idecmst,u  FAF9 A6   C8 18    ider1     lda    idestat,u  FAFC 85   80                 bita   #IDEINTR  FAFE 27   F9                 beq    ider1     wait for done  FB00 EC   4E                 ldd    idecmst,u read status  FB02 C5   01                 bitb   #IDEERR  FB04 27   0A                 beq    doboot  FB06 1F   98                 tfr    b,a                     * faillure  FB08 E7   61       loadxit   stb    1,s       save status  FB0A 86   FF                 lda    #$ff      set bad  FB0C A7   E4                 sta    0,s  FB0E 35   86                 puls   d,pc                     *  FB10 8E   0800     doboot    ldx    #bootorg  where boot is loaded  FB13 4F                      clra             set status  FB14 35   86                 puls   d,pc      D has drive select info                     *  FB16 86   40       delay     lda    #64       set up a delay counter  FB18 4A            del       deca             decrement the delay count  FB19 26   FD                 bne    del       hang in there for the count  FB1B 39                      rts                                    0011  CMDRSC    equ    %00010001 read sectorUniFLEX Monitor ROM                  09:29:51  Nov 13, 2024   Page   13FLP Bootstrap                                                                                 *                     *   FLP Bootstrap                     *   reset the stack and set up direct addressing                     *   U contains controller base address                     *  FB1C               loadif    seti   irq,firq  disable irq and firq  FB1C 1A   50                 orcc   #$50                               endm  FB1E C6   10                 ldb    #16  FB20 8E   E010               ldx    #flpdpr+16 check if controoler there  FB23 A6   84                 lda    0,x  FB25 AB   80       ldif01    adda   0,x+      if these locations are all 0  FB27 5A                      decb  FB28 26   FB                 bne    ldif01  FB2A 4D                      tsta  FB2B 27   04                 beq    ldif02    assume controller present  FB2D CC   00FF               ldd    #$ff  FB30 39                      rts                       FB31 CC   0000     ldif02    ldd    #0  FB34 34   06                 pshs   d                     *                     *                     *  FB36 CC   0000     ldfl00    ldd    #0  FB39 ED   42                 std    flblkm,u  FB3B A7   41                 sta    flblkh,u  FB3D CC   0200               ldd    #$200     PAGSIZ  FB40 ED   44                 std    fltsiz,u  FB42 E7   49                 stb    fldriv,u  FB44 47                      asra  FB45 A7   4A                 sta    flnwop,u  FB47 EC   E4                 ldd    0,s  FB49 ED   4B                 std    fltsid,u  start single side/dens/8"  FB4B 86   11                 lda    #CMDRSC  FB4D A7   C4                 sta    flrflg,u  FB4F 86   FF                 lda    #$ff  FB51 A7   C9 03FF            sta    flptel,u                     *  FB55 A6   C9 03FE  ldfl01    lda    flpint,u  FB59 27   FA                 beq    ldfl01  FB5B 6F   C9 03FE            clr    flpint,u  FB5F A6   48                 lda    flstat,u  FB61 27   17                 beq    ldfl02    no error, copy to memory  FB63 A6   61                 lda    1,s  FB65 88   01                 eora   #1  FB67 A7   61                 sta    1,s  FB69 26   CB                 bne    ldfl00  FB6B A6   E4                 lda    0,s  FB6D 88   40                 eora   #$40      set 5"  FB6F A7   E4                 sta    0,sUniFLEX Monitor ROM                  09:29:51  Nov 13, 2024   Page   14FLP Bootstrap                                         FB71 26   C3                 bne    ldfl00                     * error  FB73 CC   FFFF               ldd    #$ffff  FB76 ED   E4                 std    0,s  FB78 35   86                 puls   d,pc                     * OK  FB7A CC   0200     ldfl02    ldd    #$200  FB7D                         trfr   D,W  FB7D 1F                      fcb    $1f  FB7E 06                      fcb    D<<4|W                               endm  FB7F 8E   0800               ldx    #bootorg  FB82 31   C8 20              leay   flpfifo,u  FB85                         tfm1   Y,X  FB85 1138                    fdb    $1138  FB87 21                      fcb    Y<<4|X                               endm                     *  FB88 8E   0800               ldx    #bootorg  where boot is loaded  FB8B 4F                      clra             set status  FB8C 35   86                 puls   d,pc                     UniFLEX Monitor ROM                  09:29:51  Nov 13, 2024   Page   15System Configuration                                                     *                     * Configure the system                     *                                          * code starts here  FB8E 8E   99AA     config    ldx    #tstpat   setup pattern  FB91 108E 0210               ldy    #cormap+segmax setup page table pointer  FB95 C6   EF                 ldb    #LSTPAG   setup max page number                     * >FB97 BD   FC11     check     jsr    getpag    map in a page  FB9A BF   D0F0               stx    tstloc    write test pattern  FB9D BC   D0F0               cmpx   tstloc    is memory there?  FBA0 26   16                 bne    nomem  FBA2 34   04                 pshs   b         save count >FBA4 BD   FC11     check2    jsr    getpag    map in all other pages  FBA7 F7   D0F1               stb    tstloc+1  write index  FBAA C0   01                 subb   #1        dec count by 1  FBAC 24   F6                 bcc    check2  FBAE 35   04                 puls   b >FBB0 BD   FC11               jsr    getpag    reselect the page  FBB3 F1   D0F1               cmpb   tstloc+1  is memory there?  FBB6 27   01                 beq    gotmem                     * here if no memory  FBB8 4F            nomem     clra             set page number to zero                     * here for memory found  FBB9 A7   A2       gotmem    sta    0,-y      store into mem table  FBBB C0   01                 subb   #1        dec the count  FBBD 24   D8                 bcc    check                     *  FBBF 30   A4                 leax   0,y       point to start of table                                          * setup system address space  FBC1 6F   84       syssup    clr    sysres,x  clear out system and user pages  FBC3 6F   01                 clr    useres,x  FBC5 108E 0105               ldy    #sysmap+txtseg point to user segment  FBC9 C6   05                 ldb    #5        set length ** changed from 5 for more  FBCB 8D   4A       syssu2    bsr    getnxt    get next segment >FBCD 1027 0050               lbeq   memfal    crash if no memory!  FBD1 A7   A0                 sta    0,y+      save in map  FBD3 5A                      decb             dec the count  FBD4 26   F5                 bne    syssu2  FBD6 0F   13                 clr    corcnt    set core count to zero  FBD8 108E 0110               ldy    #cormap   point to core map  FBDC 8D   39       syssu4    bsr    getnxt    get next page  FBDE 27   06                 beq    syssu5    no more?  FBE0 A7   A0                 sta    0,y+      save in table  FBE2 0C   13                 inc    corcnt    bump core counter  FBE4 20   F6                 bra    syssu4    repeat  FBE6 109F 14       syssu5    sty    lstmem    save last mem pointer  FBE9 8E   0100               ldx    #sysmap   point to system map  FBEC 108E F400               ldy    #datbox   point to datbox  FBF0 C6   10                 ldb    #segadr   get segment countUniFLEX Monitor ROM                  09:29:52  Nov 13, 2024   Page   16System Configuration                                  FBF2 A6   80       syssu6    lda    0,x+      reload datbox from map  FBF4 A7   A0                 sta    0,y+  FBF6 5A                      decb             dec the count  FBF7 26   F9                 bne    syssu6                     * test timer  FBF9 4F                      clra             enable timer  FBFA B7   F004               sta    monpdra  FBFD B6   F004               lda    monpdra   read value  FC00 34   02                 pshs   a  FC02 5F                      clrb  FC03 17   FF10     systm1    lbsr   delay  FC06 5C                      incb  FC07 26   FA                 bne    systm1    256 loops  FC09 35   02                 puls   a  FC0B B0   F004               suba   monpdra   is it running  FC0E 27   27                 beq    notimr  FC10 39                      rts              return                                          * map in a memory page  FC11 1F   98       getpag    tfr    b,a       get page number  FC13 B7   F40D               sta    datbox+tfrseg map into address space  FC16 39                      rts              return                                          * get next valid memory segment  FC17 8C   0210     getnxt    cmpx   #cormap+segmax end of map?  FC1A 27   04                 beq    getnx2  FC1C A6   80                 lda    0,x+      get next page  FC1E 27   F7                 beq    getnxt    keep looking if zero  FC20 39            getnx2    rts              return                                          * No memory panic >FC21 BD   FC85     memfal    jsr    panic     report panic  FC24 4E 6F 74 20             fcc    'Not Enough Memory!',0 >FC37 BD   FC85     notimr    jsr    panic     report timer  FC3A 54 69 6D 65             fcc    'Timer not Running!',0                     *                     * Terminal I/O and bad interrupt handlers                     *                                          * Report unhandled interrupts, fixed sequence.  FC4D 8D   36       unhand    bsr    panic  FC4F 49 52 51 20             fcc    'IRQ ',0  FC54 8D   2F       unswi     bsr    panic  FC56 53 57 49 20             fcc    'SWI ',0  FC5B 8D   28       unswi2    bsr    panic  FC5D 53 57 49 32             fcc    'SWI2',0  FC62 8D   21       unswi3    bsr    panic  FC64 53 57 49 33             fcc    'SWI3',0  FC69 8D   1A       unnmi     bsr    panic  FC6B 4E 4D 49 20             fcc    'NMI ',0  FC70 8D   13       unfirq    bsr    panic  FC72 46 49 52 51             fcc    'FIRQ',0UniFLEX Monitor ROM                  09:29:52  Nov 13, 2024   Page   17System Configuration                                  FC77 8D   0C                 bsr    panic  FC79 43 48 50 52             fcc    'CHPR',0                     *  FC7E 8D   05       cputrp    bsr    panic  FC80 54 52 41 50             fcc    'TRAP',0                                          * Panic processing  FC85               panic     seti   mask      ints  FC85 1A   50                 orcc   #$50                               endm  FC87 8E   FD82               ldx    #panicy   point to string  FC8A 8D   13                 bsr    pdata     print it  FC8C 35   10                 puls   x         get message  FC8E 8D   0F                 bsr    pdata     print it  FC90 10CE BE80               lds    #romstk   set rom stack  FC94 7E   F8CE               jmp    montor    init romUniFLEX Monitor ROM                  09:29:52  Nov 13, 2024   Page   18System Configuration                                                                          * String display routine >FC97 BD   FCEB     newlin    jsr    outch     output cr  FC9A 86   0A                 lda    #$a       setup line feed >FC9C BD   FCEB     putch     jsr    outch     output it  FC9F A6   80       pdata     lda    0,x+      get string character  FCA1 27   06                 beq    pdata2    end of string?  FCA3 81   0D                 cmpa   #$d       is it cr?  FCA5 27   F0                 beq    newlin  FCA7 20   F3                 bra    putch     go output char  FCA9 39            pdata2    rts              return                                          * Output a space  FCAA 34   02       outsp     pshs   a         save a  FCAC 86   20                 lda    #$20      setup space  FCAE 8D   3B                 bsr    outch     output it  FCB0 35   82                 puls   a,pc      return                                          * Output hex word  FCB2 8D   02       hexwrd    bsr    hexbyt  FCB4 1F   98                 tfr    b,a                                          * Output a hex byte  FCB6 34   02       hexbyt    pshs   a         save byte  FCB8 44                      lsra             shift right 4 bits  FCB9 44                      lsra  FCBA 44                      lsra  FCBB 44                      lsra  FCBC 8D   02                 bsr    hexdig    output it  FCBE 35   02                 puls   a         restore digit                                          * Output a digit in hex  FCC0 84   0F       hexdig    anda   #$0f      mask low bits  FCC2 8B   30                 adda   #'0       make ascii digit  FCC4 81   39                 cmpa   #'9       is it digit?  FCC6 23   23                 bls    outch  FCC8 8B   07                 adda   #7        add letter bias  FCCA 20   1F                 bra    outch                                          * Test for an input character  FCCC 34   02       inchck    pshs   a         save a  FCCE B6   F000               lda    acia      get status  FCD1 44                      lsra             check status bit  FCD2 35   82                 puls   a,pc      return                                          * Input a character with echo  FCD4 B6   F000     inch      lda    acia      get status  FCD7 44                      lsra             check bit  FCD8 24   FA                 bcc    inch      wait for character  FCDA B6   F001               lda    acia+1    get character  FCDD 84   7F                 anda   #$7f      mask parity  FCDF 27   F3                 beq    inch      ignore nullsUniFLEX Monitor ROM                  09:29:52  Nov 13, 2024   Page   19System Configuration                                  FCE1 81   61                 cmpa   #'a       is it lower case?  FCE3 25   06                 blo    outch  FCE5 81   7A                 cmpa   #'z  FCE7 22   02                 bhi    outch  FCE9 80   20                 suba   #$20      make upper case                                          * Output character routine  FCEB 34   02       outch     pshs   a         save character  FCED B6   F000     outchw    lda    acia      get status  FCF0 85   02                 bita   #2        check status  FCF2 27   F9                 beq    outchw  FCF4 35   02                 puls   a         get character  FCF6 B7   F001               sta    acia+1    output it  FCF9 39                      rts              return                                          * Get address  FCFA 8D   0A       getadr    bsr    getbyt    get byte  FCFC A7   E3                 sta    0,--s     save on stack  FCFE 25   04                 bcs    getext  FD00 8D   04                 bsr    getbyt    get byte  FD02 A7   61                 sta    1,s  FD04 35   86       getext    puls   d,pc      return                                          * Get byte  FD06 32   7F       getbyt    leas   -1,s  FD08 8D   11                 bsr    gethex    input hex digit  FD0A 25   0C                 bcs    hexit  FD0C 48                      lsla  FD0D 48                      lsla  FD0E 48                      lsla  FD0F 48                      lsla  FD10 A7   E4                 sta    0,s  FD12 8D   07                 bsr    gethex    get hex digit  FD14 25   02                 bcs    hexit  FD16 AA   E4                 ora    0,s  FD18 32   61       hexit     leas   1,s       clean stack  FD1A 39                      rts              return                                          * Get hex digit >FD1B BD   FCD4     gethex    jsr    inch      get character  FD1E 81   30                 cmpa   #'0       is it digit?  FD20 25   11                 blo    nothex  FD22 81   39                 cmpa   #'9  FD24 23   0A                 bls    idigit  FD26 81   41                 cmpa   #'A  FD28 25   09                 blo    nothex  FD2A 81   46                 cmpa   #'F  FD2C 22   05                 bhi    nothex  FD2E 80   07                 suba   #'A-'0-10  FD30 80   30       idigit    suba   #'0  FD32 39                      rts              return  FD33 1A   01       nothex    sec              set carryUniFLEX Monitor ROM                  09:29:53  Nov 13, 2024   Page   20System Configuration                                  FD35 39                      rts              return                                          * Initialize the terminal  FD36 34   06       tinit     pshs   d         save reg  FD38 86   03                 lda    #$3       reset acia  FD3A B7   F000               sta    acia  FD3D 86   15                 lda    #$15      set up bits & stuff  FD3F B7   F000               sta    acia  FD42 CC   3A98               ldd    #15000    delay some here  FD45 83   0001     tinit2    subd   #1  FD48 26   FB                 bne    tinit2  FD4A 35   86                 puls   d,pc      return                                          * messages  FD4C 0D            hello     fcb    $d  FD4D 55 6E 69 46             fcc    'UniFLEX Boot ROM (CPU09:MMU/IDE/MON/FLP:0.50)',$d,0  FD7C 0D            prompt    fcb    $d  FD7D 25 00                   fcc    '%',0  FD7F 3F 3F 00      sorry     fcc    '??',0  FD82 0D            panicy    fcb    $d  FD83 50 61 6E 69             fcc    'Panic -> ',0                     UniFLEX Monitor ROM                  09:29:53  Nov 13, 2024   Page   21Memory Modify Command                                                    *                     * Modify system memory                     *  FD8D               modify  FD8D 17   FF6A               lbsr   getadr    get starting address  FD90 25   53                 bcs    mod99     exit if error  FD92 ED   5C                 std    lowadr,u  save address                     *  FD94 8E   FDE6     mod10     ldx    #modm00  FD97 BD   FC9F               jsr    pdata  FD9A A6   5C                 lda    lowadr,u  print address  FD9C BD   FCB6               jsr    hexbyt  FD9F A6   5D                 lda    lowadr+1,u  FDA1 BD   FCB6               jsr    hexbyt  FDA4 BD   FCAA               jsr    outsp  FDA7 AE   5C                 ldx    lowadr,u  get byte address  FDA9 A6   84                 lda    0,x       get value  FDAB 34   02                 pshs   a         save current value  FDAD BD   FCB6               jsr    hexbyt    output it  FDB0 BD   FCAA               jsr    outsp     print a space  FDB3 BD   FD1B               jsr    gethex    get a hex digit  FDB6 25   1F                 bcs    mod30     jump if error  FDB8 48                      asla  FDB9 48                      asla  FDBA 48                      asla  FDBB 48                      asla  FDBC A7   E4                 sta    0,s       update value  FDBE BD   FD1B               jsr    gethex    get second hex digit  FDC1 25   20                 bcs    mod40     exit if error  FDC3 AA   E0                 ora    ,s+       compute total value  FDC5 AE   5C       mod20     ldx    lowadr,u  get memory address  FDC7 A7   80                 sta    ,x+       update memory  FDC9 AF   5C                 stx    lowadr,u  update address  FDCB 20   C7                 bra    mod10     continue with next byte  FDCD 35   02       mod50     puls   a  FDCF AE   5C                 ldx    lowadr,u  FDD1 30   1F                 leax   -1,x  FDD3 AF   5C                 stx    lowadr,u  FDD5 20   BD                 bra    mod10                     *  FDD7 81   5E       mod30     cmpa   #'^       is it "go back" char?  FDD9 27   F2                 beq    mod50  FDDB 81   2E                 cmpa   #'.       is it "go on" char?  FDDD 26   04                 bne    mod40     no - exit  FDDF 35   02                 puls   a         restore original value  FDE1 20   E2                 bra    mod20     yes - move to next address                     *  FDE3 32   61       mod40     leas   1,s       clean up stack  FDE5 39            mod99     rts              return                     *  FDE6 0D 20 20 2D   modm00    fcc    $d,'  - ',0                     UniFLEX Monitor ROM                  09:29:53  Nov 13, 2024   Page   22Memory Modify Command                                                    *                     * J - Jump to user program                     *  FDEC               jumpprg  FDEC BD   FCFA               jsr    getadr    get routine address  FDEF 25   04                 bcs    jump99    exit if error  FDF1 1F   01                 tfr    d,x       get address  FDF3 AD   84                 jsr    0,x       call routine  FDF5 39            jump99    rts                                          UniFLEX Monitor ROM                  09:29:53  Nov 13, 2024   Page   23High-Level Interrupt Handling                                            *****************************************************************                     *                     * Interrupt handling code - Highest level                     *                     * Should match with inthand code in specific kernel version                     *                     *****************************************************************  FE10                         org    hirom                                          * Process firq                     * either CC,PC or CC....PC (in 6809 or 6309 stack format)                     *                     *   13 PCL  PCL    PCL                     *   12 PCH  PCH    PCH                     *   11 CC   CC     UL    PCL                     *   10      -1,S   UH    PCH                     *   9       YL     YL    UL                     *   8       YH     YH    UH                     *   7       XL     XL    YL                     *   6       XH     XH    YH                     *   5       DP     DP    XL                     *   4       F      F     XH                     *   3       E      E     DP                     *   2       B      B     B                     *   1       A      A     A                     *   0       CC     CC    CC                     *                     * E,F,I are set in new CC  FE10               ufirq     seti   disable   ALL interrupts  FE10 1A   50                 orcc   #$50                               endm  FE12 32   7F                 leas   -1,s      make room on stack  FE14 34   38                 pshs   dp,x,y    push all regs like irq  FE16 1F   8B                 tfr    a,dp      create working register                     *  FE18 B6   FE00               lda    uisctr    stack depth  FE1B 81   0C                 cmpa   #STKSIZ-2 63X09 or 68X09 long stack  FE1D 25   04                 blo    10f  FE1F 32   66                 leas   6,s       clean up stack, already ok  FE21 20   10                 bra    01f                     * we don't know the USER cpu mode, but we set it for 63X09                     * if we are wrong, the user process is the victim :-)  FE23               10        pshsw  FE23 1038                    fdb    $1038                               endm  FE25 1F   B8                 tfr    dp,a      restore a  FE27 34   07                 pshs   cc,d      push all regs like irq  FE29 A6   6B                 lda    11,s      get old cc  FE2B EF   6A                 stu    10,s      store proper u reg  FE2D 8A   80                 ora    #$80      set entire bit in cc  FE2F A7   E4                 sta    0,s  FE31 86   0E                 lda    #STKSIZ   we force 63X09 TODO!!UniFLEX Monitor ROM                  09:29:53  Nov 13, 2024   Page   24High-Level Interrupt Handling                                            *  FE33 B7   BF3B     01        sta    ustksz  FE36 8E   000A               ldx    #frqvec   point to firq vector  FE39 20   4C                 bra    process                                          * Process a USER SWI type interrupt, ints are disabled  FE3B 8E   0002     uswi      ldx    #swivec   get vector  FE3E 20   47                 bra    process   process the int                                          * Process an USER TRAP interrupt  FE40               utrap     bitmd  %10000000  FE40 113C                    fdb    $113c  FE42 80                      fcb    %10000000                               endm  FE43 26   04                 bne    01f  FE45 C6   07                 ldb    #BARGI    illegal instruction  FE47 20   02                 bra    02f  FE49 C6   0C       01        ldb    #DIVZI    div by 0  FE4B 8E   0008     02        ldx    #nmivec   set for nmi vector  FE4E 20   37                 bra    process   set int masks                                          *                     * Process USER NMI, this IS a process TRAP                     *  FE50 1F   AB       unmi      tfr    cc,dp     masks are set  FE52 1F   42                 tfr    s,y  FE54 1F   03                 tfr    d,u       save D contents  FE56 F6   FE00               ldb    uisctr    stack depth  FE59 C0   02                 subb   #2  FE5B 31   A5                 leay   b,y  FE5D 10AE A4                 ldy    0,y       get old PC 63X or 68X                     *  FE60 7F   FE02               clr    k_u_map   bring in kernel map                     * now BXXX is ust area , sp is handled later  FE63 BF   BF57               stx    userx  FE66 FF   BF55               stu    userd  FE69 10BF BF59               sty    userpc                     *  FE6D 1F   B8                 tfr    dp,a      save user cc  FE6F B7   BF54               sta    usercc  FE72 8E   0008               ldx    #nmivec   set vector  FE75 C6   07                 ldb    #FALTI    set fault  FE77 85   10                 bita   #$10      ints masked?  FE79 27   11                 beq    prcs2  FE7B C6   09                 ldb    #TIMEI    set timeout  FE7D 20   0D                 bra    prcs2     kernel already mapped in                                          * swi2 processor  USER SWI2  FE7F 8E   0004     uswi2     ldx    #sw2vec   set vector  FE82 20   03                 bra    process                                          * Process an IRQ type interrupt, ints are disabledUniFLEX Monitor ROM                  09:29:54  Nov 13, 2024   Page   25High-Level Interrupt Handling                         FE84 8E   0000     uirq      ldx    #irqvec   get vector                                          *                     * map in kernel memory                     * Process the user interrupt                     * B has FAULT CODE for NMI                     * X has function address                     *  FE87               process   seti  FE87 1A   50                 orcc   #$50                               endm  FE89 7F   FE02               clr    k_u_map   task mapper to kernel                     *                     * kernel memory map already activated                     * common part for hardware ints                     * B has FAULT CODE for NMI                     * all INTS masked                     *  FE8C 20   1B       prcs2     bra    doint     return in common handler                     *                     *                     * Handle swi3 - system call interrupt                     *  FE8E 1C   FE       uswi3     clc              clear the carry bit  FE90 1F   AB                 tfr    cc,dp     save cc  FE92                         seti   mask      ints  FE92 1A   50                 orcc   #$50                               endm  FE94 7F   FE02               clr    k_u_map   map in kernel  FE97 FD   BF55               std    userd     save d register  FE9A BF   BF57               stx    userx     save x register  FE9D 8E   0006               ldx    #sw3vec   swi3 handler  FEA0 1F   B8                 tfr    dp,a  FEA2 B7   BF54               sta    usercc  FEA5 84   AF                 anda   #!$50  FEA7 1F   8B                 tfr    a,dp                     *                     * common code for interrupt handling                     *               FEA9  doint     equ    *  FEA9 10FF BF40               sts    usp       save user stack pointer  FEAD 10CE BF38               lds    #sysstk   set system stack  FEB1 4F                      clra             set dp to 0  FEB2 1F   8B                 tfr    a,dp  FEB4 0F   0F                 clr    <kernel   tell kernel code we are here  FEB6 B6   FE00               lda    uisctr    what was cpu mode?  FEB9 B7   BF3B               sta    ustksz  FEBC                         ldmd   $03       force 63X09  FEBC 113D                    fdb    $113d  FEBE 03                      fcb    $03                               endm                     *UniFLEX Monitor ROM                  09:29:54  Nov 13, 2024   Page   26High-Level Interrupt Handling                                            * for NMI, it is essential that the B register has been retained                     *  FEBF AD   94                 jsr    [0,x]     execute handler                     *                     * common return from interrupt handler                     *  FEC1               retint    seti   mask      ints  FEC1 1A   50                 orcc   #$50                               endm  FEC3 96   10                 lda    <chpflg   change tasks?  FEC5 27   04                 beq    reti35  FEC7 AD   9F 0011            jsr    [chtask]  change tasks                     *                     * here prepare to setup user task again                     *  FECB 0A   0F       reti35    dec    <kernel                     * kernel runs as 63X09  FECD B6   BF3B               lda    ustksz    was it 6909 or 6309  FED0 27   07                 beq    uirt01    not set, assume 63X09  FED2 81   0D                 cmpa   #13       63x09?  FED4 22   03                 bhi    uirt01    leave as is                     * 68X09 emulation with long FIRQ  FED6                         ldmd   $02       force 68X09 but with long FIRQ  FED6 113D                    fdb    $113d  FED8 02                      fcb    $02                               endm  FED9 7D   BF42     uirt01    tst    urelod    new task?  FEDC 27   19                 beq    usrrti                     *                     * Load Memory Mapper registers for new task                     *  FEDE 4F            remap     clra  FEDF B7   BF42               sta    urelod    erase the flag!  FEE2 C6   10                 ldb    #segadr   set segment size (16)  FEE4                         trfr   D,W  FEE4 1F                      fcb    $1f  FEE5 06                      fcb    D<<4|W                               endm  FEE6 CE   F400               ldu    #datbox   point to dat ram  FEE9 B6   BF43               lda    umapno    get task number  FEEC 27   37                 beq    ufail  FEEE 3D                      mul              calculate map location  FEEF 33   CB                 leau   d,u       point to it  FEF1 8E   BF44               ldx    #usrmap   mem table for user process  FEF4                         tfm1   X,U  FEF4 1138                    fdb    $1138  FEF6 13                      fcb    X<<4|U                               endm                     *                     * map in user task memory, but set SP first                     *  FEF7 10FE BF40     usrrti    lds    usp       reset to user stackUniFLEX Monitor ROM                  09:29:54  Nov 13, 2024   Page   27High-Level Interrupt Handling                         FEFB B6   BF43               lda    umapno    get current task  FEFE 27   25                 beq    ufail     blowup if 0 map number  FF00 B7   FE03               sta    tlatch    set task mapper for return                     * set user task memory map  FF03 86   80                 lda    #%10000000 select user map / vector set  FF05 B7   FE02               sta    k_u_map   set user map                     *                     * release kernel map, but just so that the RTI opcode is read yet                     *  FF08 B7   FE01     krnrti    sta    cuddwn    adjust int count/fuse  FF0B 3B                      rti                     *  FF0C BD   FC85     hfail     jsr    panic     hardware rti failure  FF0F 48 61 72 64             fcc    'Hardware RTI failure ',0  FF25 BD   FC85     ufail     jsr    panic     blowup on 0 map number  FF28 5A 65 72 6F             fcc    'Zero map ',0                                          *                     * interrupt in kernel mode, IRQ                     *  FF32 4F            kirq      clra  FF33 1F   8B                 tfr    a,dp      FORCE DP to ZERO  FF35 0C   0F                 inc    <kernel  FF37 AD   9F 0000            jsr    [irqvec]  process interrupt  FF3B 0A   0F                 dec    <kernel  FF3D 20   C9                 bra    krnrti                     *                     * interrupt in kernel mode, NMI                     *  FF3F BE   E800     knmi      ldx    dbsign    check if kernel debug present  FF42 8C   A55A               cmpx   #DEBSIG   special pattern  FF45 26   04                 bne    knmix     no, just return  FF47 AD   9F E802            jsr    [debnmi]  enter debugger  FF4B 20   BB       knmix     bra    krnrti    return                                          *                     * interrupt in kernel mode, FIRQ                     *                     * E,F,I are set in new CC  FF4D               kfirq     seti   disable   ALL interrupts  FF4D 1A   50                 orcc   #$50                               endm  FF4F 32   7F                 leas   -1,s      make room on stack  FF51 34   38                 pshs   dp,x,y    push all regs like irq  FF53 1F   8B                 tfr    a,dp  FF55 B6   FE00               lda    uisctr  FF58 81   0C                 cmpa   #STKSIZ-2 63x09 or 68x09  FF5A 25   04                 blo    10f  FF5C 32   66                 leas   6,s       clean up  FF5E 20   0E                 bra    01f                     *  FF60               10        pshswUniFLEX Monitor ROM                  09:29:55  Nov 13, 2024   Page   28High-Level Interrupt Handling                         FF60 1038                    fdb    $1038                               endm  FF62 1F   B8                 tfr    dp,a      restore old A  FF64 34   07                 pshs   cc,d      push all regs like irq  FF66 A6   6B                 lda    11,s      get old cc  FF68 EF   6A                 stu    10,s      store proper u reg  FF6A 8A   80                 ora    #$80      set entire bit in cc  FF6C A7   E4                 sta    0,s                     *  FF6E 5F            01        clrb  FF6F 1F   9B                 tfr    b,dp      FORCE DP to ZERO  FF71 0C   0F                 inc    <kernel  FF73 AD   9F 000A            jsr    [frqvec]  do firqhandler  FF77 0A   0F                 dec    <kernel >FF79 16   FF8C               lbra   krnrti                                          *                     * System reset, COLD start                     *  FF7C 4F            kreset    clra  FF7D 10CE F7FF               lds    #inistk   here is RAM for sure  FF81 B7   FE01               sta    cuddwn    undo reset fetch                     * only HW level 0 allows for acces DAT  FF84 B7   FE03               sta    tlatch    select default 0  FF87 B7   FE02               sta    k_u_map   map in kernel  FF8A CC   FEFF               ldd    #rommap   setup kernel memory map E000-FFFF  FF8D FD   F40E               std    datbox+ioseg set E...+F...  FF90 BE   E800               ldx    dbsign    check if kernel debug present  FF93 8C   A55A               cmpx   #DEBSIG   special pattern  FF96 26   04                 bne    kresetx   no, just return  FF98 AD   9F E804            jsr    [debini]  FF9C 7E   F825     kresetx   jmp    rinit     do sys init, find system RAM                                          *                     * System interrupts (unhandled)                     *  FF9F 7E   FC54     kswi      jmp    unswi  FFA2 7E   FC5B     kswi2     jmp    unswi2  FFA5 7E   FC62     kswi3     jmp    unswi3  FFA8 7E   FC7E     ktrap     jmp    cputrp                                          *                     * interrupt vector definitions                     *                       FFE0                         org    usrvec                       FFE0 FE40                    fdb    utrap  FFE2 FE8E                    fdb    uswi3  FFE4 FE7F                    fdb    uswi2  FFE6 FE10                    fdb    ufirq  FFE8 FE84                    fdb    uirqUniFLEX Monitor ROM                  09:29:55  Nov 13, 2024   Page   29High-Level Interrupt Handling                         FFEA FE3B                    fdb    uswi  FFEC FE50                    fdb    unmi  FFEE FF7C                    fdb    kreset                       FFF0                         org    vector                       FFF0 FFA8                    fdb    ktrap  FFF2 FFA5                    fdb    kswi3  FFF4 FFA2                    fdb    kswi2  FFF6 FF4D                    fdb    kfirq  FFF8 FF32                    fdb    kirq  FFFA FF9F                    fdb    kswi  FFFC FF3F                    fdb    knmi  FFFE FF7C                    fdb    kreset                                                    end0 Error(s) detected    15 Excessive BRANCH/JUMP(S) detectedUniFLEX Monitor ROM                  09:29:55  Nov 13, 2024   Page   30High-Level Interrupt Handling                       Symbol Table:Absolute Symbols:A        0008   B        0009   BARGI    0007   BLKHOL   00FD   CC       000A   CMDRSC   0011   CRLF     FA9D   D        0000   DATSENSE 0000   DEBSIG   A55A   DIVZI    000C   DP       000B   E        000E   F        000F   FALTI    0007   IDEBSY   0080   IDEDMRQ  0040   IDEDRD   00C8   IDEDSC   0010   IDEDWR   00CA   IDEERR   0001   IDEINTR  0080   IDEIO16  0001   IDEIORY  0002   IDEIRQ   0004   IDERDY   0040   IDERSTR  0010   IDE_DSL  0010   IDE_LBA  0040   KILLI    0005   LSTPAG   00EF   L_ADDR   000F   L_CSEL   0010   L_DMAEN  0040   L_DREAD  0080   L_INTEN  0020   PATIME   0001   PATIMR   0080   PBLGHT   00FF   PBMTRP   0080   PC       0005   PIRQMSK  0080   R_RDOK   0005   S        0004   STKSIZ   000E   S_PG2FIF 00F8   TIMEI    0009   U        0003   V        0007   W        0006   X        0001   Y        0002   acia     F000   ascii    FFE4   badcmd   FA19   bootorg  0800   brdbas0  F100   bufseg   000C   check    FB97   check2   FBA4   chpflg   0010   chtask   0011   commnd   F8F8   config   FB8E   corcnt   0013   cormap   0110   count    FFFA   cpu_cpu5 0008   cpu_fio  0000   cpu_fio1 0001   cpu_fio2 0003   cpu_foi3 0004   cpu_foi4 0006   cpumod   000D   cputrp   FC7E   cputyp   000C   cuddwn   FE01   datbox   F400   datmap   F420   datsiz   0400   dboot    F942   dboot1   F94D   dboot2   F95B   dboot3   F96A   dboot4   F973   dbsign   E800   dcorct   F410   debini   E804   debnmi   E802   del      FB18   delay    FB16   digit    FFFB   dlen     001C   dmaadh   0010   dmaadl   0011   dmaltc   0013   doboot   FB10   doint    FEA9   dummy    FA1F   dump10   FA3E   dump20   FA57   dump30   FA6F   dump35   FA79   dump40   FA7B   dump99   FA8F   dumpXY   FA3C   exam99   FA3B   examine  FA20   fboot    F979   fboot1   F984   fboot2   F992   fboot3   F9A1   fboot4   F9AA   fcp2io   03FD   fifo     0020   fifo_us3 001E   figle2   F922   figle4   F937   figle5   F93F   figlef   F916   fio2cp   03FC   fio_dba  E800   fio_dsz  0400   fio_fsz  0200   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flnwop   000A   flpdpr   E000   flpfifo  0020   flpint   03FE   flpstp   03F0   flptel   03FF   flrflg   0000   flstat   0008   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   frqvec   000A   getadr   FCFA   getbyt   FD06   getext   FD04   gethex   FD1B   getnx2   FC20   getnxt   FC17   getpag   FC11   gotmem   FBB9   gppbase  E000   hello    FD4C   hexbyt   FCB6   hexdig   FCC0   hexit    FD18   hexwrd   FCB2   hfail    FF0C   hiadr    FFFE   hirom    FE10   ideadr0  0006   ideadr1  0008   ideadr2  000A   ideadr3  000C   idecmst  000E   idedat   0000   ideerft  0002   ider1    FAF9   idescnt  0004   idestat  0018   idigit   FD30   inch     FCD4   inchck   FCCC   inistk   F7FF   ioseg    000E   irqvec   0000   isnrdy   FACE   jump99   FDF5   jumpprg  FDEC   k_u_map  FE02   kernel   000F   kfirq    FF4D   kirq     FF32   knmi     FF3F   knmix    FF4B   kreset   FF7C   kresetx  FF9C   krnrti   FF08   kswi     FF9F   kswi2    FFA2   kswi3    FFA5   ktrap    FFA8   ldfl00   FB36   ldfl01   FB55   ldfl02   FB7A   ldif01   FB25   ldif02   FB31   limit    FFF7   loadi1   FAB6   loadif   FB1C   loadip   FAA8   loadxit  FB08   lowadr   FFFC   lstmem   0014   mappe8   FAA7   mapper   FA9F   memfal   FC21   memmsk   0017   mod10    FD94   mod20    FDC5   mod30    FDD7   mod40    FDE3   mod50    FDCD   mod99    FDE5   modify   FD8D   modm00   FDE6   monpcra  F005   monpcrb  F007   monpdra  F004   monpdrb  F006   montor   F8CE   nboot    F9B0   newlin   FC97   nmivec   0008   nomap    00FD   nomem    FBB8   nothex   FD33   UniFLEX Monitor ROM                  09:29:55  Nov 13, 2024   Page   31High-Level Interrupt Handling                       notimr   FC37   nxtcmd   F8D7   offset   FFF5   outch    FCEB   outchw   FCED   outsp    FCAA   panic    FC85   panicy   FD82   pcrlf    FA93   pdata    FC9F   pdata2   FCA9   prcs2    FE8C   process  FE87   prompt   FD7C   putch    FC9C   rammap   0100   rdmemb   F9D6   remap    FEDE   reti35   FECB   retint   FEC1   rhexbyt  F80C   rinch    F806   rinchk   F804   rinit    F825   rinit2   F854   rinit4   F8C5   rinit8   F83E   rinit9   F837   rinod    F88C   romadr   F800   rommap   FEFF   romseg   000F   romspr   0018   romstk   BE80   routch   F808   rpdata   F80A   rrinit   F800   rtinit   F802   searc2   F8F7   search   F8ED   segadr   0010   segmax   0100   segmnt   FFF4   segsiz   1000   sorry    FD7F   sw2vec   0004   sw3vec   0006   swivec   0002   sysmap   0100   sysram   0100   sysres   0000   sysseg   0000   sysstk   BF38   syssu2   FBCB   syssu4   FBDC   syssu5   FBE6   syssu6   FBF2   syssup   FBC1   systm1   FC03   teluch   0016   tfrseg   000D   tinit    FD36   tinit2   FD45   tlatch   FE03   tstloc   D0F0   tstpat   99AA   txtseg   0005   uargp    BF3C   ubasdp   00BF   ubasea   BF00   udummy   BF38   ufail    FF25   ufirq    FE10   uirq     FE84   uirt01   FED9   uisctr   FE00   umapno   BF43   unfirq   FC70   unhand   FC4D   unmi     FE50   unnmi    FC69   unswi    FC54   unswi2   FC5B   unswi3   FC62   urelod   BF42   usercc   BF54   userd    BF55   useres   0001   userpb   BF5B   userpc   BF59   userx    BF57   usp      BF40   usrmap   BF44   usrrti   FEF7   usrseg   000B   usrtop   000E   usrvec   FFE0   ustksz   BF3B   uswi     FE3B   uswi2    FE7F   uswi2v   BF3E   uswi3    FE8E   utrap    FE40   vector   FFF0   waitrst  FACB   