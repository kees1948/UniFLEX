UniFLEX Monitor ROM                  16:46:30  Jun 20, 2024   Page    1Equates                                                                                       *                     * generic defines for unibug ROM                     *                               opt    lis                               opt    exp                       0000                         abs                                          *                     * Monitor ROM for booting UniFLEX and handling the UniFLEX                     * interrupt processing.                     * 2020-12-19  added init  step voor kernel debgger 0.08                     *                     * 2021-08-07  adapted the hirom code for handling the stacksize                     * differences between 63X09 and 68X09                     *                     * 2021-10-24  set stackpointer in DATBOX at first                     *                     * 2022-03-01  added floppy boot for CPU09GPP/09FLP                     *                     * 2022-11-23  fixed a nasty bug in kfirq                     *                     * 2023-04-01  restructured the interrupt handlers                     *                     * 2024-05-01  clear changemap added                     *                                                               * low ram interrupt vectors                       0000                         org    sysseg<<12                       0000               irqvec    rmb    2         maskable interrupt  0002               swivec    rmb    2         swi 1  0004               sw2vec    rmb    2         swi 2  0006               sw3vec    rmb    2         swi 3  0008               nmivec    rmb    2         non-maskable interrupt  000A               frqvec    rmb    2         fast interrupt                                          * low memory system storage                       000C               cputyp    rmb    1         cpu type  000D               cpumod    rmb    1         cpu mode 63/68  000E               usrtop    rmb    1         current user segment  000F               kernel    rmb    1         kernel/user state (-1 = user address space)  0010               chpflg    rmb    1         change process flag  0011               chtask    rmb    2         change process vector  0013               corcnt    rmb    1         core segment count  0014               lstmem    rmb    2         mem table end marker  0016               teluch    rmb    1         user change flag  0017               memmsk    rmb    1         dat cell maskUniFLEX Monitor ROM                  16:46:30  Jun 20, 2024   Page    2Equates                                               0018               romspr    rmb    1         spare byte for rom                                          * System and global memory maps  0100                         org    (sysseg<<12)+$100                       0100               sysmap    rmb    segadr    system memory map  0110               cormap    rmb    segmax    available memory list                                          * User block definitions                       BF38                         org    (usrseg<<12)+$f38                                    BF00  ubasea    set    (usrseg<<12)+$f00               00BF  ubasdp    set    ubasea/256                     *               BF38  sysstk    equ    *         system stack starts here  BF38               udummy    rmb    3         spare  BF3B               ustksz    rmb    1         save interrupt stack depth  BF3C               uargp     rmb    2         user argv pointer  BF3E               uswi2v    rmb    2         swi2 vector save                     * this _should_ be at ff40.  BF40               usp       rmb    2         user stack pointer  BF42               urelod    rmb    1         map reload flag  BF43               umapno    rmb    1         task map number  BF44               usrmap    rmb    segadr    user task memory map                     *  BF54               usercc    rmb    1         condition codes  BF55               userd     rmb    2         D register  BF57               userx     rmb    2         X register  BF59               userpc    rmb    2         PC register  BF5B               userpb    rmb    1         sys call post byte                                          UniFLEX Monitor ROM                  16:46:31  Jun 20, 2024   Page    3Initial ROM Processing                                                                        *                     * Rom code starts here                     *                       F800                         org    romadr                     *                     * I/O Vectors                     *  F800 F80E                    fdb    rinit     cold start monitor  F802 FCB3                    fdb    tinit     console init  F804 FC49                    fdb    inchck    test console character ready  F806 FC51                    fdb    inch      read one character fromconsoleterminal  F808 FC68                    fdb    outch     write one character to console  F80A FC1C                    fdb    pdata     print a string (X)  F80C FC33                    fdb    hexbyt    print one hex byte (A)                                          *                     * bring monitor to life                     *  F80E               rinit     seti  F80E 1A   50                 orcc   #$50                               endm  F810 10CE BE80               lds    #romstk   set stack                     *  F814 4F                      clra             set dp  F815 1F   8B                 tfr    a,dp                     *  F817 8E   F400               ldx    #datbox   fill datbox with blackholes  F81A 108E 0400               ldy    #datsiz  F81E 86   FD                 lda    #nomap    black hole  F820 8C   F40F     rinit9    cmpx   #datbox+romseg don't vanish myself  F823 27   02                 beq    rinit8  F825 A7   84                 sta    0,x  F827 30   01       rinit8    leax   1,x  F829 31   3F                 leay   -1,y  F82B 26   F3                 bne    rinit9                     *  F82D CC   0100               ldd    #rammap  F830 B7   F40B               sta    datbox+usrseg setup user and system segments  F833 F7   F400               stb    datbox+sysseg  F836 86   FD                 lda    #nomap    fill system map with blackholes  F838 C6   10                 ldb    #segadr   get length of map  F83A 8E   0110               ldx    #sysmap+segadr point to map  F83D A7   82       rinit2    sta    0,-x      stuff into map cell  F83F 5A                      decb             dec the count  F840 26   FB                 bne    rinit2                     *  F842 CC   FEFF               ldd    #rommap   complete the initial map  F845 ED   0E                 std    ioseg,x   set io and rom  F847 FD   F40E               std    datbox+ioseg  F84A CC   0100               ldd    #rammapUniFLEX Monitor ROM                  16:46:31  Jun 20, 2024   Page    4Initial ROM Processing                                F84D A7   0B                 sta    usrseg,x  set user segment  F84F 97   0E                 sta    usrtop  F851 E7   84                 stb    sysseg,x  set system segment  F853 4F                      clra             init the direct page registers  F854 97   0C                 sta    cputyp    clear cpu type  F856 97   0D                 sta    cpumod  F858 97   10                 sta    chpflg    clear change task flag  F85A 97   13                 sta    corcnt    zero core count  F85C B7   BF42               sta    urelod  F85F B7   BF43               sta    umapno  F862 97   17                 sta    memmsk  F864 97   16                 sta    teluch                     * all memory set  F866 B7   FE03               sta    tlatch    initializes latch to 0                     * init debugger hardware (if present)  F869 BE   E800               ldx    dbsign    check if kernel debug present  F86C 8C   A55A               cmpx   #DEBSIG   special pattern  F86F 26   04                 bne    rinod     no, just return  F871 AD   9F E804            jsr    [debini]  init debugger                     * set trap PIA and LED and TIMER  F875 86   04       rinod     lda    #$04      select data register  F877 B7   F005               sta    monpcra  F87A B7   F007               sta    monpcrb  F87D 4F                      clra             all output  F87E B7   F006               sta    monpdrb   LEDS off  F881 B7   F004               sta    monpdra   timer stop  F884 B7   F005               sta    monpcra   dir register  F887 B7   F007               sta    monpcrb  F88A 86   0F                 lda    #$0f      select timer/rom control  F88C B7   F004               sta    monpdra  F88F 86   FF                 lda    #$ff  F891 B7   F006               sta    monpdrb  F894 86   04                 lda    #$04      select data register  F896 B7   F005               sta    monpcra  F899 B7   F007               sta    monpcrb   disabled mem trap irq                     *  F89C BD   FCB3               jsr    tinit     init the terminal  F89F 8E   FCC9               ldx    #hello    point to string  F8A2 BD   FC1C               jsr    pdata     print the string  F8A5 108E 0000               ldy    #irqvec   point to int vectors  F8A9 8E   FBCA               ldx    #unhand   and unhandeled routine  F8AC C6   06                 ldb    #6        set count  F8AE AF   A1       rinit4    stx    0,y++     store vector  F8B0 30   07                 leax   7,x       point to next panic  F8B2 5A                      decb  F8B3 26   F9                 bne    rinit4  F8B5 9F   11                 stx    chtask    set change task vector                     UniFLEX Monitor ROM                  16:46:31  Jun 20, 2024   Page    5Main Monitor Loop                                                                             *                     * Main monitor loop (command processor)                     *                                          * Loop starts here                       F8B7               montor  F8B7 10CE BE80               lds    #romstk  F8BB 33   E4                 leau   0,s       mark stack  F8BD 32   E8 E4              leas   -dlen,s   make temp space  F8C0 8E   FCF9     nxtcmd    ldx    #prompt   point to prompt string  F8C3 BD   FC1C               jsr    pdata     output it  F8C6 BD   FC51               jsr    inch      get response  F8C9 BD   FC27               jsr    outsp     output space  F8CC 8E   F8E1               ldx    #commnd   point to command table  F8CF 8D   05                 bsr    search    search for command  F8D1 AD   98 01              jsr    [1,x]     execute command  F8D4 20   E1                 bra    montor    repeat                                          * Search command table for command                       F8D6 A1   84       search    cmpa   0,x       is it this guy?  F8D8 27   06                 beq    searc2  F8DA 30   03                 leax   3,x       skip this one  F8DC 6D   84                 tst    0,x       end of list?  F8DE 26   F6                 bne    search  F8E0 39            searc2    rts              return                                          * Command table                       F8E1 0D            commnd    fcb    $d        carriage return  F8E2 F99C                    fdb    dummy  F8E4 43                      fcb    'C        Configure command  F8E5 F8FC                    fdb    figlef  F8E7 44                      fcb    'D        Disk boot  F8E8 F928                    fdb    dboot  F8EA 45                      fcb    'E        Examine  F8EB F99D                    fdb    examine  F8ED 4D                      fcb    'M  F8EE FD0A                    fdb    modify  F8F0 56                      fcb    'V        Mapper  F8F1 FA1C                    fdb    mapper  F8F3 4A                      fcb    'J  F8F4 FD69                    fdb    jumpprg  F8F6 46                      fcb    'F  F8F7 F95F                    fdb    fboot  F8F9 00                      fcb    0         end of table  F8FA F996                    fdb    badcmd                                          * Configure the system command                     UniFLEX Monitor ROM                  16:46:32  Jun 20, 2024   Page    6Main Monitor Loop                                     F8FC BD   FB0B     figlef    jsr    config    do configuration  F8FF 96   13                 lda    corcnt    get core count  F901 8B   07                 adda   #7        add in system core count  F903 A7   5A                 sta    count,u   save it  F905 CC   0000               ldd    #0        set count to 0  F908 8B   04       figle2    adda   #4        covert to decimal  F90A 19                      daa  F90B C9   00                 adcb   #0        add in carry  F90D 6A   5A                 dec    count,u  F90F 26   F7                 bne    figle2    finished?  F911 5D                      tstb             more than 99K of memory?  F912 27   09                 beq    figle4  F914 1E   89                 exg    a,b       do upper digit now  F916 8B   30                 adda   #$30  F918 BD   FC68               jsr    outch     output it  F91B 1E   98                 exg    b,a       get low back  F91D BD   FC33     figle4    jsr    hexbyt    output byte  F920 BD   FC27               jsr    outsp     output space  F923 86   4B                 lda    #'K       output 'K'  F925 7E   FC68     figle5    jmp    outch                                          * Disk boot commands                     * IDE boot  F928 BD   FB0B     dboot     jsr    config    configure system                     *  F92B 5F                      clrb  F92C CE   F100               ldu    #brdbas0  F92F 108E 4E20               ldy    #20000  F933 BD   FC49     dboot1    jsr    inchck    key pressed  F936 25   09                 bcs    dboot2  F938 17   0158               lbsr   delay  F93B 31   3F                 leay   -1,y  F93D 26   F4                 bne    dboot1  F93F 20   0F                 bra    dboot3                     *  F941 BD   FC51     dboot2    jsr    inch      get character from keyboard  F944 81   0D                 cmpa   #$0d      ENTER?  F946 27   08                 beq    dboot3  F948 81   31                 cmpa   #'1  F94A 22   04                 bhi    dboot3    invalid  F94C 80   30                 suba   #'0  F94E 1F   89                 tfr    a,b                     *  F950 BD   FA25     dboot3    jsr    loadip    load the ipl sector  F953 27   04                 beq    dboot4  F955 BD   FC33               jsr    hexbyt  F958 39                      rts                     *  F959 10CE BF38     dboot4    lds    #sysstk   setup UniFLEX stack  F95D 6E   84                 jmp    0,x       go do the boot                                          * floppy bootUniFLEX Monitor ROM                  16:46:32  Jun 20, 2024   Page    7Main Monitor Loop                                     F95F BD   FB0B     fboot     jsr    config    configure system                     *  F962 5F                      clrb  F963 CE   E000               ldu    #gppbase  floppy interface  F966 108E 4E20               ldy    #20000  F96A BD   FC49     fboot1    jsr    inchck    key pressed  F96D 25   09                 bcs    fboot2  F96F 17   0121               lbsr   delay  F972 31   3F                 leay   -1,y  F974 26   F4                 bne    fboot1  F976 20   0F                 bra    fboot3                     *  F978 BD   FC51     fboot2    jsr    inch      get character from keyboard  F97B 81   0D                 cmpa   #$0d      ENTER?  F97D 27   08                 beq    fboot3  F97F 81   31                 cmpa   #'1  F981 22   04                 bhi    fboot3    invalid  F983 80   30                 suba   #'0  F985 1F   89                 tfr    a,b                     *  F987 BD   FA99     fboot3    jsr    loadif    load the ipl sector  F98A 27   04                 beq    fboot4  F98C BD   FC33               jsr    hexbyt  F98F 39                      rts                     *  F990 10CE BF38     fboot4    lds    #sysstk   setup UniFLEX stack  F994 6E   84                 jmp    0,x       go do the boot                                          * Bad command                       F996 8E   FCFC     badcmd    ldx    #sorry    point to string  F999 BD   FC1C               jsr    pdata     output it  F99C 39            dummy     rts              return                     UniFLEX Monitor ROM                  16:46:32  Jun 20, 2024   Page    8Memory Examine Command                                                   *                     * Examine memory (system)                     *  F99D               examine  F99D BD   FC77               jsr    getadr    get low address  F9A0 25   16                 bcs    exam99  F9A2 ED   5C                 std    lowadr,u  save low limit  F9A4 86   2D                 lda    #'-  F9A6 BD   FC68               jsr    outch  F9A9 BD   FC77               jsr    getadr    get high address  F9AC 25   0A                 bcs    exam99  F9AE ED   5E                 std    hiadr,u   save high limit  F9B0 AE   5C                 ldx    lowadr,u  set up for dump  F9B2 10AE 5E                 ldy    hiadr,u >F9B5 BD   F9B9               jsr    dumpXY    go print dump  F9B8 39            exam99    rts                     *                     * dumpXY - Dump memory from (X) to (Y)                     *    (X) - Lowest address to dump                     *    (Y) - Highest address to dump                     *    jsr dumpXY                     *  F9B9 34   70       dumpXY    pshs   x,y,u     save registers                     *                     * Print one line (16 bytes) of data                     * >F9BB BD   FA10     dump10    jsr    pcrlf     start a new print line  F9BE A6   E4                 lda    0,s       print address  F9C0 BD   FC33               jsr    hexbyt  F9C3 A6   61                 lda    1,s  F9C5 BD   FC33               jsr    hexbyt  F9C8 BD   FC27               jsr    outsp  F9CB BD   FC27               jsr    outsp  F9CE AE   E4                 ldx    0,s  F9D0 C6   10                 ldb    #16       print 16 bytes  F9D2 34   04                 pshs   b  F9D4 A6   80       dump20    lda    ,x+       get next byte to print  F9D6 BD   FC33               jsr    hexbyt  F9D9 BD   FC27               jsr    outsp  F9DC 6A   E4                 dec    0,s       done?  F9DE 26   F4                 bne    dump20    no - go back  F9E0 AE   61                 ldx    1,s       now print characters  F9E2 BD   FC27               jsr    outsp  F9E5 BD   FC27               jsr    outsp  F9E8 C6   10                 ldb    #16  F9EA E7   E4                 stb    0,s  F9EC A6   80       dump30    lda    ,x+       get next byte  F9EE 81   20                 cmpa   #$20      printable?  F9F0 25   04                 blo    dump35    no  F9F2 81   7F                 cmpa   #$7F  F9F4 25   02                 blo    dump40    go print character  F9F6 86   2E       dump35    lda    #'.       print period for unprintableUniFLEX Monitor ROM                  16:46:32  Jun 20, 2024   Page    9Memory Examine Command                                F9F8 BD   FC68     dump40    jsr    outch     print character  F9FB 6A   E4                 dec    0,s       done?  F9FD 26   ED                 bne    dump30  F9FF 32   61                 leas   1,s       clean up stack  FA01 BD   FC49               jsr    inchck    abort if character struck  FA04 25   06                 bcs    dump99  FA06 AF   E4                 stx    0,s       update address  FA08 AC   62                 cmpx   2,s       any more?  FA0A 23   AF                 bls    dump10    yes - go to it  FA0C 8D   02       dump99    bsr    pcrlf  FA0E 35   F0                 puls   x,y,u,pc  return                     *                     * pcrlf - print carriage return/line feed                     *  FA10 34   16       pcrlf     pshs   d,x       save registers  FA12 8E   FA1A               ldx    #CRLF  FA15 BD   FC1C               jsr    pdata  FA18 35   96                 puls   d,x,pc    return  FA1A 0D 00         CRLF      fcc    $d,0                                          *                     * Map memory into buffer ($d000)                     *  FA1C BD   FC83     mapper    jsr    getbyt    get byte  FA1F 25   03                 bcs    mappe8  FA21 B7   F40D               sta    datbox+$d  FA24 39            mappe8    rts              return                                          *                     *   IDE Bootstrap                     *   reset the stack and set up direct addressing                     *   U contains controller base address                     *   B contains drive select bits                     *  FA25               loadip    seti   irq,firq  disable irq and firq  FA25 1A   50                 orcc   #$50                               endm  FA27 34   04                 pshs   b         save dest drive  FA29 C4   01                 andb   #%00000001  FA2B 34   04                 pshs   b         save drive bits  FA2D 27   04                 beq    loadi1  FA2F 86   10                 lda    #IDE_DSL  drive select bit  FA31 A7   E4                 sta    0,s  FA33               loadi1                     *                     *   quiesce the dma (in case it is active)                     *  FA33 6F   C8 13              clr    dmaltc,u  disable everything                     *  FA36 CC   0040               ldd    #IDE_LBA  FA39 EA   E4                 orb    0,s       drive select bit  FA3B ED   4C                 std    ideadr3,u LBA 24...27, drive 0UniFLEX Monitor ROM                  16:46:33  Jun 20, 2024   Page   10IDE Bootstrap                                                            *  FA3D EC   4E                 ldd    idecmst,u read status  FA3F C1   50                 cmpb   #(IDERDY+IDEDSC) idle  FA41 26   42                 bne    loadxit   drive not ready                     *  FA43 CC   0010               ldd    #IDERSTR  FA46 ED   4E                 std    idecmst,u restore drive >FA48 17   0048     waitrst   lbsr   delay                     *            ldd        idecmst,u                     *            bitb       #IDEBSY            drive busy?                     *            beq        waitrst                     * >FA4B 17   0045     isnrdy    lbsr   delay  FA4E EC   4E                 ldd    idecmst,u check if done  FA50 C5   80                 bitb   #IDEBSY  FA52 26   F7                 bne    isnrdy                     *  FA54 CC   0001               ldd    #1  FA57 ED   44                 std    idescnt,u sector count  FA59 5F                      clrb             LBA 0  FA5A ED   46                 std    ideadr0,u first sector LBA 0...7  FA5C ED   48                 std    ideadr1,u LBA 8...15  FA5E ED   4A                 std    ideadr2,u LBA 16...23  FA60 CC   0040               ldd    #IDE_LBA  FA63 EA   E4                 orb    0,s       drive select bit  FA65 ED   4C                 std    ideadr3,u LBA 24...27, drive 0  FA67 CC   0800               ldd    #bootorg  load real boot address  FA6A ED   C8 10              std    dmaadh,u  FA6D 86   C0                 lda    #L_DREAD+L_DMAEN  FA6F A7   C8 13              sta    dmaltc,u  set high addr  FA72 C6   C8                 ldb    #IDEDRD  FA74 ED   4E                 std    idecmst,u  FA76 A6   C8 18    ider1     lda    idestat,u  FA79 85   80                 bita   #IDEINTR  FA7B 27   F9                 beq    ider1     wait for done  FA7D EC   4E                 ldd    idecmst,u read status  FA7F C5   01                 bitb   #IDEERR  FA81 27   0A                 beq    doboot  FA83 1F   98                 tfr    b,a                     * faillure  FA85 E7   61       loadxit   stb    1,s       save status  FA87 86   FF                 lda    #$ff      set bad  FA89 A7   E4                 sta    0,s  FA8B 35   86                 puls   d,pc                     *  FA8D 8E   0800     doboot    ldx    #bootorg  where boot is loaded  FA90 4F                      clra             set status  FA91 35   86                 puls   d,pc      D has drive select info                     *  FA93 86   40       delay     lda    #64       set up a delay counter  FA95 4A            del       deca             decrement the delay count  FA96 26   FD                 bne    del       hang in there for the countUniFLEX Monitor ROM                  16:46:33  Jun 20, 2024   Page   11IDE Bootstrap                                         FA98 39                      rts                                    0011  CMDRSC    equ    %00010001 read sector                                          *                     *   FLP Bootstrap                     *   reset the stack and set up direct addressing                     *   U contains controller base address                     *  FA99               loadif    seti   irq,firq  disable irq and firq  FA99 1A   50                 orcc   #$50                               endm  FA9B C6   10                 ldb    #16  FA9D 8E   E010               ldx    #flpdpr+16 check if controoler there  FAA0 A6   84                 lda    0,x  FAA2 AB   80       ldif01    adda   0,x+      if these locations are all 0  FAA4 5A                      decb  FAA5 26   FB                 bne    ldif01  FAA7 4D                      tsta  FAA8 27   04                 beq    ldif02    assume controller present  FAAA CC   00FF               ldd    #$ff  FAAD 39                      rts                       FAAE CC   0000     ldif02    ldd    #0  FAB1 34   06                 pshs   d                     *                     *                     *  FAB3 CC   0000     ldfl00    ldd    #0  FAB6 ED   42                 std    flblkm,u  FAB8 A7   41                 sta    flblkh,u  FABA CC   0200               ldd    #$200     PAGSIZ  FABD ED   44                 std    fltsiz,u  FABF E7   49                 stb    fldriv,u  FAC1 47                      asra  FAC2 A7   4A                 sta    flnwop,u  FAC4 EC   E4                 ldd    0,s  FAC6 ED   4B                 std    fltsid,u  start single side/dens/8"  FAC8 86   11                 lda    #CMDRSC  FACA A7   C4                 sta    flrflg,u  FACC 86   FF                 lda    #$ff  FACE A7   C9 03FF            sta    flptel,u                     *  FAD2 A6   C9 03FE  ldfl01    lda    flpint,u  FAD6 27   FA                 beq    ldfl01  FAD8 6F   C9 03FE            clr    flpint,u  FADC A6   48                 lda    flstat,u  FADE 27   17                 beq    ldfl02    no error, copy to memory  FAE0 A6   61                 lda    1,s  FAE2 88   01                 eora   #1  FAE4 A7   61                 sta    1,s  FAE6 26   CB                 bne    ldfl00UniFLEX Monitor ROM                  16:46:33  Jun 20, 2024   Page   12FLP Bootstrap                                         FAE8 A6   E4                 lda    0,s  FAEA 88   40                 eora   #$40      set 5"  FAEC A7   E4                 sta    0,s  FAEE 26   C3                 bne    ldfl00                     * error  FAF0 CC   FFFF               ldd    #$ffff  FAF3 ED   E4                 std    0,s  FAF5 35   86                 puls   d,pc                     * OK  FAF7 CC   0200     ldfl02    ldd    #$200  FAFA                         trfr   D,W  FAFA 1F                      fcb    $1f  FAFB 06                      fcb    D<<4|W                               endm  FAFC 8E   0800               ldx    #bootorg  FAFF 31   C8 20              leay   flpfifo,u  FB02                         tfm1   Y,X  FB02 1138                    fdb    $1138  FB04 21                      fcb    Y<<4|X                               endm                     *  FB05 8E   0800               ldx    #bootorg  where boot is loaded  FB08 4F                      clra             set status  FB09 35   86                 puls   d,pc                     UniFLEX Monitor ROM                  16:46:34  Jun 20, 2024   Page   13System Configuration                                                     *                     * Configure the system                     *                                          * code starts here  FB0B 8E   99AA     config    ldx    #tstpat   setup pattern  FB0E 108E 0210               ldy    #cormap+segmax setup page table pointer  FB12 C6   F7                 ldb    #LSTPAG   setup max page number                     * >FB14 BD   FB8E     check     jsr    getpag    map in a page  FB17 BF   D0F0               stx    tstloc    write test pattern  FB1A BC   D0F0               cmpx   tstloc    is memory there?  FB1D 26   16                 bne    nomem  FB1F 34   04                 pshs   b         save count >FB21 BD   FB8E     check2    jsr    getpag    map in all other pages  FB24 F7   D0F1               stb    tstloc+1  write index  FB27 C0   01                 subb   #1        dec count by 1  FB29 24   F6                 bcc    check2  FB2B 35   04                 puls   b >FB2D BD   FB8E               jsr    getpag    reselect the page  FB30 F1   D0F1               cmpb   tstloc+1  is memory there?  FB33 27   01                 beq    gotmem                     * here if no memory  FB35 4F            nomem     clra             set page number to zero                     * here for memory found  FB36 A7   A2       gotmem    sta    0,-y      store into mem table  FB38 C0   01                 subb   #1        dec the count  FB3A 24   D8                 bcc    check                     *  FB3C 30   A4                 leax   0,y       point to start of table                                          * setup system address space  FB3E 6F   84       syssup    clr    sysres,x  clear out system and user pages  FB40 6F   01                 clr    useres,x  FB42 108E 0105               ldy    #sysmap+txtseg point to user segment  FB46 C6   05                 ldb    #5        set length ** changed from 5 for more  FB48 8D   4A       syssu2    bsr    getnxt    get next segment >FB4A 1027 0050               lbeq   memfal    crash if no memory!  FB4E A7   A0                 sta    0,y+      save in map  FB50 5A                      decb             dec the count  FB51 26   F5                 bne    syssu2  FB53 0F   13                 clr    corcnt    set core count to zero  FB55 108E 0110               ldy    #cormap   point to core map  FB59 8D   39       syssu4    bsr    getnxt    get next page  FB5B 27   06                 beq    syssu5    no more?  FB5D A7   A0                 sta    0,y+      save in table  FB5F 0C   13                 inc    corcnt    bump core counter  FB61 20   F6                 bra    syssu4    repeat  FB63 109F 14       syssu5    sty    lstmem    save last mem pointer  FB66 8E   0100               ldx    #sysmap   point to system map  FB69 108E F400               ldy    #datbox   point to datbox  FB6D C6   10                 ldb    #segadr   get segment countUniFLEX Monitor ROM                  16:46:34  Jun 20, 2024   Page   14System Configuration                                  FB6F A6   80       syssu6    lda    0,x+      reload datbox from map  FB71 A7   A0                 sta    0,y+  FB73 5A                      decb             dec the count  FB74 26   F9                 bne    syssu6                     * test timer  FB76 4F                      clra             enable timer  FB77 B7   F004               sta    monpdra  FB7A B6   F004               lda    monpdra   read value  FB7D 34   02                 pshs   a  FB7F 5F                      clrb  FB80 17   FF10     systm1    lbsr   delay  FB83 5C                      incb  FB84 26   FA                 bne    systm1    256 loops  FB86 35   02                 puls   a  FB88 B0   F004               suba   monpdra   is it running  FB8B 27   27                 beq    notimr  FB8D 39                      rts              return                                          * map in a memory page  FB8E 1F   98       getpag    tfr    b,a       get page number  FB90 B7   F40D               sta    datbox+tfrseg map into address space  FB93 39                      rts              return                                          * get next valid memory segment  FB94 8C   0210     getnxt    cmpx   #cormap+segmax end of map?  FB97 27   04                 beq    getnx2  FB99 A6   80                 lda    0,x+      get next page  FB9B 27   F7                 beq    getnxt    keep looking if zero  FB9D 39            getnx2    rts              return                                          * No memory panic >FB9E BD   FC02     memfal    jsr    panic     report panic  FBA1 4E 6F 74 20             fcc    'Not Enough Memory!',0 >FBB4 BD   FC02     notimr    jsr    panic     report timer  FBB7 54 69 6D 65             fcc    'Timer not Running!',0                     *                     * Terminal I/O and bad interrupt handlers                     *                                          * Report unhandled interrupts, fixed sequence.  FBCA 8D   36       unhand    bsr    panic  FBCC 49 52 51 20             fcc    'IRQ ',0  FBD1 8D   2F       unswi     bsr    panic  FBD3 53 57 49 20             fcc    'SWI ',0  FBD8 8D   28       unswi2    bsr    panic  FBDA 53 57 49 32             fcc    'SWI2',0  FBDF 8D   21       unswi3    bsr    panic  FBE1 53 57 49 33             fcc    'SWI3',0  FBE6 8D   1A       unnmi     bsr    panic  FBE8 4E 4D 49 20             fcc    'NMI ',0  FBED 8D   13       unfirq    bsr    panic  FBEF 46 49 52 51             fcc    'FIRQ',0UniFLEX Monitor ROM                  16:46:34  Jun 20, 2024   Page   15System Configuration                                  FBF4 8D   0C                 bsr    panic  FBF6 43 48 50 52             fcc    'CHPR',0                     *  FBFB 8D   05       cputrp    bsr    panic  FBFD 54 52 41 50             fcc    'TRAP',0                                          * Panic processing  FC02               panic     seti   mask      ints  FC02 1A   50                 orcc   #$50                               endm  FC04 8E   FCFF               ldx    #panicy   point to string  FC07 8D   13                 bsr    pdata     print it  FC09 35   10                 puls   x         get message  FC0B 8D   0F                 bsr    pdata     print it  FC0D 10CE BE80               lds    #romstk   set rom stack  FC11 7E   F8B7               jmp    montor    init romUniFLEX Monitor ROM                  16:46:34  Jun 20, 2024   Page   16System Configuration                                                                          * String display routine >FC14 BD   FC68     newlin    jsr    outch     output cr  FC17 86   0A                 lda    #$a       setup line feed >FC19 BD   FC68     putch     jsr    outch     output it  FC1C A6   80       pdata     lda    0,x+      get string character  FC1E 27   06                 beq    pdata2    end of string?  FC20 81   0D                 cmpa   #$d       is it cr?  FC22 27   F0                 beq    newlin  FC24 20   F3                 bra    putch     go output char  FC26 39            pdata2    rts              return                                          * Output a space  FC27 34   02       outsp     pshs   a         save a  FC29 86   20                 lda    #$20      setup space  FC2B 8D   3B                 bsr    outch     output it  FC2D 35   82                 puls   a,pc      return                                          * Output hex word  FC2F 8D   02       hexwrd    bsr    hexbyt  FC31 1F   98                 tfr    b,a                                          * Output a hex byte  FC33 34   02       hexbyt    pshs   a         save byte  FC35 44                      lsra             shift right 4 bits  FC36 44                      lsra  FC37 44                      lsra  FC38 44                      lsra  FC39 8D   02                 bsr    hexdig    output it  FC3B 35   02                 puls   a         restore digit                                          * Output a digit in hex  FC3D 84   0F       hexdig    anda   #$0f      mask low bits  FC3F 8B   30                 adda   #'0       make ascii digit  FC41 81   39                 cmpa   #'9       is it digit?  FC43 23   23                 bls    outch  FC45 8B   07                 adda   #7        add letter bias  FC47 20   1F                 bra    outch                                          * Test for an input character  FC49 34   02       inchck    pshs   a         save a  FC4B B6   F000               lda    acia      get status  FC4E 44                      lsra             check status bit  FC4F 35   82                 puls   a,pc      return                                          * Input a character with echo  FC51 B6   F000     inch      lda    acia      get status  FC54 44                      lsra             check bit  FC55 24   FA                 bcc    inch      wait for character  FC57 B6   F001               lda    acia+1    get character  FC5A 84   7F                 anda   #$7f      mask parity  FC5C 27   F3                 beq    inch      ignore nullsUniFLEX Monitor ROM                  16:46:35  Jun 20, 2024   Page   17System Configuration                                  FC5E 81   61                 cmpa   #'a       is it lower case?  FC60 25   06                 blo    outch  FC62 81   7A                 cmpa   #'z  FC64 22   02                 bhi    outch  FC66 80   20                 suba   #$20      make upper case                                          * Output character routine  FC68 34   02       outch     pshs   a         save character  FC6A B6   F000     outchw    lda    acia      get status  FC6D 85   02                 bita   #2        check status  FC6F 27   F9                 beq    outchw  FC71 35   02                 puls   a         get character  FC73 B7   F001               sta    acia+1    output it  FC76 39                      rts              return                                          * Get address  FC77 8D   0A       getadr    bsr    getbyt    get byte  FC79 A7   E3                 sta    0,--s     save on stack  FC7B 25   04                 bcs    getext  FC7D 8D   04                 bsr    getbyt    get byte  FC7F A7   61                 sta    1,s  FC81 35   86       getext    puls   d,pc      return                                          * Get byte  FC83 32   7F       getbyt    leas   -1,s  FC85 8D   11                 bsr    gethex    input hex digit  FC87 25   0C                 bcs    hexit  FC89 48                      lsla  FC8A 48                      lsla  FC8B 48                      lsla  FC8C 48                      lsla  FC8D A7   E4                 sta    0,s  FC8F 8D   07                 bsr    gethex    get hex digit  FC91 25   02                 bcs    hexit  FC93 AA   E4                 ora    0,s  FC95 32   61       hexit     leas   1,s       clean stack  FC97 39                      rts              return                                          * Get hex digit >FC98 BD   FC51     gethex    jsr    inch      get character  FC9B 81   30                 cmpa   #'0       is it digit?  FC9D 25   11                 blo    nothex  FC9F 81   39                 cmpa   #'9  FCA1 23   0A                 bls    idigit  FCA3 81   41                 cmpa   #'A  FCA5 25   09                 blo    nothex  FCA7 81   46                 cmpa   #'F  FCA9 22   05                 bhi    nothex  FCAB 80   07                 suba   #'A-'0-10  FCAD 80   30       idigit    suba   #'0  FCAF 39                      rts              return  FCB0 1A   01       nothex    sec              set carryUniFLEX Monitor ROM                  16:46:35  Jun 20, 2024   Page   18System Configuration                                  FCB2 39                      rts              return                                          * Initialize the terminal  FCB3 34   06       tinit     pshs   d         save reg  FCB5 86   03                 lda    #$3       reset acia  FCB7 B7   F000               sta    acia  FCBA 86   15                 lda    #$15      set up bits & stuff  FCBC B7   F000               sta    acia  FCBF CC   3A98               ldd    #15000    delay some here  FCC2 83   0001     tinit2    subd   #1  FCC5 26   FB                 bne    tinit2  FCC7 35   86                 puls   d,pc      return                                          * messages  FCC9 0D            hello     fcb    $d  FCCA 55 6E 69 46             fcc    'UniFLEX Boot ROM (CPU09:MMU/IDE/MON/FLP:0.50)',$d,0  FCF9 0D            prompt    fcb    $d  FCFA 25 00                   fcc    '%',0  FCFC 3F 3F 00      sorry     fcc    '??',0  FCFF 0D            panicy    fcb    $d  FD00 50 61 6E 69             fcc    'Panic -> ',0                     UniFLEX Monitor ROM                  16:46:35  Jun 20, 2024   Page   19Memory Modify Command                                                    *                     * Modify system memory                     *  FD0A               modify  FD0A 17   FF6A               lbsr   getadr    get starting address  FD0D 25   53                 bcs    mod99     exit if error  FD0F ED   5C                 std    lowadr,u  save address                     *  FD11 8E   FD63     mod10     ldx    #modm00  FD14 BD   FC1C               jsr    pdata  FD17 A6   5C                 lda    lowadr,u  print address  FD19 BD   FC33               jsr    hexbyt  FD1C A6   5D                 lda    lowadr+1,u  FD1E BD   FC33               jsr    hexbyt  FD21 BD   FC27               jsr    outsp  FD24 AE   5C                 ldx    lowadr,u  get byte address  FD26 A6   84                 lda    0,x       get value  FD28 34   02                 pshs   a         save current value  FD2A BD   FC33               jsr    hexbyt    output it  FD2D BD   FC27               jsr    outsp     print a space  FD30 BD   FC98               jsr    gethex    get a hex digit  FD33 25   1F                 bcs    mod30     jump if error  FD35 48                      asla  FD36 48                      asla  FD37 48                      asla  FD38 48                      asla  FD39 A7   E4                 sta    0,s       update value  FD3B BD   FC98               jsr    gethex    get second hex digit  FD3E 25   20                 bcs    mod40     exit if error  FD40 AA   E0                 ora    ,s+       compute total value  FD42 AE   5C       mod20     ldx    lowadr,u  get memory address  FD44 A7   80                 sta    ,x+       update memory  FD46 AF   5C                 stx    lowadr,u  update address  FD48 20   C7                 bra    mod10     continue with next byte  FD4A 35   02       mod50     puls   a  FD4C AE   5C                 ldx    lowadr,u  FD4E 30   1F                 leax   -1,x  FD50 AF   5C                 stx    lowadr,u  FD52 20   BD                 bra    mod10                     *  FD54 81   5E       mod30     cmpa   #'^       is it "go back" char?  FD56 27   F2                 beq    mod50  FD58 81   2E                 cmpa   #'.       is it "go on" char?  FD5A 26   04                 bne    mod40     no - exit  FD5C 35   02                 puls   a         restore original value  FD5E 20   E2                 bra    mod20     yes - move to next address                     *  FD60 32   61       mod40     leas   1,s       clean up stack  FD62 39            mod99     rts              return                     *  FD63 0D 20 20 2D   modm00    fcc    $d,'  - ',0                     *UniFLEX Monitor ROM                  16:46:36  Jun 20, 2024   Page   20Memory Modify Command                                                    * J - Jump to user program                     *  FD69               jumpprg  FD69 BD   FC77               jsr    getadr    get routine address  FD6C 25   04                 bcs    jump99    exit if error  FD6E 1F   01                 tfr    d,x       get address  FD70 AD   84                 jsr    0,x       call routine  FD72 39            jump99    rts                     UniFLEX Monitor ROM                  16:46:36  Jun 20, 2024   Page   21High-Level Interrupt Handling                                                                 *                     * Interrupt handling code - Highest level                     *                     * Should match with inthand code in specific kernel version                     *  FE10                         org    hirom                                          * Process firq                     * either CC,PC or CC....PC (in 6809 or 6309 stack format)                     *                     *   13 PCL  PCL    PCL                     *   12 PCH  PCH    PCH                     *   11 CC   CC     UL    PCL                     *   10      -1,S   UH    PCH                     *   9       YL     YL    UL                     *   8       YH     YH    UH                     *   7       XL     XL    YL                     *   6       XH     XH    YH                     *   5       DP     DP    XL                     *   4       F      F     XH                     *   3       E      E     DP                     *   2       B      B     B                     *   1       A      A     A                     *   0       CC     CC    CC                     *                     * E,F,I are set in new CC  FE10               ufirq     seti   disable   ALL interrupts  FE10 1A   50                 orcc   #$50                               endm  FE12 32   7F                 leas   -1,s      make room on stack  FE14 34   38                 pshs   dp,x,y    push all regs like irq  FE16 1F   8B                 tfr    a,dp      create working register                     *  FE18 B6   FE00               lda    uisctr    stack depth  FE1B 81   0C                 cmpa   #STKSIZ-2 63X09 or 68X09 long stack  FE1D 25   04                 blo    10f  FE1F 32   66                 leas   6,s       clean up stack, already ok  FE21 20   10                 bra    01f                     * we don't know the USER cpu mode, but we set it for 63X09                     * if we are wrong, the user process is the victim :-)  FE23               10        pshsw  FE23 1038                    fdb    $1038                               endm  FE25 1F   B8                 tfr    dp,a      restore a  FE27 34   07                 pshs   cc,d      push all regs like irq  FE29 A6   6B                 lda    11,s      get old cc  FE2B EF   6A                 stu    10,s      store proper u reg  FE2D 8A   80                 ora    #$80      set entire bit in cc  FE2F A7   E4                 sta    0,s  FE31 86   0E                 lda    #STKSIZ   we force 63X09 TODO!!                     *UniFLEX Monitor ROM                  16:46:36  Jun 20, 2024   Page   22High-Level Interrupt Handling                         FE33 B7   BF3B     01        sta    ustksz  FE36 8E   000A               ldx    #frqvec   point to firq vector  FE39 20   4C                 bra    process                                          * Process a USER SWI type interrupt, ints are disabled  FE3B 8E   0002     uswi      ldx    #swivec   get vector  FE3E 20   47                 bra    process   process the int                                          * Process an USER TRAP interrupt  FE40               utrap     bitmd  %10000000  FE40 113C                    fdb    $113c  FE42 80                      fcb    %10000000                               endm  FE43 26   04                 bne    01f  FE45 C6   07                 ldb    #BARGI    illegal instruction  FE47 20   02                 bra    02f  FE49 C6   0C       01        ldb    #DIVZI    div by 0  FE4B 8E   0008     02        ldx    #nmivec   set for nmi vector  FE4E 20   37                 bra    process   set int masks                                          *                     * Process USER NMI, this IS a process TRAP                     *  FE50 1F   AB       unmi      tfr    cc,dp     masks are set  FE52 1F   42                 tfr    s,y  FE54 1F   03                 tfr    d,u       save D contents  FE56 F6   FE00               ldb    uisctr    stack depth  FE59 C0   02                 subb   #2  FE5B 31   A5                 leay   b,y  FE5D 10AE A4                 ldy    0,y       get old PC 63X or 68X                     *  FE60 7F   FE02               clr    k_u_map   bring in kernel map                     * now BXXX is ust area , sp is handled later  FE63 BF   BF57               stx    userx  FE66 FF   BF55               stu    userd  FE69 10BF BF59               sty    userpc                     *  FE6D 1F   B8                 tfr    dp,a      save user cc  FE6F B7   BF54               sta    usercc  FE72 8E   0008               ldx    #nmivec   set vector  FE75 C6   07                 ldb    #FALTI    set fault  FE77 85   10                 bita   #$10      ints masked?  FE79 27   11                 beq    prcs2  FE7B C6   09                 ldb    #TIMEI    set timeout  FE7D 20   0D                 bra    prcs2     kernel already mapped in                                          * swi2 processor  USER SWI2  FE7F 8E   0004     uswi2     ldx    #sw2vec   set vector  FE82 20   03                 bra    process                                          * Process an IRQ type interrupt, ints are disabled  FE84 8E   0000     uirq      ldx    #irqvec   get vectorUniFLEX Monitor ROM                  16:46:36  Jun 20, 2024   Page   23High-Level Interrupt Handling                                                                 *                     * map in kernel memory                     * Process the user interrupt                     * B has FAULT CODE for NMI                     * X has function address                     *  FE87               process   seti  FE87 1A   50                 orcc   #$50                               endm  FE89 7F   FE02               clr    k_u_map   task mapper to kernel                     *                     * kernel memory map already activated                     * common part for hardware ints                     * B has FAULT CODE for NMI                     * all INTS masked                     *  FE8C 20   1B       prcs2     bra    doint     return in common handler                     *                     *                     * Handle swi3 - system call interrupt                     *  FE8E 1C   FE       uswi3     clc              clear the carry bit  FE90 1F   AB                 tfr    cc,dp     save cc  FE92                         seti   mask      ints  FE92 1A   50                 orcc   #$50                               endm  FE94 7F   FE02               clr    k_u_map   map in kernel  FE97 FD   BF55               std    userd     save d register  FE9A BF   BF57               stx    userx     save x register  FE9D 8E   0006               ldx    #sw3vec   swi3 handler  FEA0 1F   B8                 tfr    dp,a  FEA2 B7   BF54               sta    usercc  FEA5 84   AF                 anda   #!$50  FEA7 1F   8B                 tfr    a,dp                     *                     * common code for interrupt handling                     *               FEA9  doint     equ    *  FEA9 10FF BF40               sts    usp       save user stack pointer  FEAD 10CE BF38               lds    #sysstk   set system stack  FEB1 4F                      clra             set dp to 0  FEB2 1F   8B                 tfr    a,dp  FEB4 0F   0F                 clr    <kernel   tell kernel code we are here  FEB6 B6   FE00               lda    uisctr    what was cpu mode?  FEB9 B7   BF3B               sta    ustksz  FEBC                         ldmd   $03       force 63X09  FEBC 113D                    fdb    $113d  FEBE 03                      fcb    $03                               endm                     *                     * for NMI, it is essential that the B register has been retainedUniFLEX Monitor ROM                  16:46:36  Jun 20, 2024   Page   24High-Level Interrupt Handling                                            *  FEBF AD   94                 jsr    [0,x]     execute handler                     *                     * common return from interrupt handler                     *  FEC1               retint    seti   mask      ints  FEC1 1A   50                 orcc   #$50                               endm  FEC3 96   10                 lda    <chpflg   change tasks?  FEC5 27   04                 beq    reti35  FEC7 AD   9F 0011            jsr    [chtask]  change tasks                     *                     * here prepare to setup user task again                     *  FECB 0A   0F       reti35    dec    <kernel                     * kernel runs as 63X09  FECD B6   BF3B               lda    ustksz    was it 6909 or 6309  FED0 27   07                 beq    uirt01    not set, assume 63X09  FED2 81   0D                 cmpa   #13       63x09?  FED4 22   03                 bhi    uirt01    leave as is                     * 68X09 emulation with long FIRQ  FED6                         ldmd   $02       force 68X09 but with long FIRQ  FED6 113D                    fdb    $113d  FED8 02                      fcb    $02                               endm  FED9 7D   BF42     uirt01    tst    urelod    new task?  FEDC 27   19                 beq    usrrti                     *                     * Load Memory Mapper registers for new task                     *  FEDE 4F            remap     clra  FEDF B7   BF42               sta    urelod    erase the flag!  FEE2 C6   10                 ldb    #segadr   set segment size (16)  FEE4                         trfr   D,W  FEE4 1F                      fcb    $1f  FEE5 06                      fcb    D<<4|W                               endm  FEE6 CE   F400               ldu    #datbox   point to dat ram  FEE9 B6   BF43               lda    umapno    get task number  FEEC 27   37                 beq    ufail  FEEE 3D                      mul              calculate map location  FEEF 33   CB                 leau   d,u       point to it  FEF1 8E   BF44               ldx    #usrmap   mem table for user process  FEF4                         tfm1   X,U  FEF4 1138                    fdb    $1138  FEF6 13                      fcb    X<<4|U                               endm                     *                     * map in user task memory, but set SP first                     *  FEF7 10FE BF40     usrrti    lds    usp       reset to user stack  FEFB B6   BF43               lda    umapno    get current taskUniFLEX Monitor ROM                  16:46:37  Jun 20, 2024   Page   25High-Level Interrupt Handling                         FEFE 27   25                 beq    ufail     blowup if 0 map number  FF00 B7   FE03               sta    tlatch    set task mapper for return                     * set user task memory map  FF03 86   80                 lda    #%10000000 select user map / vector set  FF05 B7   FE02               sta    k_u_map   set user map                     *                     * release kernel map, but just so that the RTI opcode is read yet                     *  FF08 B7   FE01     krnrti    sta    cuddwn    adjust int count/fuse  FF0B 3B                      rti                     *  FF0C BD   FC02     hfail     jsr    panic     hardware rti failure  FF0F 48 61 72 64             fcc    'Hardware RTI failure ',0  FF25 BD   FC02     ufail     jsr    panic     blowup on 0 map number  FF28 5A 65 72 6F             fcc    'Zero map ',0                                          *                     * interrupt in kernel mode, IRQ                     *  FF32 4F            kirq      clra  FF33 1F   8B                 tfr    a,dp      FORCE DP to ZERO  FF35 0C   0F                 inc    <kernel  FF37 AD   9F 0000            jsr    [irqvec]  process interrupt  FF3B 0A   0F                 dec    <kernel  FF3D 20   C9                 bra    krnrti                     *                     * interrupt in kernel mode, NMI                     *  FF3F BE   E800     knmi      ldx    dbsign    check if kernel debug present  FF42 8C   A55A               cmpx   #DEBSIG   special pattern  FF45 26   04                 bne    knmix     no, just return  FF47 AD   9F E802            jsr    [debnmi]  enter debugger  FF4B 20   BB       knmix     bra    krnrti    return                                          *                     * interrupt in kernel mode, FIRQ                     *                     * E,F,I are set in new CC  FF4D               kfirq     seti   disable   ALL interrupts  FF4D 1A   50                 orcc   #$50                               endm  FF4F 32   7F                 leas   -1,s      make room on stack  FF51 34   38                 pshs   dp,x,y    push all regs like irq  FF53 1F   8B                 tfr    a,dp  FF55 B6   FE00               lda    uisctr  FF58 81   0C                 cmpa   #STKSIZ-2 63x09 or 68x09  FF5A 25   04                 blo    10f  FF5C 32   66                 leas   6,s       clean up  FF5E 20   0E                 bra    01f                     *  FF60               10        pshsw  FF60 1038                    fdb    $1038UniFLEX Monitor ROM                  16:46:37  Jun 20, 2024   Page   26High-Level Interrupt Handling                                                      endm  FF62 1F   B8                 tfr    dp,a      restore old A  FF64 34   07                 pshs   cc,d      push all regs like irq  FF66 A6   6B                 lda    11,s      get old cc  FF68 EF   6A                 stu    10,s      store proper u reg  FF6A 8A   80                 ora    #$80      set entire bit in cc  FF6C A7   E4                 sta    0,s                     *  FF6E 5F            01        clrb  FF6F 1F   9B                 tfr    b,dp      FORCE DP to ZERO  FF71 0C   0F                 inc    <kernel  FF73 AD   9F 000A            jsr    [frqvec]  do firqhandler  FF77 0A   0F                 dec    <kernel >FF79 16   FF8C               lbra   krnrti                                          *                     * System reset, COLD start                     *  FF7C 4F            kreset    clra  FF7D 10CE F7FF               lds    #inistk   here is RAM for sure  FF81 B7   FE01               sta    cuddwn    undo reset fetch                     * only HW level 0 allows for acces DAT  FF84 B7   FE03               sta    tlatch    select default 0  FF87 B7   FE02               sta    k_u_map   map in kernel  FF8A CC   FEFF               ldd    #rommap   setup kernel memory map E000-FFFF  FF8D FD   F40E               std    datbox+ioseg set E...+F...  FF90 BE   E800               ldx    dbsign    check if kernel debug present  FF93 8C   A55A               cmpx   #DEBSIG   special pattern  FF96 26   04                 bne    kresetx   no, just return  FF98 AD   9F E804            jsr    [debini]  FF9C 7E   F80E     kresetx   jmp    rinit     do sys init, find system RAM                                          *                     * System interrupts (unhandled)                     *  FF9F 7E   FBD1     kswi      jmp    unswi  FFA2 7E   FBD8     kswi2     jmp    unswi2  FFA5 7E   FBDF     kswi3     jmp    unswi3  FFA8 7E   FBFB     ktrap     jmp    cputrp                                          *                     * interrupt vector definitions                     *                       FFE0                         org    usrvec                       FFE0 FE40                    fdb    utrap  FFE2 FE8E                    fdb    uswi3  FFE4 FE7F                    fdb    uswi2  FFE6 FE10                    fdb    ufirq  FFE8 FE84                    fdb    uirq  FFEA FE3B                    fdb    uswiUniFLEX Monitor ROM                  16:46:37  Jun 20, 2024   Page   27High-Level Interrupt Handling                         FFEC FE50                    fdb    unmi  FFEE FF7C                    fdb    kreset                       FFF0                         org    vector                       FFF0 FFA8                    fdb    ktrap  FFF2 FFA5                    fdb    kswi3  FFF4 FFA2                    fdb    kswi2  FFF6 FF4D                    fdb    kfirq  FFF8 FF32                    fdb    kirq  FFFA FF9F                    fdb    kswi  FFFC FF3F                    fdb    knmi  FFFE FF7C                    fdb    kreset                                                    end0 Error(s) detected    14 Excessive BRANCH/JUMP(S) detectedUniFLEX Monitor ROM                  16:46:38  Jun 20, 2024   Page   28High-Level Interrupt Handling                       Symbol Table:Absolute Symbols:A        0008   B        0009   BARGI    0007   BLKHOL   00FD   CC       000A   CMDRSC   0011   CRLF     FA1A   D        0000   DATSENSE 0000   DEBSIG   A55A   DIVZI    000C   DP       000B   E        000E   F        000F   FALTI    0007   IDEBSY   0080   IDEDMRQ  0040   IDEDRD   00C8   IDEDSC   0010   IDEDWR   00CA   IDEERR   0001   IDEINTR  0080   IDEIO16  0001   IDEIORY  0002   IDEIRQ   0004   IDERDY   0040   IDERSTR  0010   IDE_DSL  0010   IDE_LBA  0040   KILLI    0005   LSTPAG   00F7   L_ADDR   000F   L_CSEL   0010   L_DMAEN  0040   L_DREAD  0080   L_INTEN  0020   PATIME   0001   PATIMR   0080   PBLGHT   00FF   PBMTRP   0080   PC       0005   PIRQMSK  0080   S        0004   STKSIZ   000E   TIMEI    0009   U        0003   V        0007   W        0006   X        0001   Y        0002   acia     F000   ascii    FFE4   badcmd   F996   bootorg  0800   brdbas0  F100   bufseg   000C   check    FB14   check2   FB21   chpflg   0010   chtask   0011   commnd   F8E1   config   FB0B   corcnt   0013   cormap   0110   count    FFFA   cpumod   000D   cputrp   FBFB   cputyp   000C   cuddwn   FE01   datbox   F400   datmap   F420   datsiz   0400   dboot    F928   dboot1   F933   dboot2   F941   dboot3   F950   dboot4   F959   dbsign   E800   dcorct   F410   debini   E804   debnmi   E802   del      FA95   delay    FA93   digit    FFFB   dlen     001C   dmaadh   0010   dmaadl   0011   dmaltc   0013   doboot   FA8D   doint    FEA9   dummy    F99C   dump10   F9BB   dump20   F9D4   dump30   F9EC   dump35   F9F6   dump40   F9F8   dump99   FA0C   dumpXY   F9B9   exam99   F9B8   examine  F99D   fboot    F95F   fboot1   F96A   fboot2   F978   fboot3   F987   fboot4   F990   fcp2io   03FD   figle2   F908   figle4   F91D   figle5   F925   figlef   F8FC   fio2cp   03FC   flblkh   0001   flblkl   0003   flblkm   0002   fldriv   0009   flnwop   000A   flpdpr   E000   flpfifo  0020   flpint   03FE   flpstp   03F0   flptel   03FF   flrflg   0000   flstat   0008   fltden   000C   fltsid   000B   fltsiz   0004   fltxfr   0006   frqvec   000A   getadr   FC77   getbyt   FC83   getext   FC81   gethex   FC98   getnx2   FB9D   getnxt   FB94   getpag   FB8E   gotmem   FB36   gppbase  E000   hello    FCC9   hexbyt   FC33   hexdig   FC3D   hexit    FC95   hexwrd   FC2F   hfail    FF0C   hiadr    FFFE   hirom    FE10   ideadr0  0006   ideadr1  0008   ideadr2  000A   ideadr3  000C   idecmst  000E   idedat   0000   ideerft  0002   ider1    FA76   idescnt  0004   idestat  0018   idigit   FCAD   inch     FC51   inchck   FC49   inistk   F7FF   ioseg    000E   irqvec   0000   isnrdy   FA4B   jump99   FD72   jumpprg  FD69   k_u_map  FE02   kernel   000F   kfirq    FF4D   kirq     FF32   knmi     FF3F   knmix    FF4B   kreset   FF7C   kresetx  FF9C   krnrti   FF08   kswi     FF9F   kswi2    FFA2   kswi3    FFA5   ktrap    FFA8   ldfl00   FAB3   ldfl01   FAD2   ldfl02   FAF7   ldif01   FAA2   ldif02   FAAE   limit    FFF7   loadi1   FA33   loadif   FA99   loadip   FA25   loadxit  FA85   lowadr   FFFC   lstmem   0014   mappe8   FA24   mapper   FA1C   memfal   FB9E   memmsk   0017   mod10    FD11   mod20    FD42   mod30    FD54   mod40    FD60   mod50    FD4A   mod99    FD62   modify   FD0A   modm00   FD63   monpcra  F005   monpcrb  F007   monpdra  F004   monpdrb  F006   montor   F8B7   newlin   FC14   nmivec   0008   nomap    00FD   nomem    FB35   nothex   FCB0   notimr   FBB4   nxtcmd   F8C0   offset   FFF5   outch    FC68   outchw   FC6A   outsp    FC27   panic    FC02   panicy   FCFF   pcrlf    FA10   pdata    FC1C   pdata2   FC26   prcs2    FE8C   process  FE87   prompt   FCF9   UniFLEX Monitor ROM                  16:46:38  Jun 20, 2024   Page   29High-Level Interrupt Handling                       putch    FC19   rammap   0100   remap    FEDE   reti35   FECB   retint   FEC1   rhexbyt  F80C   rinch    F806   rinchk   F804   rinit    F80E   rinit2   F83D   rinit4   F8AE   rinit8   F827   rinit9   F820   rinod    F875   romadr   F800   rommap   FEFF   romseg   000F   romspr   0018   romstk   BE80   routch   F808   rpdata   F80A   rrinit   F800   rtinit   F802   searc2   F8E0   search   F8D6   segadr   0010   segmax   0100   segmnt   FFF4   segsiz   1000   sorry    FCFC   sw2vec   0004   sw3vec   0006   swivec   0002   sysmap   0100   sysram   0100   sysres   0000   sysseg   0000   sysstk   BF38   syssu2   FB48   syssu4   FB59   syssu5   FB63   syssu6   FB6F   syssup   FB3E   systm1   FB80   teluch   0016   tfrseg   000D   tinit    FCB3   tinit2   FCC2   tlatch   FE03   tstloc   D0F0   tstpat   99AA   txtseg   0005   uargp    BF3C   ubasdp   00BF   ubasea   BF00   udummy   BF38   ufail    FF25   ufirq    FE10   uirq     FE84   uirt01   FED9   uisctr   FE00   umapno   BF43   unfirq   FBED   unhand   FBCA   unmi     FE50   unnmi    FBE6   unswi    FBD1   unswi2   FBD8   unswi3   FBDF   urelod   BF42   usercc   BF54   userd    BF55   useres   0001   userpb   BF5B   userpc   BF59   userx    BF57   usp      BF40   usrmap   BF44   usrrti   FEF7   usrseg   000B   usrtop   000E   usrvec   FFE0   ustksz   BF3B   uswi     FE3B   uswi2    FE7F   uswi2v   BF3E   uswi3    FE8E   utrap    FE40   vector   FFF0   waitrst  FA48   